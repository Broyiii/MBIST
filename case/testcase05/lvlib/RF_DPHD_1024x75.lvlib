#==================================================================================#
# Author: GWX Technology
# Attribution: Plain Text
# Birthday: Sun Nov 12 15:21:19 CST 2023
# Organization: GWX Technology
# Copyright: GWX Technology Â©2023 GWX Technology Inc. All rights reserved.
#----------------------------------------------------------------------------------#
# Description:
# All the data in the file was generated by GWX Technology. This information was
# prepared only for EDA tools training. GWX Technology does not guarantee the
# accuracy or completeness of the information contained herein. GWX Technology
# shall not be liable for any loss or damage of any kind arising from the use of
# this document or the information contained herein.
#----------------------------------------------------------------------------------#
# Version: 0.9.0.0 Alpha
#==================================================================================#

/*   --------------------------------------------------------------   */
/*                       Template Revision : 6.2.3                    */
/*   --------------------------------------------------------------   */
/*                      * Tessent MemoryBIST Model *                  */


   MemoryTemplate ( RF_DPHD_1024x75 ) {
   CellName:      RF_DPHD_1024x75;
   MemoryType:    SRAM;

   LogicalPorts:  2RW;
   NumberofWords:  1024;
   NumberofBits :  75;
   Algorithm:  SMarchCHKBvcd ;
   BitGrouping : 1;
   OperationSet: SyncWRvcd;
   MinHold:  0.622;
   MilliWattsPerMegaHertz:  3.048e-02;
   ShadowRead: On;
   ShadowWrite: On;
   ShadowWriteOK: On;
   WriteOutOfRange: Off;

/* Scrambling Information */ 
   AddressCounter { 
     Function (Address) { 
       LogicalAddressMaP { 
         ColumnAddress[1:0] : Address [1:0];
           BankAddress[0] : Address [4]; 
         RowAddress[1:0] : Address [3:2];
         RowAddress[6:2] : Address [9:5];
       } 
     } 
     Function (Rowaddress) { 
       CountRange [0:127]; 
     } 
     Function (Columnaddress) { 
       CountRange [0:3]; 
     } 
   } 


Port (  QA[74:0] )
             {   
               Direction: OUTPUT;
               LogicalPort: A;
               Function: data;
             }
Port (  RSCOUT )
             {   
               Direction: OUTPUT;
               Function: BisrSerialData;
             }
Port (  QB[74:0] )
             {   
               Direction: OUTPUT;
               LogicalPort: B;
               Function: data;
             }
Port (  ADRA[9:0] )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: Address;
             }
Port (  DA[74:0] )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: data;
             }
Port (  WEA )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: WriteEnable;
               Polarity: ActiveHigh;
             }
Port (  MEA )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: Select;
               Polarity: ActiveHigh;
             }
Port (  CLKA )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: Clock;
               Polarity: ActiveHigh;
             }
Port (  RSCIN )
             {   
               Direction: INPUT;
               Function: BisrSerialData;
             }
Port (  RSCEN )
             {   
               Direction: INPUT;
               Function: BisrScanEnable;
             }
Port (  RSCRST )
             {   
               Direction: INPUT;
               Function: BisrReset;
               Polarity: ActiveHigh;
             }
Port (  RSCLK )
             {   
               Direction: INPUT;
               Function: BisrClock;
             }
Port (  FISO )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  TEST1A )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: None;
               Safevalue: 0;
             }
Port (  TEST_RNMA )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: None;
               Safevalue: 0;
             }
Port (  RMEA )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: None;
               Safevalue: 0;
             }
Port (  RMA[3:0] )
             {   
               Direction: INPUT;
               LogicalPort: A;
               Function: None;
               Safevalue: 4'b0010;
             }
Port (  LS )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  BC1 )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  BC2 )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  ADRB[9:0] )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: Address;
             }
Port (  DB[74:0] )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: data;
             }
Port (  WEB )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: WriteEnable;
               Polarity: ActiveHigh;
             }
Port (  MEB )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: Select;
               Polarity: ActiveHigh;
             }
Port (  CLKB )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: Clock;
               Polarity: ActiveHigh;
             }
Port (  TEST1B )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: None;
               Safevalue: 0;
             }
Port (  TEST_RNMB )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: None;
               Safevalue: 0;
             }
Port (  RMEB )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: None;
               Safevalue: 0;
             }
Port (  RMB[3:0] )
             {   
               Direction: INPUT;
               LogicalPort: B;
               Function: None;
               Safevalue: 4'b0010;
             }
RedundancyAnalysis { 
	ColumnSegment (Right) { 
		ShiftedIORange: QA[74:38]; 
                NumberOfSpareElements : 1; 
		FuseSet { 
			FuseMap[5:0] { 
				ShiftedIO(QA[38]):   6'b000000; 
				ShiftedIO(QA[39]):   6'b000001; 
				ShiftedIO(QA[40]):   6'b000010; 
				ShiftedIO(QA[41]):   6'b000011; 
				ShiftedIO(QA[42]):   6'b000100; 
				ShiftedIO(QA[43]):   6'b000101; 
				ShiftedIO(QA[44]):   6'b000110; 
				ShiftedIO(QA[45]):   6'b000111; 
				ShiftedIO(QA[46]):   6'b001000; 
				ShiftedIO(QA[47]):   6'b001001; 
				ShiftedIO(QA[48]):   6'b001010; 
				ShiftedIO(QA[49]):   6'b001011; 
				ShiftedIO(QA[50]):   6'b001100; 
				ShiftedIO(QA[51]):   6'b001101; 
				ShiftedIO(QA[52]):   6'b001110; 
				ShiftedIO(QA[53]):   6'b001111; 
				ShiftedIO(QA[54]):   6'b010000; 
				ShiftedIO(QA[55]):   6'b010001; 
				ShiftedIO(QA[56]):   6'b010010; 
				ShiftedIO(QA[57]):   6'b010011; 
				ShiftedIO(QA[58]):   6'b010100; 
				ShiftedIO(QA[59]):   6'b010101; 
				ShiftedIO(QA[60]):   6'b010110; 
				ShiftedIO(QA[61]):   6'b010111; 
				ShiftedIO(QA[62]):   6'b011000; 
				ShiftedIO(QA[63]):   6'b011001; 
				ShiftedIO(QA[64]):   6'b011010; 
				ShiftedIO(QA[65]):   6'b011011; 
				ShiftedIO(QA[66]):   6'b011100; 
				ShiftedIO(QA[67]):   6'b011101; 
				ShiftedIO(QA[68]):   6'b011110; 
				ShiftedIO(QA[69]):   6'b011111; 
				ShiftedIO(QA[70]):   6'b100000; 
				ShiftedIO(QA[71]):   6'b100001; 
				ShiftedIO(QA[72]):   6'b100010; 
				ShiftedIO(QA[73]):   6'b100011; 
				ShiftedIO(QA[74]):   6'b100100; 
			} 
		} 
		PinMap { 
			SpareElement { 
				RepairEnable: RepairRegister[0]; 
                                FuseMap[0]: RepairRegister[1]; 
                                FuseMap[1]: RepairRegister[2]; 
                                FuseMap[2]: RepairRegister[3]; 
                                FuseMap[3]: RepairRegister[4]; 
                                FuseMap[4]: RepairRegister[5]; 
                                FuseMap[5]: RepairRegister[6]; 
				LogicLow  : RepairRegister[7]; 
				LogicLow  : RepairRegister[8]; 
			} 
		} 
	} 
	ColumnSegment (Left) { 
		ShiftedIORange: QA[37:0]; 
                NumberOfSpareElements : 1; 
		FuseSet { 
			FuseMap[5:0] { 
				ShiftedIO(QA[0]):   6'b000000; 
				ShiftedIO(QA[1]):   6'b000001; 
				ShiftedIO(QA[2]):   6'b000010; 
				ShiftedIO(QA[3]):   6'b000011; 
				ShiftedIO(QA[4]):   6'b000100; 
				ShiftedIO(QA[5]):   6'b000101; 
				ShiftedIO(QA[6]):   6'b000110; 
				ShiftedIO(QA[7]):   6'b000111; 
				ShiftedIO(QA[8]):   6'b001000; 
				ShiftedIO(QA[9]):   6'b001001; 
				ShiftedIO(QA[10]):   6'b001010; 
				ShiftedIO(QA[11]):   6'b001011; 
				ShiftedIO(QA[12]):   6'b001100; 
				ShiftedIO(QA[13]):   6'b001101; 
				ShiftedIO(QA[14]):   6'b001110; 
				ShiftedIO(QA[15]):   6'b001111; 
				ShiftedIO(QA[16]):   6'b010000; 
				ShiftedIO(QA[17]):   6'b010001; 
				ShiftedIO(QA[18]):   6'b010010; 
				ShiftedIO(QA[19]):   6'b010011; 
				ShiftedIO(QA[20]):   6'b010100; 
				ShiftedIO(QA[21]):   6'b010101; 
				ShiftedIO(QA[22]):   6'b010110; 
				ShiftedIO(QA[23]):   6'b010111; 
				ShiftedIO(QA[24]):   6'b011000; 
				ShiftedIO(QA[25]):   6'b011001; 
				ShiftedIO(QA[26]):   6'b011010; 
				ShiftedIO(QA[27]):   6'b011011; 
				ShiftedIO(QA[28]):   6'b011100; 
				ShiftedIO(QA[29]):   6'b011101; 
				ShiftedIO(QA[30]):   6'b011110; 
				ShiftedIO(QA[31]):   6'b011111; 
				ShiftedIO(QA[32]):   6'b100000; 
				ShiftedIO(QA[33]):   6'b100001; 
				ShiftedIO(QA[34]):   6'b100010; 
				ShiftedIO(QA[35]):   6'b100011; 
				ShiftedIO(QA[36]):   6'b100100; 
				ShiftedIO(QA[37]):   6'b100101; 
			} 
		} 
		PinMap { 
			SpareElement { 
				RepairEnable: RepairRegister[9]; 
                                FuseMap[0]: RepairRegister[10]; 
                                FuseMap[1]: RepairRegister[11]; 
                                FuseMap[2]: RepairRegister[12]; 
                                FuseMap[3]: RepairRegister[13]; 
                                FuseMap[4]: RepairRegister[14]; 
                                FuseMap[5]: RepairRegister[15]; 
				LogicLow  : RepairRegister[16]; 
				LogicLow  : RepairRegister[17]; 
			} 
		} 
	} 
} 

}
