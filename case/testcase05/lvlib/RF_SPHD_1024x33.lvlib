#==================================================================================#
# Author: GWX Technology
# Attribution: Plain Text
# Birthday: Sun Nov 12 15:21:19 CST 2023
# Organization: GWX Technology
# Copyright: GWX Technology Â©2023 GWX Technology Inc. All rights reserved.
#----------------------------------------------------------------------------------#
# Description:
# All the data in the file was generated by GWX Technology. This information was
# prepared only for EDA tools training. GWX Technology does not guarantee the
# accuracy or completeness of the information contained herein. GWX Technology
# shall not be liable for any loss or damage of any kind arising from the use of
# this document or the information contained herein.
#----------------------------------------------------------------------------------#
# Version: 0.9.0.0 Alpha
#==================================================================================#

/*   --------------------------------------------------------------   */
/*                       Template Revision : 6.2.8                    */
/*   --------------------------------------------------------------   */
/*                      * Tessent MemoryBIST Model *                  */


   MemoryTemplate ( RF_SPHD_1024x33 ) {
   CellName:      RF_SPHD_1024x33;
   MemoryType:    SRAM;

   LogicalPorts:  1RW;
   NumberofWords:  1024;
   NumberofBits :  33;
   Algorithm:  SMarchCHKBvcd ;
   BitGrouping : 1;
   OperationSet: SyncWRvcd;
   MinHold:  0.415;
   MilliWattsPerMegaHertz:  4.374e-03;
   ShadowRead: Off;
   WriteOutOfRange: Off;

/* Scrambling Information */ 
   AddressCounter { 
     Function (Address) { 
       LogicalAddressMaP { 
         ColumnAddress[1:0] : Address [1:0];
           BankAddress[0] : Address [4]; 
         RowAddress[1:0] : Address [3:2];
         RowAddress[6:2] : Address [9:5];
       } 
     } 
     Function (Rowaddress) { 
       CountRange [0:127]; 
     } 
     Function (Columnaddress) { 
       CountRange [0:3]; 
     } 
   } 


Port (  Q[32:0] )
             {   
               Direction: OUTPUT;
               Function: data;
             }
Port (  RSCOUT )
             {   
               Direction: OUTPUT;
               Function: BisrSerialData;
             }
Port (  ADR[9:0] )
             {   
               Direction: INPUT;
               Function: Address;
             }
Port (  D[32:0] )
             {   
               Direction: INPUT;
               Function: data;
             }
Port (  WE )
             {   
               Direction: INPUT;
               Function: WriteEnable;
               Polarity: ActiveHigh;
             }
Port (  ME )
             {   
               Direction: INPUT;
               Function: Select;
               Polarity: ActiveHigh;
             }
Port (  CLK )
             {   
               Direction: INPUT;
               Function: Clock;
               Polarity: ActiveHigh;
             }
Port (  RSCIN )
             {   
               Direction: INPUT;
               Function: BisrSerialData;
             }
Port (  RSCEN )
             {   
               Direction: INPUT;
               Function: BisrScanEnable;
             }
Port (  RSCRST )
             {   
               Direction: INPUT;
               Function: BisrReset;
               Polarity: ActiveHigh;
             }
Port (  RSCLK )
             {   
               Direction: INPUT;
               Function: BisrClock;
             }
Port (  FISO )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  TEST1 )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  TEST_RNM )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  RME )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  RM[3:0] )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 4'b0010;
             }
Port (  LS )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  BC1 )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
Port (  BC2 )
             {   
               Direction: INPUT;
               Function: None;
               Safevalue: 0;
             }
RedundancyAnalysis { 
	ColumnSegment (Right) { 
		ShiftedIORange: Q[32:17]; 
                NumberOfSpareElements : 1; 
		FuseSet { 
			FuseMap[3:0] { 
				ShiftedIO(Q[17]):   4'b0000; 
				ShiftedIO(Q[18]):   4'b0001; 
				ShiftedIO(Q[19]):   4'b0010; 
				ShiftedIO(Q[20]):   4'b0011; 
				ShiftedIO(Q[21]):   4'b0100; 
				ShiftedIO(Q[22]):   4'b0101; 
				ShiftedIO(Q[23]):   4'b0110; 
				ShiftedIO(Q[24]):   4'b0111; 
				ShiftedIO(Q[25]):   4'b1000; 
				ShiftedIO(Q[26]):   4'b1001; 
				ShiftedIO(Q[27]):   4'b1010; 
				ShiftedIO(Q[28]):   4'b1011; 
				ShiftedIO(Q[29]):   4'b1100; 
				ShiftedIO(Q[30]):   4'b1101; 
				ShiftedIO(Q[31]):   4'b1110; 
				ShiftedIO(Q[32]):   4'b1111; 
			} 
		} 
		PinMap { 
			SpareElement { 
				RepairEnable: RepairRegister[0]; 
                                FuseMap[0]: RepairRegister[1]; 
                                FuseMap[1]: RepairRegister[2]; 
                                FuseMap[2]: RepairRegister[3]; 
                                FuseMap[3]: RepairRegister[4]; 
				LogicLow  : RepairRegister[5]; 
				LogicLow  : RepairRegister[6]; 
				LogicLow  : RepairRegister[7]; 
				LogicLow  : RepairRegister[8]; 
			} 
		} 
	} 
	ColumnSegment (Left) { 
		ShiftedIORange: Q[16:0]; 
                NumberOfSpareElements : 1; 
		FuseSet { 
			FuseMap[4:0] { 
				ShiftedIO(Q[0]):   5'b00000; 
				ShiftedIO(Q[1]):   5'b00001; 
				ShiftedIO(Q[2]):   5'b00010; 
				ShiftedIO(Q[3]):   5'b00011; 
				ShiftedIO(Q[4]):   5'b00100; 
				ShiftedIO(Q[5]):   5'b00101; 
				ShiftedIO(Q[6]):   5'b00110; 
				ShiftedIO(Q[7]):   5'b00111; 
				ShiftedIO(Q[8]):   5'b01000; 
				ShiftedIO(Q[9]):   5'b01001; 
				ShiftedIO(Q[10]):   5'b01010; 
				ShiftedIO(Q[11]):   5'b01011; 
				ShiftedIO(Q[12]):   5'b01100; 
				ShiftedIO(Q[13]):   5'b01101; 
				ShiftedIO(Q[14]):   5'b01110; 
				ShiftedIO(Q[15]):   5'b01111; 
				ShiftedIO(Q[16]):   5'b10000; 
			} 
		} 
		PinMap { 
			SpareElement { 
				RepairEnable: RepairRegister[9]; 
                                FuseMap[0]: RepairRegister[10]; 
                                FuseMap[1]: RepairRegister[11]; 
                                FuseMap[2]: RepairRegister[12]; 
                                FuseMap[3]: RepairRegister[13]; 
                                FuseMap[4]: RepairRegister[14]; 
				LogicLow  : RepairRegister[15]; 
				LogicLow  : RepairRegister[16]; 
				LogicLow  : RepairRegister[17]; 
			} 
		} 
	} 
} 

}
