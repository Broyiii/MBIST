//==================================================================================//
// Author: GWX Technology
// Attribution: Verilog-HDL
// Birthday: Sun Nov 12 15:24:08 CST 2023
// Organization: GWX Technology
// Copyright: GWX Technology Â©2023 GWX Technology Inc. All rights reserved.
//----------------------------------------------------------------------------------//
// Description:
// All the data in the file was generated by GWX Technology. This information was
// prepared only for EDA tools training. GWX Technology does not guarantee the
// accuracy or completeness of the information contained herein. GWX Technology
// shall not be liable for any loss or damage of any kind arising from the use of
// this document or the information contained herein.
//----------------------------------------------------------------------------------//
// Version: 0.9.0.0 Alpha
//==================================================================================//

//   --------------------------------------------------------------     
//                       Template Revision : 6.2.3                      
//   --------------------------------------------------------------     
//                      * Synchronous, 2-Port SRAM *                  
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:RF_DPHD_1024x75                                      
//   Memory Size:1024 words x 75 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   QA[74:0]                         
//                                   RSCOUT                           
//                                   QB[74:0]                         
//               Input Ports:                                         
//                                   ADRA[9:0]                        
//                                   DA[74:0]                         
//                                   WEA                              
//                                   MEA                              
//                                   CLKA                             
//                                   RSCIN                            
//                                   RSCEN                            
//                                   RSCRST                           
//                                   RSCLK                            
//                                   FISO                             
//                                   TEST1A                           
//                                   TEST_RNMA                        
//                                   RMEA                             
//                                   RMA[3:0]                         
//                                   LS                               
//                                   BC1                              
//                                   BC2                              
//                                   ADRB[9:0]                        
//                                   DB[74:0]                         
//                                   WEB                              
//                                   MEB                              
//                                   CLKB                             
//                                   TEST1B                           
//                                   TEST_RNMB                        
//                                   RMEB                             
//                                   RMB[3:0]                         
// -------------------------------------------------------------------- 
// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = LOW option.         
// -------------------------------------------------------------------- 


`resetall 
`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 

`define True    1'b1
`define False   1'b0

module RF_DPHD_1024x75 ( QA, RSCOUT, QB, ADRA, DA, WEA, MEA, CLKA, RSCIN, RSCEN, RSCRST, RSCLK, FISO, TEST1A, TEST_RNMA, RMEA, RMA, LS, BC1, BC2, ADRB, DB, WEB, MEB, CLKB, TEST1B, TEST_RNMB, RMEB, RMB);

// Input/Output Ports Declaration
output  [74:0] QA;
output RSCOUT;
output  [74:0] QB;
input  [9:0] ADRA;
input  [74:0] DA;
input WEA;
input MEA;
input CLKA;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input TEST1A;
input TEST_RNMA;
input RMEA;
input  [3:0] RMA;
input LS;
input BC1;
input BC2;
input  [9:0] ADRB;
input  [74:0] DB;
input WEB;
input MEB;
input CLKB;
input TEST1B;
input TEST_RNMB;
input RMEB;
input  [3:0] RMB;

// Local registers, wires, etc
parameter PreloadFilename = "init.file";
`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_FAST_VERILOG
reg sim_check_A ;
reg sim_check_B ;
`else
// Notifiers Declaration
reg notif_adra;
wire [74:0] notif_da;
reg notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0;
reg notif_wea;
reg notif_mea;
reg notif_clka;
reg notif_clkap;
reg notif_clka_CLKB_rise_rise_rec;
reg notif_rscin;
reg notif_rscen;
reg notif_rscen_CLKA_rise_fall_rec;
reg notif_rscen_CLKB_rise_fall_rec;
reg notif_rscrst;
reg notif_rscrst_setup;
reg notif_rscrst_RSCLK_rise_fall_rec;
reg notif_rscrst_CLKA_rise_fall_rec;
reg notif_rscrst_CLKB_rise_fall_rec;
reg notif_rsclk;
reg notif_rsclk_CLKA_rise_rise_rec;
reg notif_rsclk_CLKB_rise_rise_rec;
reg notif_fiso;
reg notif_test1a;
reg notif_test_rnma;
reg notif_rmea;
reg notif_rma;
reg notif_ls;
reg notif_ls_b;
reg notif_bc1;
reg notif_bc1_b;
reg notif_bc2;
reg notif_bc2_b;
reg notif_adrb;
wire [74:0] notif_db;
reg notif_db_74, notif_db_73, notif_db_72, notif_db_71, notif_db_70, notif_db_69, notif_db_68, notif_db_67, notif_db_66, notif_db_65, notif_db_64, notif_db_63, notif_db_62, notif_db_61, notif_db_60, notif_db_59, notif_db_58, notif_db_57, notif_db_56, notif_db_55, notif_db_54, notif_db_53, notif_db_52, notif_db_51, notif_db_50, notif_db_49, notif_db_48, notif_db_47, notif_db_46, notif_db_45, notif_db_44, notif_db_43, notif_db_42, notif_db_41, notif_db_40, notif_db_39, notif_db_38, notif_db_37, notif_db_36, notif_db_35, notif_db_34, notif_db_33, notif_db_32, notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, notif_db_9, notif_db_8, notif_db_7, notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0;
reg notif_web;
reg notif_meb;
reg notif_clkb;
reg notif_clkbp;
reg notif_clkb_CLKA_rise_rise_rec;
reg notif_test1b;
reg notif_test_rnmb;
reg notif_rmeb;
reg notif_rmb;
`endif
`ifdef VIRAGE_FAST_VERILOG
`else
reg  EVENT_TCQ_A;
`endif
real  CLK_T_A;
reg  [9 : 0 ] ADRA_buf_L;
reg ADRFLAGA;
reg  [9 : 0 ] ADRA_old;
reg  MEA_old;
reg  WEA_old;
`ifdef VIRAGE_FAST_VERILOG
`else
reg  EVENT_TCQ_B;
`endif
real  CLK_T_B;
reg  [9 : 0 ] ADRB_buf_L;
reg ADRFLAGB;
reg  [9 : 0 ] ADRB_old;
reg  MEB_old;
reg  WEB_old;
wire [74:0] QA_final;
wire [74:0] QB_final;
`ifdef VIRAGE_FAST_VERILOG
wire [74:0] QA_buf;
assign QA[0] = QA_buf[0];
assign QA[1] = QA_buf[1];
assign QA[2] = QA_buf[2];
assign QA[3] = QA_buf[3];
assign QA[4] = QA_buf[4];
assign QA[5] = QA_buf[5];
assign QA[6] = QA_buf[6];
assign QA[7] = QA_buf[7];
assign QA[8] = QA_buf[8];
assign QA[9] = QA_buf[9];
assign QA[10] = QA_buf[10];
assign QA[11] = QA_buf[11];
assign QA[12] = QA_buf[12];
assign QA[13] = QA_buf[13];
assign QA[14] = QA_buf[14];
assign QA[15] = QA_buf[15];
assign QA[16] = QA_buf[16];
assign QA[17] = QA_buf[17];
assign QA[18] = QA_buf[18];
assign QA[19] = QA_buf[19];
assign QA[20] = QA_buf[20];
assign QA[21] = QA_buf[21];
assign QA[22] = QA_buf[22];
assign QA[23] = QA_buf[23];
assign QA[24] = QA_buf[24];
assign QA[25] = QA_buf[25];
assign QA[26] = QA_buf[26];
assign QA[27] = QA_buf[27];
assign QA[28] = QA_buf[28];
assign QA[29] = QA_buf[29];
assign QA[30] = QA_buf[30];
assign QA[31] = QA_buf[31];
assign QA[32] = QA_buf[32];
assign QA[33] = QA_buf[33];
assign QA[34] = QA_buf[34];
assign QA[35] = QA_buf[35];
assign QA[36] = QA_buf[36];
assign QA[37] = QA_buf[37];
assign QA[38] = QA_buf[38];
assign QA[39] = QA_buf[39];
assign QA[40] = QA_buf[40];
assign QA[41] = QA_buf[41];
assign QA[42] = QA_buf[42];
assign QA[43] = QA_buf[43];
assign QA[44] = QA_buf[44];
assign QA[45] = QA_buf[45];
assign QA[46] = QA_buf[46];
assign QA[47] = QA_buf[47];
assign QA[48] = QA_buf[48];
assign QA[49] = QA_buf[49];
assign QA[50] = QA_buf[50];
assign QA[51] = QA_buf[51];
assign QA[52] = QA_buf[52];
assign QA[53] = QA_buf[53];
assign QA[54] = QA_buf[54];
assign QA[55] = QA_buf[55];
assign QA[56] = QA_buf[56];
assign QA[57] = QA_buf[57];
assign QA[58] = QA_buf[58];
assign QA[59] = QA_buf[59];
assign QA[60] = QA_buf[60];
assign QA[61] = QA_buf[61];
assign QA[62] = QA_buf[62];
assign QA[63] = QA_buf[63];
assign QA[64] = QA_buf[64];
assign QA[65] = QA_buf[65];
assign QA[66] = QA_buf[66];
assign QA[67] = QA_buf[67];
assign QA[68] = QA_buf[68];
assign QA[69] = QA_buf[69];
assign QA[70] = QA_buf[70];
assign QA[71] = QA_buf[71];
assign QA[72] = QA_buf[72];
assign QA[73] = QA_buf[73];
assign QA[74] = QA_buf[74];
wire RSCOUT_buf;
assign  RSCOUT = RSCOUT_buf;
wire [74:0] QB_buf;
assign QB[0] = QB_buf[0];
assign QB[1] = QB_buf[1];
assign QB[2] = QB_buf[2];
assign QB[3] = QB_buf[3];
assign QB[4] = QB_buf[4];
assign QB[5] = QB_buf[5];
assign QB[6] = QB_buf[6];
assign QB[7] = QB_buf[7];
assign QB[8] = QB_buf[8];
assign QB[9] = QB_buf[9];
assign QB[10] = QB_buf[10];
assign QB[11] = QB_buf[11];
assign QB[12] = QB_buf[12];
assign QB[13] = QB_buf[13];
assign QB[14] = QB_buf[14];
assign QB[15] = QB_buf[15];
assign QB[16] = QB_buf[16];
assign QB[17] = QB_buf[17];
assign QB[18] = QB_buf[18];
assign QB[19] = QB_buf[19];
assign QB[20] = QB_buf[20];
assign QB[21] = QB_buf[21];
assign QB[22] = QB_buf[22];
assign QB[23] = QB_buf[23];
assign QB[24] = QB_buf[24];
assign QB[25] = QB_buf[25];
assign QB[26] = QB_buf[26];
assign QB[27] = QB_buf[27];
assign QB[28] = QB_buf[28];
assign QB[29] = QB_buf[29];
assign QB[30] = QB_buf[30];
assign QB[31] = QB_buf[31];
assign QB[32] = QB_buf[32];
assign QB[33] = QB_buf[33];
assign QB[34] = QB_buf[34];
assign QB[35] = QB_buf[35];
assign QB[36] = QB_buf[36];
assign QB[37] = QB_buf[37];
assign QB[38] = QB_buf[38];
assign QB[39] = QB_buf[39];
assign QB[40] = QB_buf[40];
assign QB[41] = QB_buf[41];
assign QB[42] = QB_buf[42];
assign QB[43] = QB_buf[43];
assign QB[44] = QB_buf[44];
assign QB[45] = QB_buf[45];
assign QB[46] = QB_buf[46];
assign QB[47] = QB_buf[47];
assign QB[48] = QB_buf[48];
assign QB[49] = QB_buf[49];
assign QB[50] = QB_buf[50];
assign QB[51] = QB_buf[51];
assign QB[52] = QB_buf[52];
assign QB[53] = QB_buf[53];
assign QB[54] = QB_buf[54];
assign QB[55] = QB_buf[55];
assign QB[56] = QB_buf[56];
assign QB[57] = QB_buf[57];
assign QB[58] = QB_buf[58];
assign QB[59] = QB_buf[59];
assign QB[60] = QB_buf[60];
assign QB[61] = QB_buf[61];
assign QB[62] = QB_buf[62];
assign QB[63] = QB_buf[63];
assign QB[64] = QB_buf[64];
assign QB[65] = QB_buf[65];
assign QB[66] = QB_buf[66];
assign QB[67] = QB_buf[67];
assign QB[68] = QB_buf[68];
assign QB[69] = QB_buf[69];
assign QB[70] = QB_buf[70];
assign QB[71] = QB_buf[71];
assign QB[72] = QB_buf[72];
assign QB[73] = QB_buf[73];
assign QB[74] = QB_buf[74];
wire [9:0] ADRA_buf;
assign  ADRA_buf[0] = (ADRA[0] === 1'bZ) ? 1'bX : ( ADRA[0]);
assign  ADRA_buf[1] = (ADRA[1] === 1'bZ) ? 1'bX : ( ADRA[1]);
assign  ADRA_buf[2] = (ADRA[2] === 1'bZ) ? 1'bX : ( ADRA[2]);
assign  ADRA_buf[3] = (ADRA[3] === 1'bZ) ? 1'bX : ( ADRA[3]);
assign  ADRA_buf[4] = (ADRA[4] === 1'bZ) ? 1'bX : ( ADRA[4]);
assign  ADRA_buf[5] = (ADRA[5] === 1'bZ) ? 1'bX : ( ADRA[5]);
assign  ADRA_buf[6] = (ADRA[6] === 1'bZ) ? 1'bX : ( ADRA[6]);
assign  ADRA_buf[7] = (ADRA[7] === 1'bZ) ? 1'bX : ( ADRA[7]);
assign  ADRA_buf[8] = (ADRA[8] === 1'bZ) ? 1'bX : ( ADRA[8]);
assign  ADRA_buf[9] = (ADRA[9] === 1'bZ) ? 1'bX : ( ADRA[9]);
wire [74:0] DA_buf;
assign  DA_buf[0] = (DA[0] === 1'bZ) ? 1'bX : ( DA[0]);
assign  DA_buf[1] = (DA[1] === 1'bZ) ? 1'bX : ( DA[1]);
assign  DA_buf[2] = (DA[2] === 1'bZ) ? 1'bX : ( DA[2]);
assign  DA_buf[3] = (DA[3] === 1'bZ) ? 1'bX : ( DA[3]);
assign  DA_buf[4] = (DA[4] === 1'bZ) ? 1'bX : ( DA[4]);
assign  DA_buf[5] = (DA[5] === 1'bZ) ? 1'bX : ( DA[5]);
assign  DA_buf[6] = (DA[6] === 1'bZ) ? 1'bX : ( DA[6]);
assign  DA_buf[7] = (DA[7] === 1'bZ) ? 1'bX : ( DA[7]);
assign  DA_buf[8] = (DA[8] === 1'bZ) ? 1'bX : ( DA[8]);
assign  DA_buf[9] = (DA[9] === 1'bZ) ? 1'bX : ( DA[9]);
assign  DA_buf[10] = (DA[10] === 1'bZ) ? 1'bX : ( DA[10]);
assign  DA_buf[11] = (DA[11] === 1'bZ) ? 1'bX : ( DA[11]);
assign  DA_buf[12] = (DA[12] === 1'bZ) ? 1'bX : ( DA[12]);
assign  DA_buf[13] = (DA[13] === 1'bZ) ? 1'bX : ( DA[13]);
assign  DA_buf[14] = (DA[14] === 1'bZ) ? 1'bX : ( DA[14]);
assign  DA_buf[15] = (DA[15] === 1'bZ) ? 1'bX : ( DA[15]);
assign  DA_buf[16] = (DA[16] === 1'bZ) ? 1'bX : ( DA[16]);
assign  DA_buf[17] = (DA[17] === 1'bZ) ? 1'bX : ( DA[17]);
assign  DA_buf[18] = (DA[18] === 1'bZ) ? 1'bX : ( DA[18]);
assign  DA_buf[19] = (DA[19] === 1'bZ) ? 1'bX : ( DA[19]);
assign  DA_buf[20] = (DA[20] === 1'bZ) ? 1'bX : ( DA[20]);
assign  DA_buf[21] = (DA[21] === 1'bZ) ? 1'bX : ( DA[21]);
assign  DA_buf[22] = (DA[22] === 1'bZ) ? 1'bX : ( DA[22]);
assign  DA_buf[23] = (DA[23] === 1'bZ) ? 1'bX : ( DA[23]);
assign  DA_buf[24] = (DA[24] === 1'bZ) ? 1'bX : ( DA[24]);
assign  DA_buf[25] = (DA[25] === 1'bZ) ? 1'bX : ( DA[25]);
assign  DA_buf[26] = (DA[26] === 1'bZ) ? 1'bX : ( DA[26]);
assign  DA_buf[27] = (DA[27] === 1'bZ) ? 1'bX : ( DA[27]);
assign  DA_buf[28] = (DA[28] === 1'bZ) ? 1'bX : ( DA[28]);
assign  DA_buf[29] = (DA[29] === 1'bZ) ? 1'bX : ( DA[29]);
assign  DA_buf[30] = (DA[30] === 1'bZ) ? 1'bX : ( DA[30]);
assign  DA_buf[31] = (DA[31] === 1'bZ) ? 1'bX : ( DA[31]);
assign  DA_buf[32] = (DA[32] === 1'bZ) ? 1'bX : ( DA[32]);
assign  DA_buf[33] = (DA[33] === 1'bZ) ? 1'bX : ( DA[33]);
assign  DA_buf[34] = (DA[34] === 1'bZ) ? 1'bX : ( DA[34]);
assign  DA_buf[35] = (DA[35] === 1'bZ) ? 1'bX : ( DA[35]);
assign  DA_buf[36] = (DA[36] === 1'bZ) ? 1'bX : ( DA[36]);
assign  DA_buf[37] = (DA[37] === 1'bZ) ? 1'bX : ( DA[37]);
assign  DA_buf[38] = (DA[38] === 1'bZ) ? 1'bX : ( DA[38]);
assign  DA_buf[39] = (DA[39] === 1'bZ) ? 1'bX : ( DA[39]);
assign  DA_buf[40] = (DA[40] === 1'bZ) ? 1'bX : ( DA[40]);
assign  DA_buf[41] = (DA[41] === 1'bZ) ? 1'bX : ( DA[41]);
assign  DA_buf[42] = (DA[42] === 1'bZ) ? 1'bX : ( DA[42]);
assign  DA_buf[43] = (DA[43] === 1'bZ) ? 1'bX : ( DA[43]);
assign  DA_buf[44] = (DA[44] === 1'bZ) ? 1'bX : ( DA[44]);
assign  DA_buf[45] = (DA[45] === 1'bZ) ? 1'bX : ( DA[45]);
assign  DA_buf[46] = (DA[46] === 1'bZ) ? 1'bX : ( DA[46]);
assign  DA_buf[47] = (DA[47] === 1'bZ) ? 1'bX : ( DA[47]);
assign  DA_buf[48] = (DA[48] === 1'bZ) ? 1'bX : ( DA[48]);
assign  DA_buf[49] = (DA[49] === 1'bZ) ? 1'bX : ( DA[49]);
assign  DA_buf[50] = (DA[50] === 1'bZ) ? 1'bX : ( DA[50]);
assign  DA_buf[51] = (DA[51] === 1'bZ) ? 1'bX : ( DA[51]);
assign  DA_buf[52] = (DA[52] === 1'bZ) ? 1'bX : ( DA[52]);
assign  DA_buf[53] = (DA[53] === 1'bZ) ? 1'bX : ( DA[53]);
assign  DA_buf[54] = (DA[54] === 1'bZ) ? 1'bX : ( DA[54]);
assign  DA_buf[55] = (DA[55] === 1'bZ) ? 1'bX : ( DA[55]);
assign  DA_buf[56] = (DA[56] === 1'bZ) ? 1'bX : ( DA[56]);
assign  DA_buf[57] = (DA[57] === 1'bZ) ? 1'bX : ( DA[57]);
assign  DA_buf[58] = (DA[58] === 1'bZ) ? 1'bX : ( DA[58]);
assign  DA_buf[59] = (DA[59] === 1'bZ) ? 1'bX : ( DA[59]);
assign  DA_buf[60] = (DA[60] === 1'bZ) ? 1'bX : ( DA[60]);
assign  DA_buf[61] = (DA[61] === 1'bZ) ? 1'bX : ( DA[61]);
assign  DA_buf[62] = (DA[62] === 1'bZ) ? 1'bX : ( DA[62]);
assign  DA_buf[63] = (DA[63] === 1'bZ) ? 1'bX : ( DA[63]);
assign  DA_buf[64] = (DA[64] === 1'bZ) ? 1'bX : ( DA[64]);
assign  DA_buf[65] = (DA[65] === 1'bZ) ? 1'bX : ( DA[65]);
assign  DA_buf[66] = (DA[66] === 1'bZ) ? 1'bX : ( DA[66]);
assign  DA_buf[67] = (DA[67] === 1'bZ) ? 1'bX : ( DA[67]);
assign  DA_buf[68] = (DA[68] === 1'bZ) ? 1'bX : ( DA[68]);
assign  DA_buf[69] = (DA[69] === 1'bZ) ? 1'bX : ( DA[69]);
assign  DA_buf[70] = (DA[70] === 1'bZ) ? 1'bX : ( DA[70]);
assign  DA_buf[71] = (DA[71] === 1'bZ) ? 1'bX : ( DA[71]);
assign  DA_buf[72] = (DA[72] === 1'bZ) ? 1'bX : ( DA[72]);
assign  DA_buf[73] = (DA[73] === 1'bZ) ? 1'bX : ( DA[73]);
assign  DA_buf[74] = (DA[74] === 1'bZ) ? 1'bX : ( DA[74]);
wire WEA_buf;
assign  WEA_buf = (WEA === 1'bZ) ? 1'bX : ( WEA);
wire MEA_buf;
assign  MEA_buf = (MEA === 1'bZ) ? 1'bX : ( MEA);
wire CLKA_buf;
assign  CLKA_buf = (CLKA === 1'bZ) ? 1'bX : ( CLKA);
wire RSCIN_buf;
assign  RSCIN_buf = (RSCIN === 1'bZ) ? 1'bX : ( RSCIN);
wire RSCEN_buf;
assign  RSCEN_buf = (RSCEN === 1'bZ) ? 1'bX : ( RSCEN);
wire RSCRST_buf;
assign  RSCRST_buf = (RSCRST === 1'bZ) ? 1'bX : ( RSCRST);
wire RSCLK_buf;
assign  RSCLK_buf = (RSCLK === 1'bZ) ? 1'bX : ( RSCLK);
wire FISO_buf;
assign  FISO_buf = (FISO === 1'bZ) ? 1'bX : ( FISO);
wire TEST1A_buf;
assign  TEST1A_buf = (TEST1A === 1'bZ) ? 1'bX : ( TEST1A);
wire TEST_RNMA_buf;
assign  TEST_RNMA_buf = (TEST_RNMA === 1'bZ) ? 1'bX : ( TEST_RNMA);
wire RMEA_buf;
assign  RMEA_buf = (RMEA === 1'bZ) ? 1'bX : ( RMEA);
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
assign  RMA_buf[0] = (RMA[0] === 1'bZ) ? 1'bX : ( RMA[0]);
assign  RMA_buf[1] = (RMA[1] === 1'bZ) ? 1'bX : ( RMA[1]);
assign  RMA_buf[2] = (RMA[2] === 1'bZ) ? 1'bX : ( RMA[2]);
assign  RMA_buf[3] = (RMA[3] === 1'bZ) ? 1'bX : ( RMA[3]);
wire LS_buf;
assign  LS_buf = (LS === 1'bZ) ? 1'bX : ( LS);
wire BC1_buf;
assign  BC1_buf = (BC1 === 1'bZ) ? 1'bX : ( BC1);
wire BC2_buf;
assign  BC2_buf = (BC2 === 1'bZ) ? 1'bX : ( BC2);
wire [9:0] ADRB_buf;
assign  ADRB_buf[0] = (ADRB[0] === 1'bZ) ? 1'bX : ( ADRB[0]);
assign  ADRB_buf[1] = (ADRB[1] === 1'bZ) ? 1'bX : ( ADRB[1]);
assign  ADRB_buf[2] = (ADRB[2] === 1'bZ) ? 1'bX : ( ADRB[2]);
assign  ADRB_buf[3] = (ADRB[3] === 1'bZ) ? 1'bX : ( ADRB[3]);
assign  ADRB_buf[4] = (ADRB[4] === 1'bZ) ? 1'bX : ( ADRB[4]);
assign  ADRB_buf[5] = (ADRB[5] === 1'bZ) ? 1'bX : ( ADRB[5]);
assign  ADRB_buf[6] = (ADRB[6] === 1'bZ) ? 1'bX : ( ADRB[6]);
assign  ADRB_buf[7] = (ADRB[7] === 1'bZ) ? 1'bX : ( ADRB[7]);
assign  ADRB_buf[8] = (ADRB[8] === 1'bZ) ? 1'bX : ( ADRB[8]);
assign  ADRB_buf[9] = (ADRB[9] === 1'bZ) ? 1'bX : ( ADRB[9]);
wire [74:0] DB_buf;
assign  DB_buf[0] = (DB[0] === 1'bZ) ? 1'bX : ( DB[0]);
assign  DB_buf[1] = (DB[1] === 1'bZ) ? 1'bX : ( DB[1]);
assign  DB_buf[2] = (DB[2] === 1'bZ) ? 1'bX : ( DB[2]);
assign  DB_buf[3] = (DB[3] === 1'bZ) ? 1'bX : ( DB[3]);
assign  DB_buf[4] = (DB[4] === 1'bZ) ? 1'bX : ( DB[4]);
assign  DB_buf[5] = (DB[5] === 1'bZ) ? 1'bX : ( DB[5]);
assign  DB_buf[6] = (DB[6] === 1'bZ) ? 1'bX : ( DB[6]);
assign  DB_buf[7] = (DB[7] === 1'bZ) ? 1'bX : ( DB[7]);
assign  DB_buf[8] = (DB[8] === 1'bZ) ? 1'bX : ( DB[8]);
assign  DB_buf[9] = (DB[9] === 1'bZ) ? 1'bX : ( DB[9]);
assign  DB_buf[10] = (DB[10] === 1'bZ) ? 1'bX : ( DB[10]);
assign  DB_buf[11] = (DB[11] === 1'bZ) ? 1'bX : ( DB[11]);
assign  DB_buf[12] = (DB[12] === 1'bZ) ? 1'bX : ( DB[12]);
assign  DB_buf[13] = (DB[13] === 1'bZ) ? 1'bX : ( DB[13]);
assign  DB_buf[14] = (DB[14] === 1'bZ) ? 1'bX : ( DB[14]);
assign  DB_buf[15] = (DB[15] === 1'bZ) ? 1'bX : ( DB[15]);
assign  DB_buf[16] = (DB[16] === 1'bZ) ? 1'bX : ( DB[16]);
assign  DB_buf[17] = (DB[17] === 1'bZ) ? 1'bX : ( DB[17]);
assign  DB_buf[18] = (DB[18] === 1'bZ) ? 1'bX : ( DB[18]);
assign  DB_buf[19] = (DB[19] === 1'bZ) ? 1'bX : ( DB[19]);
assign  DB_buf[20] = (DB[20] === 1'bZ) ? 1'bX : ( DB[20]);
assign  DB_buf[21] = (DB[21] === 1'bZ) ? 1'bX : ( DB[21]);
assign  DB_buf[22] = (DB[22] === 1'bZ) ? 1'bX : ( DB[22]);
assign  DB_buf[23] = (DB[23] === 1'bZ) ? 1'bX : ( DB[23]);
assign  DB_buf[24] = (DB[24] === 1'bZ) ? 1'bX : ( DB[24]);
assign  DB_buf[25] = (DB[25] === 1'bZ) ? 1'bX : ( DB[25]);
assign  DB_buf[26] = (DB[26] === 1'bZ) ? 1'bX : ( DB[26]);
assign  DB_buf[27] = (DB[27] === 1'bZ) ? 1'bX : ( DB[27]);
assign  DB_buf[28] = (DB[28] === 1'bZ) ? 1'bX : ( DB[28]);
assign  DB_buf[29] = (DB[29] === 1'bZ) ? 1'bX : ( DB[29]);
assign  DB_buf[30] = (DB[30] === 1'bZ) ? 1'bX : ( DB[30]);
assign  DB_buf[31] = (DB[31] === 1'bZ) ? 1'bX : ( DB[31]);
assign  DB_buf[32] = (DB[32] === 1'bZ) ? 1'bX : ( DB[32]);
assign  DB_buf[33] = (DB[33] === 1'bZ) ? 1'bX : ( DB[33]);
assign  DB_buf[34] = (DB[34] === 1'bZ) ? 1'bX : ( DB[34]);
assign  DB_buf[35] = (DB[35] === 1'bZ) ? 1'bX : ( DB[35]);
assign  DB_buf[36] = (DB[36] === 1'bZ) ? 1'bX : ( DB[36]);
assign  DB_buf[37] = (DB[37] === 1'bZ) ? 1'bX : ( DB[37]);
assign  DB_buf[38] = (DB[38] === 1'bZ) ? 1'bX : ( DB[38]);
assign  DB_buf[39] = (DB[39] === 1'bZ) ? 1'bX : ( DB[39]);
assign  DB_buf[40] = (DB[40] === 1'bZ) ? 1'bX : ( DB[40]);
assign  DB_buf[41] = (DB[41] === 1'bZ) ? 1'bX : ( DB[41]);
assign  DB_buf[42] = (DB[42] === 1'bZ) ? 1'bX : ( DB[42]);
assign  DB_buf[43] = (DB[43] === 1'bZ) ? 1'bX : ( DB[43]);
assign  DB_buf[44] = (DB[44] === 1'bZ) ? 1'bX : ( DB[44]);
assign  DB_buf[45] = (DB[45] === 1'bZ) ? 1'bX : ( DB[45]);
assign  DB_buf[46] = (DB[46] === 1'bZ) ? 1'bX : ( DB[46]);
assign  DB_buf[47] = (DB[47] === 1'bZ) ? 1'bX : ( DB[47]);
assign  DB_buf[48] = (DB[48] === 1'bZ) ? 1'bX : ( DB[48]);
assign  DB_buf[49] = (DB[49] === 1'bZ) ? 1'bX : ( DB[49]);
assign  DB_buf[50] = (DB[50] === 1'bZ) ? 1'bX : ( DB[50]);
assign  DB_buf[51] = (DB[51] === 1'bZ) ? 1'bX : ( DB[51]);
assign  DB_buf[52] = (DB[52] === 1'bZ) ? 1'bX : ( DB[52]);
assign  DB_buf[53] = (DB[53] === 1'bZ) ? 1'bX : ( DB[53]);
assign  DB_buf[54] = (DB[54] === 1'bZ) ? 1'bX : ( DB[54]);
assign  DB_buf[55] = (DB[55] === 1'bZ) ? 1'bX : ( DB[55]);
assign  DB_buf[56] = (DB[56] === 1'bZ) ? 1'bX : ( DB[56]);
assign  DB_buf[57] = (DB[57] === 1'bZ) ? 1'bX : ( DB[57]);
assign  DB_buf[58] = (DB[58] === 1'bZ) ? 1'bX : ( DB[58]);
assign  DB_buf[59] = (DB[59] === 1'bZ) ? 1'bX : ( DB[59]);
assign  DB_buf[60] = (DB[60] === 1'bZ) ? 1'bX : ( DB[60]);
assign  DB_buf[61] = (DB[61] === 1'bZ) ? 1'bX : ( DB[61]);
assign  DB_buf[62] = (DB[62] === 1'bZ) ? 1'bX : ( DB[62]);
assign  DB_buf[63] = (DB[63] === 1'bZ) ? 1'bX : ( DB[63]);
assign  DB_buf[64] = (DB[64] === 1'bZ) ? 1'bX : ( DB[64]);
assign  DB_buf[65] = (DB[65] === 1'bZ) ? 1'bX : ( DB[65]);
assign  DB_buf[66] = (DB[66] === 1'bZ) ? 1'bX : ( DB[66]);
assign  DB_buf[67] = (DB[67] === 1'bZ) ? 1'bX : ( DB[67]);
assign  DB_buf[68] = (DB[68] === 1'bZ) ? 1'bX : ( DB[68]);
assign  DB_buf[69] = (DB[69] === 1'bZ) ? 1'bX : ( DB[69]);
assign  DB_buf[70] = (DB[70] === 1'bZ) ? 1'bX : ( DB[70]);
assign  DB_buf[71] = (DB[71] === 1'bZ) ? 1'bX : ( DB[71]);
assign  DB_buf[72] = (DB[72] === 1'bZ) ? 1'bX : ( DB[72]);
assign  DB_buf[73] = (DB[73] === 1'bZ) ? 1'bX : ( DB[73]);
assign  DB_buf[74] = (DB[74] === 1'bZ) ? 1'bX : ( DB[74]);
wire WEB_buf;
assign  WEB_buf = (WEB === 1'bZ) ? 1'bX : ( WEB);
wire MEB_buf;
assign  MEB_buf = (MEB === 1'bZ) ? 1'bX : ( MEB);
wire CLKB_buf;
assign  CLKB_buf = (CLKB === 1'bZ) ? 1'bX : ( CLKB);
wire TEST1B_buf;
assign  TEST1B_buf = (TEST1B === 1'bZ) ? 1'bX : ( TEST1B);
wire TEST_RNMB_buf;
assign  TEST_RNMB_buf = (TEST_RNMB === 1'bZ) ? 1'bX : ( TEST_RNMB);
wire RMEB_buf;
assign  RMEB_buf = (RMEB === 1'bZ) ? 1'bX : ( RMEB);
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
assign  RMB_buf[0] = (RMB[0] === 1'bZ) ? 1'bX : ( RMB[0]);
assign  RMB_buf[1] = (RMB[1] === 1'bZ) ? 1'bX : ( RMB[1]);
assign  RMB_buf[2] = (RMB[2] === 1'bZ) ? 1'bX : ( RMB[2]);
assign  RMB_buf[3] = (RMB[3] === 1'bZ) ? 1'bX : ( RMB[3]);
`else
wire [74:0] QA_buf;
buf (QA[0], QA_buf[0]);
buf (QA_final[0],QA[0]);
buf (QA[1], QA_buf[1]);
buf (QA_final[1],QA[1]);
buf (QA[2], QA_buf[2]);
buf (QA_final[2],QA[2]);
buf (QA[3], QA_buf[3]);
buf (QA_final[3],QA[3]);
buf (QA[4], QA_buf[4]);
buf (QA_final[4],QA[4]);
buf (QA[5], QA_buf[5]);
buf (QA_final[5],QA[5]);
buf (QA[6], QA_buf[6]);
buf (QA_final[6],QA[6]);
buf (QA[7], QA_buf[7]);
buf (QA_final[7],QA[7]);
buf (QA[8], QA_buf[8]);
buf (QA_final[8],QA[8]);
buf (QA[9], QA_buf[9]);
buf (QA_final[9],QA[9]);
buf (QA[10], QA_buf[10]);
buf (QA_final[10],QA[10]);
buf (QA[11], QA_buf[11]);
buf (QA_final[11],QA[11]);
buf (QA[12], QA_buf[12]);
buf (QA_final[12],QA[12]);
buf (QA[13], QA_buf[13]);
buf (QA_final[13],QA[13]);
buf (QA[14], QA_buf[14]);
buf (QA_final[14],QA[14]);
buf (QA[15], QA_buf[15]);
buf (QA_final[15],QA[15]);
buf (QA[16], QA_buf[16]);
buf (QA_final[16],QA[16]);
buf (QA[17], QA_buf[17]);
buf (QA_final[17],QA[17]);
buf (QA[18], QA_buf[18]);
buf (QA_final[18],QA[18]);
buf (QA[19], QA_buf[19]);
buf (QA_final[19],QA[19]);
buf (QA[20], QA_buf[20]);
buf (QA_final[20],QA[20]);
buf (QA[21], QA_buf[21]);
buf (QA_final[21],QA[21]);
buf (QA[22], QA_buf[22]);
buf (QA_final[22],QA[22]);
buf (QA[23], QA_buf[23]);
buf (QA_final[23],QA[23]);
buf (QA[24], QA_buf[24]);
buf (QA_final[24],QA[24]);
buf (QA[25], QA_buf[25]);
buf (QA_final[25],QA[25]);
buf (QA[26], QA_buf[26]);
buf (QA_final[26],QA[26]);
buf (QA[27], QA_buf[27]);
buf (QA_final[27],QA[27]);
buf (QA[28], QA_buf[28]);
buf (QA_final[28],QA[28]);
buf (QA[29], QA_buf[29]);
buf (QA_final[29],QA[29]);
buf (QA[30], QA_buf[30]);
buf (QA_final[30],QA[30]);
buf (QA[31], QA_buf[31]);
buf (QA_final[31],QA[31]);
buf (QA[32], QA_buf[32]);
buf (QA_final[32],QA[32]);
buf (QA[33], QA_buf[33]);
buf (QA_final[33],QA[33]);
buf (QA[34], QA_buf[34]);
buf (QA_final[34],QA[34]);
buf (QA[35], QA_buf[35]);
buf (QA_final[35],QA[35]);
buf (QA[36], QA_buf[36]);
buf (QA_final[36],QA[36]);
buf (QA[37], QA_buf[37]);
buf (QA_final[37],QA[37]);
buf (QA[38], QA_buf[38]);
buf (QA_final[38],QA[38]);
buf (QA[39], QA_buf[39]);
buf (QA_final[39],QA[39]);
buf (QA[40], QA_buf[40]);
buf (QA_final[40],QA[40]);
buf (QA[41], QA_buf[41]);
buf (QA_final[41],QA[41]);
buf (QA[42], QA_buf[42]);
buf (QA_final[42],QA[42]);
buf (QA[43], QA_buf[43]);
buf (QA_final[43],QA[43]);
buf (QA[44], QA_buf[44]);
buf (QA_final[44],QA[44]);
buf (QA[45], QA_buf[45]);
buf (QA_final[45],QA[45]);
buf (QA[46], QA_buf[46]);
buf (QA_final[46],QA[46]);
buf (QA[47], QA_buf[47]);
buf (QA_final[47],QA[47]);
buf (QA[48], QA_buf[48]);
buf (QA_final[48],QA[48]);
buf (QA[49], QA_buf[49]);
buf (QA_final[49],QA[49]);
buf (QA[50], QA_buf[50]);
buf (QA_final[50],QA[50]);
buf (QA[51], QA_buf[51]);
buf (QA_final[51],QA[51]);
buf (QA[52], QA_buf[52]);
buf (QA_final[52],QA[52]);
buf (QA[53], QA_buf[53]);
buf (QA_final[53],QA[53]);
buf (QA[54], QA_buf[54]);
buf (QA_final[54],QA[54]);
buf (QA[55], QA_buf[55]);
buf (QA_final[55],QA[55]);
buf (QA[56], QA_buf[56]);
buf (QA_final[56],QA[56]);
buf (QA[57], QA_buf[57]);
buf (QA_final[57],QA[57]);
buf (QA[58], QA_buf[58]);
buf (QA_final[58],QA[58]);
buf (QA[59], QA_buf[59]);
buf (QA_final[59],QA[59]);
buf (QA[60], QA_buf[60]);
buf (QA_final[60],QA[60]);
buf (QA[61], QA_buf[61]);
buf (QA_final[61],QA[61]);
buf (QA[62], QA_buf[62]);
buf (QA_final[62],QA[62]);
buf (QA[63], QA_buf[63]);
buf (QA_final[63],QA[63]);
buf (QA[64], QA_buf[64]);
buf (QA_final[64],QA[64]);
buf (QA[65], QA_buf[65]);
buf (QA_final[65],QA[65]);
buf (QA[66], QA_buf[66]);
buf (QA_final[66],QA[66]);
buf (QA[67], QA_buf[67]);
buf (QA_final[67],QA[67]);
buf (QA[68], QA_buf[68]);
buf (QA_final[68],QA[68]);
buf (QA[69], QA_buf[69]);
buf (QA_final[69],QA[69]);
buf (QA[70], QA_buf[70]);
buf (QA_final[70],QA[70]);
buf (QA[71], QA_buf[71]);
buf (QA_final[71],QA[71]);
buf (QA[72], QA_buf[72]);
buf (QA_final[72],QA[72]);
buf (QA[73], QA_buf[73]);
buf (QA_final[73],QA[73]);
buf (QA[74], QA_buf[74]);
buf (QA_final[74],QA[74]);
wire RSCOUT_buf;
buf (RSCOUT, RSCOUT_buf);
wire [74:0] QB_buf;
buf (QB[0], QB_buf[0]);
buf (QB_final[0],QB[0]);
buf (QB[1], QB_buf[1]);
buf (QB_final[1],QB[1]);
buf (QB[2], QB_buf[2]);
buf (QB_final[2],QB[2]);
buf (QB[3], QB_buf[3]);
buf (QB_final[3],QB[3]);
buf (QB[4], QB_buf[4]);
buf (QB_final[4],QB[4]);
buf (QB[5], QB_buf[5]);
buf (QB_final[5],QB[5]);
buf (QB[6], QB_buf[6]);
buf (QB_final[6],QB[6]);
buf (QB[7], QB_buf[7]);
buf (QB_final[7],QB[7]);
buf (QB[8], QB_buf[8]);
buf (QB_final[8],QB[8]);
buf (QB[9], QB_buf[9]);
buf (QB_final[9],QB[9]);
buf (QB[10], QB_buf[10]);
buf (QB_final[10],QB[10]);
buf (QB[11], QB_buf[11]);
buf (QB_final[11],QB[11]);
buf (QB[12], QB_buf[12]);
buf (QB_final[12],QB[12]);
buf (QB[13], QB_buf[13]);
buf (QB_final[13],QB[13]);
buf (QB[14], QB_buf[14]);
buf (QB_final[14],QB[14]);
buf (QB[15], QB_buf[15]);
buf (QB_final[15],QB[15]);
buf (QB[16], QB_buf[16]);
buf (QB_final[16],QB[16]);
buf (QB[17], QB_buf[17]);
buf (QB_final[17],QB[17]);
buf (QB[18], QB_buf[18]);
buf (QB_final[18],QB[18]);
buf (QB[19], QB_buf[19]);
buf (QB_final[19],QB[19]);
buf (QB[20], QB_buf[20]);
buf (QB_final[20],QB[20]);
buf (QB[21], QB_buf[21]);
buf (QB_final[21],QB[21]);
buf (QB[22], QB_buf[22]);
buf (QB_final[22],QB[22]);
buf (QB[23], QB_buf[23]);
buf (QB_final[23],QB[23]);
buf (QB[24], QB_buf[24]);
buf (QB_final[24],QB[24]);
buf (QB[25], QB_buf[25]);
buf (QB_final[25],QB[25]);
buf (QB[26], QB_buf[26]);
buf (QB_final[26],QB[26]);
buf (QB[27], QB_buf[27]);
buf (QB_final[27],QB[27]);
buf (QB[28], QB_buf[28]);
buf (QB_final[28],QB[28]);
buf (QB[29], QB_buf[29]);
buf (QB_final[29],QB[29]);
buf (QB[30], QB_buf[30]);
buf (QB_final[30],QB[30]);
buf (QB[31], QB_buf[31]);
buf (QB_final[31],QB[31]);
buf (QB[32], QB_buf[32]);
buf (QB_final[32],QB[32]);
buf (QB[33], QB_buf[33]);
buf (QB_final[33],QB[33]);
buf (QB[34], QB_buf[34]);
buf (QB_final[34],QB[34]);
buf (QB[35], QB_buf[35]);
buf (QB_final[35],QB[35]);
buf (QB[36], QB_buf[36]);
buf (QB_final[36],QB[36]);
buf (QB[37], QB_buf[37]);
buf (QB_final[37],QB[37]);
buf (QB[38], QB_buf[38]);
buf (QB_final[38],QB[38]);
buf (QB[39], QB_buf[39]);
buf (QB_final[39],QB[39]);
buf (QB[40], QB_buf[40]);
buf (QB_final[40],QB[40]);
buf (QB[41], QB_buf[41]);
buf (QB_final[41],QB[41]);
buf (QB[42], QB_buf[42]);
buf (QB_final[42],QB[42]);
buf (QB[43], QB_buf[43]);
buf (QB_final[43],QB[43]);
buf (QB[44], QB_buf[44]);
buf (QB_final[44],QB[44]);
buf (QB[45], QB_buf[45]);
buf (QB_final[45],QB[45]);
buf (QB[46], QB_buf[46]);
buf (QB_final[46],QB[46]);
buf (QB[47], QB_buf[47]);
buf (QB_final[47],QB[47]);
buf (QB[48], QB_buf[48]);
buf (QB_final[48],QB[48]);
buf (QB[49], QB_buf[49]);
buf (QB_final[49],QB[49]);
buf (QB[50], QB_buf[50]);
buf (QB_final[50],QB[50]);
buf (QB[51], QB_buf[51]);
buf (QB_final[51],QB[51]);
buf (QB[52], QB_buf[52]);
buf (QB_final[52],QB[52]);
buf (QB[53], QB_buf[53]);
buf (QB_final[53],QB[53]);
buf (QB[54], QB_buf[54]);
buf (QB_final[54],QB[54]);
buf (QB[55], QB_buf[55]);
buf (QB_final[55],QB[55]);
buf (QB[56], QB_buf[56]);
buf (QB_final[56],QB[56]);
buf (QB[57], QB_buf[57]);
buf (QB_final[57],QB[57]);
buf (QB[58], QB_buf[58]);
buf (QB_final[58],QB[58]);
buf (QB[59], QB_buf[59]);
buf (QB_final[59],QB[59]);
buf (QB[60], QB_buf[60]);
buf (QB_final[60],QB[60]);
buf (QB[61], QB_buf[61]);
buf (QB_final[61],QB[61]);
buf (QB[62], QB_buf[62]);
buf (QB_final[62],QB[62]);
buf (QB[63], QB_buf[63]);
buf (QB_final[63],QB[63]);
buf (QB[64], QB_buf[64]);
buf (QB_final[64],QB[64]);
buf (QB[65], QB_buf[65]);
buf (QB_final[65],QB[65]);
buf (QB[66], QB_buf[66]);
buf (QB_final[66],QB[66]);
buf (QB[67], QB_buf[67]);
buf (QB_final[67],QB[67]);
buf (QB[68], QB_buf[68]);
buf (QB_final[68],QB[68]);
buf (QB[69], QB_buf[69]);
buf (QB_final[69],QB[69]);
buf (QB[70], QB_buf[70]);
buf (QB_final[70],QB[70]);
buf (QB[71], QB_buf[71]);
buf (QB_final[71],QB[71]);
buf (QB[72], QB_buf[72]);
buf (QB_final[72],QB[72]);
buf (QB[73], QB_buf[73]);
buf (QB_final[73],QB[73]);
buf (QB[74], QB_buf[74]);
buf (QB_final[74],QB[74]);
wire [9:0] ADRA_buf;
wire [9:0] delayed_ADRA;
buf (ADRA_buf[0], delayed_ADRA[0]);
buf (ADRA_buf[1], delayed_ADRA[1]);
buf (ADRA_buf[2], delayed_ADRA[2]);
buf (ADRA_buf[3], delayed_ADRA[3]);
buf (ADRA_buf[4], delayed_ADRA[4]);
buf (ADRA_buf[5], delayed_ADRA[5]);
buf (ADRA_buf[6], delayed_ADRA[6]);
buf (ADRA_buf[7], delayed_ADRA[7]);
buf (ADRA_buf[8], delayed_ADRA[8]);
buf (ADRA_buf[9], delayed_ADRA[9]);
wire [74:0] DA_buf;
wire [74:0] delayed_DA;
buf (DA_buf[0], delayed_DA[0]);
buf (DA_buf[1], delayed_DA[1]);
buf (DA_buf[2], delayed_DA[2]);
buf (DA_buf[3], delayed_DA[3]);
buf (DA_buf[4], delayed_DA[4]);
buf (DA_buf[5], delayed_DA[5]);
buf (DA_buf[6], delayed_DA[6]);
buf (DA_buf[7], delayed_DA[7]);
buf (DA_buf[8], delayed_DA[8]);
buf (DA_buf[9], delayed_DA[9]);
buf (DA_buf[10], delayed_DA[10]);
buf (DA_buf[11], delayed_DA[11]);
buf (DA_buf[12], delayed_DA[12]);
buf (DA_buf[13], delayed_DA[13]);
buf (DA_buf[14], delayed_DA[14]);
buf (DA_buf[15], delayed_DA[15]);
buf (DA_buf[16], delayed_DA[16]);
buf (DA_buf[17], delayed_DA[17]);
buf (DA_buf[18], delayed_DA[18]);
buf (DA_buf[19], delayed_DA[19]);
buf (DA_buf[20], delayed_DA[20]);
buf (DA_buf[21], delayed_DA[21]);
buf (DA_buf[22], delayed_DA[22]);
buf (DA_buf[23], delayed_DA[23]);
buf (DA_buf[24], delayed_DA[24]);
buf (DA_buf[25], delayed_DA[25]);
buf (DA_buf[26], delayed_DA[26]);
buf (DA_buf[27], delayed_DA[27]);
buf (DA_buf[28], delayed_DA[28]);
buf (DA_buf[29], delayed_DA[29]);
buf (DA_buf[30], delayed_DA[30]);
buf (DA_buf[31], delayed_DA[31]);
buf (DA_buf[32], delayed_DA[32]);
buf (DA_buf[33], delayed_DA[33]);
buf (DA_buf[34], delayed_DA[34]);
buf (DA_buf[35], delayed_DA[35]);
buf (DA_buf[36], delayed_DA[36]);
buf (DA_buf[37], delayed_DA[37]);
buf (DA_buf[38], delayed_DA[38]);
buf (DA_buf[39], delayed_DA[39]);
buf (DA_buf[40], delayed_DA[40]);
buf (DA_buf[41], delayed_DA[41]);
buf (DA_buf[42], delayed_DA[42]);
buf (DA_buf[43], delayed_DA[43]);
buf (DA_buf[44], delayed_DA[44]);
buf (DA_buf[45], delayed_DA[45]);
buf (DA_buf[46], delayed_DA[46]);
buf (DA_buf[47], delayed_DA[47]);
buf (DA_buf[48], delayed_DA[48]);
buf (DA_buf[49], delayed_DA[49]);
buf (DA_buf[50], delayed_DA[50]);
buf (DA_buf[51], delayed_DA[51]);
buf (DA_buf[52], delayed_DA[52]);
buf (DA_buf[53], delayed_DA[53]);
buf (DA_buf[54], delayed_DA[54]);
buf (DA_buf[55], delayed_DA[55]);
buf (DA_buf[56], delayed_DA[56]);
buf (DA_buf[57], delayed_DA[57]);
buf (DA_buf[58], delayed_DA[58]);
buf (DA_buf[59], delayed_DA[59]);
buf (DA_buf[60], delayed_DA[60]);
buf (DA_buf[61], delayed_DA[61]);
buf (DA_buf[62], delayed_DA[62]);
buf (DA_buf[63], delayed_DA[63]);
buf (DA_buf[64], delayed_DA[64]);
buf (DA_buf[65], delayed_DA[65]);
buf (DA_buf[66], delayed_DA[66]);
buf (DA_buf[67], delayed_DA[67]);
buf (DA_buf[68], delayed_DA[68]);
buf (DA_buf[69], delayed_DA[69]);
buf (DA_buf[70], delayed_DA[70]);
buf (DA_buf[71], delayed_DA[71]);
buf (DA_buf[72], delayed_DA[72]);
buf (DA_buf[73], delayed_DA[73]);
buf (DA_buf[74], delayed_DA[74]);
wire delayed_WEA;
buf (WEA_buf, delayed_WEA);
wire delayed_MEA;
buf (MEA_buf, delayed_MEA);
wire delayed_CLKA;
buf (CLKA_buf, delayed_CLKA);
wire delayed_RSCIN;
buf (RSCIN_buf, delayed_RSCIN);
wire delayed_RSCEN;
buf (RSCEN_buf, delayed_RSCEN);
wire delayed_RSCRST;
buf (RSCRST_buf, delayed_RSCRST);
wire delayed_RSCLK;
buf (RSCLK_buf, delayed_RSCLK);
wire delayed_FISO;
buf (FISO_buf, delayed_FISO);
wire delayed_TEST1A;
buf (TEST1A_buf, delayed_TEST1A);
wire delayed_TEST_RNMA;
buf (TEST_RNMA_buf, delayed_TEST_RNMA);
wire delayed_RMEA;
buf (RMEA_buf, delayed_RMEA);
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
wire [3:0] delayed_RMA;
buf (RMA_buf[0], delayed_RMA[0]);
buf (RMA_buf[1], delayed_RMA[1]);
buf (RMA_buf[2], delayed_RMA[2]);
buf (RMA_buf[3], delayed_RMA[3]);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire delayed_BC1;
buf (BC1_buf, delayed_BC1);
wire delayed_BC2;
buf (BC2_buf, delayed_BC2);
wire [9:0] ADRB_buf;
wire [9:0] delayed_ADRB;
buf (ADRB_buf[0], delayed_ADRB[0]);
buf (ADRB_buf[1], delayed_ADRB[1]);
buf (ADRB_buf[2], delayed_ADRB[2]);
buf (ADRB_buf[3], delayed_ADRB[3]);
buf (ADRB_buf[4], delayed_ADRB[4]);
buf (ADRB_buf[5], delayed_ADRB[5]);
buf (ADRB_buf[6], delayed_ADRB[6]);
buf (ADRB_buf[7], delayed_ADRB[7]);
buf (ADRB_buf[8], delayed_ADRB[8]);
buf (ADRB_buf[9], delayed_ADRB[9]);
wire [74:0] DB_buf;
wire [74:0] delayed_DB;
buf (DB_buf[0], delayed_DB[0]);
buf (DB_buf[1], delayed_DB[1]);
buf (DB_buf[2], delayed_DB[2]);
buf (DB_buf[3], delayed_DB[3]);
buf (DB_buf[4], delayed_DB[4]);
buf (DB_buf[5], delayed_DB[5]);
buf (DB_buf[6], delayed_DB[6]);
buf (DB_buf[7], delayed_DB[7]);
buf (DB_buf[8], delayed_DB[8]);
buf (DB_buf[9], delayed_DB[9]);
buf (DB_buf[10], delayed_DB[10]);
buf (DB_buf[11], delayed_DB[11]);
buf (DB_buf[12], delayed_DB[12]);
buf (DB_buf[13], delayed_DB[13]);
buf (DB_buf[14], delayed_DB[14]);
buf (DB_buf[15], delayed_DB[15]);
buf (DB_buf[16], delayed_DB[16]);
buf (DB_buf[17], delayed_DB[17]);
buf (DB_buf[18], delayed_DB[18]);
buf (DB_buf[19], delayed_DB[19]);
buf (DB_buf[20], delayed_DB[20]);
buf (DB_buf[21], delayed_DB[21]);
buf (DB_buf[22], delayed_DB[22]);
buf (DB_buf[23], delayed_DB[23]);
buf (DB_buf[24], delayed_DB[24]);
buf (DB_buf[25], delayed_DB[25]);
buf (DB_buf[26], delayed_DB[26]);
buf (DB_buf[27], delayed_DB[27]);
buf (DB_buf[28], delayed_DB[28]);
buf (DB_buf[29], delayed_DB[29]);
buf (DB_buf[30], delayed_DB[30]);
buf (DB_buf[31], delayed_DB[31]);
buf (DB_buf[32], delayed_DB[32]);
buf (DB_buf[33], delayed_DB[33]);
buf (DB_buf[34], delayed_DB[34]);
buf (DB_buf[35], delayed_DB[35]);
buf (DB_buf[36], delayed_DB[36]);
buf (DB_buf[37], delayed_DB[37]);
buf (DB_buf[38], delayed_DB[38]);
buf (DB_buf[39], delayed_DB[39]);
buf (DB_buf[40], delayed_DB[40]);
buf (DB_buf[41], delayed_DB[41]);
buf (DB_buf[42], delayed_DB[42]);
buf (DB_buf[43], delayed_DB[43]);
buf (DB_buf[44], delayed_DB[44]);
buf (DB_buf[45], delayed_DB[45]);
buf (DB_buf[46], delayed_DB[46]);
buf (DB_buf[47], delayed_DB[47]);
buf (DB_buf[48], delayed_DB[48]);
buf (DB_buf[49], delayed_DB[49]);
buf (DB_buf[50], delayed_DB[50]);
buf (DB_buf[51], delayed_DB[51]);
buf (DB_buf[52], delayed_DB[52]);
buf (DB_buf[53], delayed_DB[53]);
buf (DB_buf[54], delayed_DB[54]);
buf (DB_buf[55], delayed_DB[55]);
buf (DB_buf[56], delayed_DB[56]);
buf (DB_buf[57], delayed_DB[57]);
buf (DB_buf[58], delayed_DB[58]);
buf (DB_buf[59], delayed_DB[59]);
buf (DB_buf[60], delayed_DB[60]);
buf (DB_buf[61], delayed_DB[61]);
buf (DB_buf[62], delayed_DB[62]);
buf (DB_buf[63], delayed_DB[63]);
buf (DB_buf[64], delayed_DB[64]);
buf (DB_buf[65], delayed_DB[65]);
buf (DB_buf[66], delayed_DB[66]);
buf (DB_buf[67], delayed_DB[67]);
buf (DB_buf[68], delayed_DB[68]);
buf (DB_buf[69], delayed_DB[69]);
buf (DB_buf[70], delayed_DB[70]);
buf (DB_buf[71], delayed_DB[71]);
buf (DB_buf[72], delayed_DB[72]);
buf (DB_buf[73], delayed_DB[73]);
buf (DB_buf[74], delayed_DB[74]);
wire delayed_WEB;
buf (WEB_buf, delayed_WEB);
wire delayed_MEB;
buf (MEB_buf, delayed_MEB);
wire delayed_CLKB;
buf (CLKB_buf, delayed_CLKB);
wire delayed_TEST1B;
buf (TEST1B_buf, delayed_TEST1B);
wire delayed_TEST_RNMB;
buf (TEST_RNMB_buf, delayed_TEST_RNMB);
wire delayed_RMEB;
buf (RMEB_buf, delayed_RMEB);
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
wire [3:0] delayed_RMB;
buf (RMB_buf[0], delayed_RMB[0]);
buf (RMB_buf[1], delayed_RMB[1]);
buf (RMB_buf[2], delayed_RMB[2]);
buf (RMB_buf[3], delayed_RMB[3]);
 
always @ (QA_final)
begin : blk_dofinal_0  
  if (QA_final !== 75'bx )
  begin
    EVENT_TCQ_A = 1'b0;
  end // if of QA_final != X
end // end of always block blk_dofinal_0
 
always @ (QB_final)
begin : blk_dofinal_1  
  if (QB_final !== 75'bx )
  begin
    EVENT_TCQ_B = 1'b0;
  end // if of QB_final != X
end // end of always block blk_dofinal_1
`endif
// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [9 : 0] address;
input [6:0] bit_pos;
input flt_type;
reg [7:0] X_adr;
reg [1:0] Y_adr;
reg [8:0] col_address;
reg [307:0] memrow;
begin
  if (address < 1024)
  begin
  if (uut.faultinj_en == 0)
  begin
    X_adr = address[9:2];
    Y_adr = address[1:0];
      uut.get_column_position (col_address, Y_adr, bit_pos);
    if (flt_type == 1)
    begin
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa1[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa0[X_adr] = memrow;
    end
    else
    begin
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa0[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa1[X_adr] = memrow;
    end
  end
  end
  else
  begin
    $display("\n%m<<VIRL_MEM_ERR: No fault injection for address out of range.>>(time %0t)", $time);
  end
end
endtask
`endif

reg disp_LS_msgA;
reg disp_LS_msgB;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msgA_old;
reg disp_LS_msgB_old;
initial
begin : reinit_msg_blk
  disp_LS_msgA_old = 1'b1;
  disp_LS_msgB_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    if ($realtime > 0 )
    begin
      if (msg_start_lmt > $realtime)
      begin
        en_msg_cntrl = 1'b0;
        en_msg_cntrl <= #(msg_start_lmt - $realtime) 1'b1;
      end
      if (msg_end_lmt > $realtime)
        en_msg_cntrl <= #(msg_end_lmt - $realtime) 1'b0;
      else
        en_msg_cntrl = 1'b0;
    end
    else
    begin
      mes_all_valid_old = 1'b0;
      en_msg_cntrl = 1'b0;
      en_msg_cntrl <= #msg_start_lmt 1'b1;
      en_msg_cntrl <= #msg_end_lmt 1'b0;
    end
  end
  else
  begin
    en_msg_cntrl = 1'b0;
    if ($realtime == 0)
      mes_all_valid_old = 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @( en_msg_cntrl )
begin
  if (en_msg_cntrl !== 1'b0 )
  begin
    if (!(en_msg_cntrl === 1'bx && mes_all_valid_old === 1'b1))
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msgA_old = disp_LS_msgA;
    assign disp_LS_msgA = 0;
    disp_LS_msgB_old = disp_LS_msgB;
    assign disp_LS_msgB = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msgA;
    disp_LS_msgA = disp_LS_msgA_old;
    deassign disp_LS_msgB;
    disp_LS_msgB = disp_LS_msgB_old;
    `ifdef SNPS_SUPPORT_UPF_SIM
    disp_LS_msgA = 1'b1;
    disp_LS_msgB = 1'b1;
     `endif
  end
end


wire ADRA_valid;
assign ADRA_valid =  (ADRA_buf <= 10'b1111111111 )?1'b1:1'b0;
wire RSCIN_fiso_buf,RSCEN_fiso_buf,RSCRST_fiso_buf,RSCLK_fiso_buf;
reg RSCEN_fiso_pre;

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO_buf or negedge RSCLK_fiso_buf or RSCEN_fiso_buf)
begin : blk_rscenbuf_0
  if (FISO_buf == 1'b1)
    RSCEN_fiso_pre = 1'b0;
  else
  if ( RSCLK_fiso_buf == 1'b0)
    RSCEN_fiso_pre = RSCEN_fiso_buf;
end // end of always block blk_rscenbuf_0
assign RSCIN_fiso_buf  =  (RSCIN_buf && !FISO_buf);
assign RSCEN_fiso_buf  =  (RSCEN_buf && !FISO_buf);
assign RSCRST_fiso_buf =  (RSCRST_buf && !FISO_buf);
assign RSCLK_fiso_buf =  (RSCLK_buf && !FISO_buf);
wire ADRB_valid;
assign ADRB_valid =  (ADRB_buf <= 10'b1111111111 )?1'b1:1'b0;

real t0a_pfirst, t1a_pfirst, t2a_pnow, t2a_nnow, t3a_me;
real t0b_pfirst, t1b_pfirst, t2b_pnow, t2b_nnow, t3b_me;
initial
begin
  t0a_pfirst = 0.0;
  t1a_pfirst = 0.0;
  t2a_pnow = 0.0;
  t2a_nnow = 0.0;
  t3a_me = 0.0;
  t0b_pfirst = 0.0;
  t1b_pfirst = 0.0;
  t2b_pnow = 0.0;
  t2b_nnow = 0.0;
  t3b_me = 0.0;
end

always @(posedge CLKA_buf)
begin
  t0a_pfirst = t1a_pfirst;
  t1a_pfirst = t2a_pnow;
  t2a_pnow = $realtime;
  if ((t1a_pfirst < t3a_me) && (t3a_me < t2a_pnow))
  begin   
    uut.diff_me_tcha = 1'b1;
  end
  if ((t0a_pfirst < t3a_me) && (t3a_me < t2a_pnow))
  begin   
    uut.diff_me_tcca = 1'b1;
  end
    @(negedge CLKA_buf)
    t2a_nnow = $realtime;
    #0.001;
    uut.diff_me_tcha = 1'b0;
    uut.diff_me_tcca = 1'b0;
end

always @(MEA_buf)
begin
  t3a_me = $realtime;
  if ((t2a_pnow < t3a_me) && (t2a_nnow < t3a_me))
  begin   
    uut.diff_me_tcha = 1'b1;
  end
end
always @(posedge CLKB_buf)
begin
  t0b_pfirst = t1b_pfirst;
  t1b_pfirst = t2b_pnow;
  t2b_pnow = $realtime;
  if ((t1b_pfirst < t3b_me) && (t3b_me < t2b_pnow))
  begin   
    uut.diff_me_tchb = 1'b1;
  end
  if ((t0b_pfirst < t3b_me) && (t3b_me < t2b_pnow))
  begin   
    uut.diff_me_tccb = 1'b1;
  end
    @(negedge CLKB_buf)
    t2b_nnow = $realtime;
    #0.001;
    uut.diff_me_tchb = 1'b0;
    uut.diff_me_tccb = 1'b0;
end

always @(MEB_buf)
begin
  t3b_me = $realtime;
  if ((t2b_pnow < t3b_me) && (t2b_nnow < t3b_me))
  begin   
    uut.diff_me_tchb = 1'b1;
  end
end
// Setup/hold conditions for synchronous signals
reg  MEA_pre,WEA_pre;
reg  [9:0] ADRA_pre;
reg  [74:0] DA_pre;
reg flag_ADRA_x;

always @(MEA_buf or negedge CLKA_buf) 
begin : blk_mebuf_0
  if ( CLKA_buf == 1'b0)
  begin
    MEA_pre = MEA_buf;
  end // if of CLKA_buf = 0
end // end of always block blk_mebuf_0

always @(WEA_buf or negedge CLKA_buf) 
begin : blk_webuf_0
  if ( CLKA_buf == 1'b0)
  begin
    WEA_pre = WEA_buf;
  end // if of CLKA_buf = 0
end // end of always block blk_webuf_0

always @(ADRA_buf or negedge CLKA_buf) 
begin : blk_addrbuf_0
  if ( CLKA_buf == 1'b0)
  begin
    ADRA_pre = ADRA_buf;
  end // if of CLKA_buf = 0
  if ( (^ADRA_buf) === 1'bx)
  begin
    flag_ADRA_x = 1'b1;
  end
  else
  begin
    flag_ADRA_x = 1'b0;
  end
end // end of always block blk_addrbuf_0

always @(DA_buf or negedge CLKA_buf) 
begin : blk_dibuf_0
  if ( CLKA_buf == 1'b0)
  begin
    DA_pre = DA_buf;
  end // if of CLKA_buf = 0
end // end of always block blk_dibuf_0

`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRA is : ENADRA
wire ENADRA;
assign ENADRA = ( MEA_pre !== 1'b0  && (LS_buf === 1'b0) ? 1'b1 : 1'b0 );
 
// Setup/hold condition for Memory Enable: MEA is : ENMEA
wire ENMEA;
assign ENMEA = (( (ADRA_valid || flag_ADRA_x)) ? 1'b1 : 1'b0 );

// Setup/hold condition for Write Enable: WEA is : ENWEA
wire ENWEA;
assign ENWEA = (( MEA_pre !== 1'b0   && (LS_buf === 1'b0) ) ?1'b1:1'b0);

// Setup/hold condition for Data In: DA is : ENDA
wire ENDA;
assign ENDA = (( ADRA_valid && MEA_pre !== 1'b0 && WEA_pre !== 1'b0   && (LS_buf === 1'b0) )?1'b1:1'b0) ;
// Setup/hold condition for test1 Vector: TEST1A is : ENTEST1A
wire ENTEST1A;
assign ENTEST1A = ((MEA_pre !== 1'b0 && ADRA_valid  && (LS_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for test_rnm Vector: TEST_RNMA is : ENTEST_RNMA
wire ENTEST_RNMA;
assign ENTEST_RNMA = ((MEA_pre !== 1'b0   && (LS_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for Read Margin Vector: RMA is : ENRMA
wire ENRMA;
assign ENRMA = ((RMEA_buf === 1'b1 && (MEA_pre !== 1'b0 && ADRA_valid  && (LS_buf === 1'b0)))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector Enable: RMEA is : ENRMEA
wire ENRMEA;
assign ENRMEA = ((MEA_pre !== 1'b0 && ADRA_valid  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for BC1 Vector: BC1 is : ENBC1
wire ENBC1;
assign ENBC1 = ((LS_buf !== 1'b0)?1'b1:1'b0);
// Setup/hold condition for BC2 Vector: BC2 is : ENBC2
wire ENBC2;
assign ENBC2 = ((LS_buf !== 1'b0)?1'b1:1'b0);
// Setup/hold condition for Light Sleep: LS is : ENLS_A
wire ENLS_A;
assign ENLS_A = ((MEA_pre !== 1'b0)?1'b1:1'b0);

wire ENCLKA;
assign ENCLKA = (( (TEST1A_buf === 1'b0))?1'b1:1'b0);
wire ENCLKA_test1;
assign ENCLKA_test1 = (( (TEST1A_buf === 1'b1))?1'b1:1'b0);

wire ENCLKA_rmezo,ENCLKA_vdm,ENCLKA_slw,ENCLKA_def,ENCLKA_fst,ENCLKA_fster;
assign ENCLKA_rmezo = ((RMEA_buf !== 1'b1)?1'b1:1'b0) ;

assign ENCLKA_vdm = ((RMEA_buf === 1'b1  && ((RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKA_slw = ((RMEA_buf === 1'b1  && ((RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKA_def = ((RMEA_buf === 1'b1  && ((RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKA_fst = ((RMEA_buf === 1'b1  && ((RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKA_fster = ((RMEA_buf === 1'b1  && ((RMA_buf[2] !== 1'b0) && (RMA_buf[3] !== 1'b1)))?1'b1:1'b0) ;
wire ENRSCIN;
assign ENRSCIN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCEN;
assign ENRSCEN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0)?1'b1:1'b0);
wire ENRSCRST;
assign ENRSCRST = ((FISO_buf === 1'b0)?1'b1:1'b0);
wire ENRSCLK;
assign ENRSCLK = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCRSTRSCLKrec;
assign ENRSCRSTRSCLKrec = ((FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCRSTCLKArec;
assign ENRSCRSTCLKArec = ((FISO_buf === 1'b0 && MEA_pre === 1'b1 )?1'b1:1'b0);
wire ENRSCLKCLKArec;
assign ENRSCLKCLKArec = ((FISO_buf === 1'b0 && MEA_pre === 1'b1 && RSCRST_buf === 1'b0 && RSCEN_buf === 1'b1 )?1'b1:1'b0);
wire ENRSCENCLKArec;
assign ENRSCENCLKArec = ((FISO_buf === 1'b0 && MEA_pre === 1'b1  && RSCRST_buf === 1'b0)?1'b1:1'b0);
`endif // endif of VIRAGE_FAST_VERILOG

reg  MEB_pre,WEB_pre;
reg  [9:0] ADRB_pre;
reg  [74:0] DB_pre;
reg flag_ADRB_x;

always @(MEB_buf or negedge CLKB_buf) 
begin : blk_mebuf_1
  if ( CLKB_buf == 1'b0)
  begin
    MEB_pre = MEB_buf;
  end // if of CLKB_buf = 0
end // end of always block blk_mebuf_1

always @(WEB_buf or negedge CLKB_buf) 
begin : blk_webuf_1
  if ( CLKB_buf == 1'b0)
  begin
    WEB_pre = WEB_buf;
  end // if of CLKB_buf = 0
end // end of always block blk_webuf_1

always @(ADRB_buf or negedge CLKB_buf) 
begin : blk_addrbuf_1
  if ( CLKB_buf == 1'b0)
  begin
    ADRB_pre = ADRB_buf;
  end // if of CLKB_buf = 0
  if ( (^ADRB_buf) === 1'bx)
  begin
    flag_ADRB_x = 1'b1;
  end
  else
  begin
    flag_ADRB_x = 1'b0;
  end
end // end of always block blk_addrbuf_1

always @(DB_buf or negedge CLKB_buf) 
begin : blk_dibuf_1
  if ( CLKB_buf == 1'b0)
  begin
    DB_pre = DB_buf;
  end // if of CLKB_buf = 0
end // end of always block blk_dibuf_1

`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRB is : ENADRB
wire ENADRB;
assign ENADRB = ( MEB_pre !== 1'b0  && (LS_buf === 1'b0) ? 1'b1 : 1'b0 );
 
// Setup/hold condition for Memory Enable: MEB is : ENMEB
wire ENMEB;
assign ENMEB = (( (ADRB_valid || flag_ADRB_x)) ? 1'b1 : 1'b0 );

// Setup/hold condition for Write Enable: WEB is : ENWEB
wire ENWEB;
assign ENWEB = (( MEB_pre !== 1'b0   && (LS_buf === 1'b0) ) ?1'b1:1'b0);

// Setup/hold condition for Data In: DB is : ENDB
wire ENDB;
assign ENDB = (( ADRB_valid && MEB_pre !== 1'b0 && WEB_pre !== 1'b0   && (LS_buf === 1'b0) )?1'b1:1'b0) ;
// Setup/hold condition for test1 Vector: TEST1B is : ENTEST1B
wire ENTEST1B;
assign ENTEST1B = ((MEB_pre !== 1'b0 && ADRB_valid  && (LS_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for test_rnm Vector: TEST_RNMB is : ENTEST_RNMB
wire ENTEST_RNMB;
assign ENTEST_RNMB = ((MEB_pre !== 1'b0   && (LS_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for Read Margin Vector: RMB is : ENRMB
wire ENRMB;
assign ENRMB = ((RMEB_buf === 1'b1 && (MEB_pre !== 1'b0 && ADRB_valid  && (LS_buf === 1'b0)))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector Enable: RMEB is : ENRMEB
wire ENRMEB;
assign ENRMEB = ((MEB_pre !== 1'b0 && ADRB_valid  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for Light Sleep: LS is : ENLS_B
wire ENLS_B;
assign ENLS_B = ((MEB_pre !== 1'b0)?1'b1:1'b0);

wire ENCLKB;
assign ENCLKB = (( (TEST1B_buf === 1'b0))?1'b1:1'b0);
wire ENCLKB_test1;
assign ENCLKB_test1 = (( (TEST1B_buf === 1'b1))?1'b1:1'b0);

wire ENCLKB_rmezo,ENCLKB_vdm,ENCLKB_slw,ENCLKB_def,ENCLKB_fst,ENCLKB_fster;
assign ENCLKB_rmezo = ((RMEB_buf !== 1'b1)?1'b1:1'b0) ;

assign ENCLKB_vdm = ((RMEB_buf === 1'b1  && ((RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKB_slw = ((RMEB_buf === 1'b1  && ((RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKB_def = ((RMEB_buf === 1'b1  && ((RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKB_fst = ((RMEB_buf === 1'b1  && ((RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLKB_fster = ((RMEB_buf === 1'b1  && ((RMB_buf[2] !== 1'b0) && (RMB_buf[3] !== 1'b1)))?1'b1:1'b0) ;
wire ENRSCRSTCLKBrec;
assign ENRSCRSTCLKBrec = ((FISO_buf === 1'b0 && MEB_pre === 1'b1 )?1'b1:1'b0);
wire ENRSCLKCLKBrec;
assign ENRSCLKCLKBrec = ((FISO_buf === 1'b0 && MEB_pre === 1'b1 && RSCRST_buf === 1'b0 && RSCEN_buf === 1'b1 )?1'b1:1'b0);
wire ENRSCENCLKBrec;
assign ENRSCENCLKBrec = ((FISO_buf === 1'b0 && MEB_pre === 1'b1  && RSCRST_buf === 1'b0)?1'b1:1'b0);
`endif // endif of VIRAGE_FAST_VERILOG

reg MEA_buf_L;
reg WEA_buf_L;
`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG
reg MEB_buf_L;
reg WEB_buf_L;
`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG
wire adr_same_a;
wire adr_valid_a;
`ifdef VIRAGE_FAST_VERILOG
`else
wire we_activeA;
wire me_activeA;
wire ENCLKACLKBrec;
wire ENCLKBCLKArec;

assign adr_same_a = (((ADRA_old == ADRB_buf_L) && ADRFLAGA) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || ((ADRA_old^ADRA_old) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0)) ? 1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
`ifdef VIRAGE_FAST_VERILOG
`else
assign we_activeA = ( ( WEA_old === 1'b0 ) && ( WEB_buf_L === 1'b0 ))?1'b0:1'b1;
assign me_activeA = ( ( MEA_old !== 1'b0 ) && ( MEB_buf_L !== 1'b0 )  && (LS_buf === 1'b0))?1'b1:1'b0;
and u_rec_0 ( ENCLKBCLKArec, rise_time_same, adr_same_a, me_activeA, we_activeA);
`endif // endif of VIRAGE_FAST_VERILOG
wire adr_same_b;
wire adr_valid_b;
`ifdef VIRAGE_FAST_VERILOG
`else
wire we_activeB;
wire me_activeB;
assign adr_same_b = (((ADRB_old == ADRA_buf_L) && ADRFLAGB) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || ((ADRB_old^ADRB_old) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0)) ? 1'b1:1'b0;
`endif // endif of VIRAGE_FAST_VERILOG
`ifdef VIRAGE_FAST_VERILOG
`else
assign we_activeB = ( ( WEB_old === 1'b0 ) && ( WEA_buf_L === 1'b0 ))?1'b0:1'b1;
assign me_activeB = ( ( MEB_old !== 1'b0 ) && ( MEA_buf_L !== 1'b0 )  && (LS_buf === 1'b0))?1'b1:1'b0;
and u_rec_1 ( ENCLKACLKBrec, rise_time_same, adr_same_b, me_activeB, we_activeB);
`endif // endif of VIRAGE_FAST_VERILOG
wire LS_old;

`ifdef VIRAGE_FAST_VERILOG
`else
specify
 
  specparam
    Tac = 0.053,
    Tcax = 0.097,
    Tdc = 0.057,
    Tcdx = 0.172,
    Twc = 0.049,
    Tcwx = 0.097,
    Tmc = 0.034,
    Tcmx = 0.041,
    Tcsep = 0.612,
    Tcl = 0.166,
    Tcltest1 = 0.239,
    Tch = 0.080,
    Tchtest1 = 0.549,
    Tcc = 0.612,
    Tccvddmin = 0.969,
    Tccslow = 0.734,
    Tccdef = 0.612,
    Tccfast = 0.575,
    Tccfaster = 0.569,
    Trinc = 0.074,
    Tcrinx = 0.064,
    Trenc = 0.074,
    Tcrenx = 0.064,
    Trenclkrec = 4.332,
    Trrstrclkrec = 4.110,
    Trrstclkrec = 4.171,
    Trrst = 0.105,
    Trclkclkrec = 4.332,
    Trclkl = 0.424,
    Trclkh = 0.170,
    Trclkc = 0.594,
    TT1C = 0.060,
    TCT1X = 0.595,
    Ttrnmc = 0.060,
    Tctrnmx = 0.612,
    Trmec = 0.121,
    Tcrmex = 0.043,
    Trmc = 0.121,
    Trm2c = 0.079,
    Trm3c = 0.068,
    Tcrmx = 0.043,
    Tcrm2x = 0.019,
    Tcrm3x = 0.612,
    Trlsc = -0.014,
    Tflsc = 0.254,
    Tlsx = 0.080,
    Tbc1c = -0.014,
    Tbc2c = -0.014,
    Tcq = 0.475,
    Tcqx = 0.378,
    Tcqvddmin = 0.746,
    Tcqvddminx = 0.593,
    Tcqslow = 0.499,
    Tcqslowx = 0.392,
    Tcqdef = 0.475,
    Tcqdefx = 0.378,
    Tcqfast = 0.466,
    Tcqfastx = 0.371,
    Tcqfaster = 0.461,
    Tcqfasterx = 0.367,
    Tcqtest1x = 0.191,
    Tcqtest1 = 0.239,
    Trclkrout = 0.166;
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEA & !LS & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & !RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & RMA[0] & !RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & !RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[0] & RMA[1] & !RMA[2] & !RMA[3] & !LS & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEA & RMA[2] & !RMA[3]  & !LS & !TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( posedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1A )
       ( negedge CLKA => (  QA[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !FISO & RSCEN )
       ( posedge RSCLK => (  RSCOUT  : 1'bx )) = (  Trclkrout, Trclkrout );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );

// Timing Checks

  $width (negedge CLKA &&& ENCLKA, Tcl, 0, notif_clka);
  $width (negedge CLKA &&& ENCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA, Tch, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (posedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (posedge CLKA &&& ENCLKA_slw, Tccslow, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (posedge CLKA &&& ENCLKA_def, Tccdef, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fst, Tccfast, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fster, Tccfaster, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_fster, Tccfaster, notif_clka);
  $width (posedge RSCRST &&& ENRSCRST, Trrst, 0, notif_rscrst);
  $width (negedge RSCLK &&& ENRSCLK, Trclkl, 0, notif_rsclk);
  $width (posedge RSCLK &&& ENRSCLK, Trclkh, 0, notif_rsclk);
  $period (posedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $period (negedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $width (negedge CLKB &&& ENCLKB, Tcl, 0, notif_clkb);
  $width (negedge CLKB &&& ENCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB, Tch, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_def, Tccdef, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fster, Tccfaster, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_fster, Tccfaster, notif_clkb);
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[7], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[7], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[7] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[8], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[8] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[8], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[8] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[9], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[9] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[9], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[9] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLKA, delayed_DA[39] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLKA, delayed_DA[40] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLKA, delayed_DA[41] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLKA, delayed_DA[42] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLKA, delayed_DA[43] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLKA, delayed_DA[44] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLKA, delayed_DA[45] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLKA, delayed_DA[46] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLKA, delayed_DA[47] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLKA, delayed_DA[48] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLKA, delayed_DA[49] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLKA, delayed_DA[50] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLKA, delayed_DA[51] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLKA, delayed_DA[52] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLKA, delayed_DA[53] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLKA, delayed_DA[54] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLKA, delayed_DA[55] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLKA, delayed_DA[56] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLKA, delayed_DA[57] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLKA, delayed_DA[58] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLKA, delayed_DA[59] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLKA, delayed_DA[60] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLKA, delayed_DA[61] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLKA, delayed_DA[62] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLKA, delayed_DA[63] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLKA, delayed_DA[64] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLKA, delayed_DA[65] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLKA, delayed_DA[66] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLKA, delayed_DA[67] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLKA, delayed_DA[68] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLKA, delayed_DA[69] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLKA, delayed_DA[70] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLKA, delayed_DA[71] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLKA, delayed_DA[72] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLKA, delayed_DA[73] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLKA, delayed_DA[74] );
  $setuphold (posedge CLKA  &&& ENWEA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENWEA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENMEA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENMEA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge RSCLK  &&& ENRSCIN, posedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCIN, negedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, posedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, negedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK , posedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge RSCLK , negedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge CLKA  &&& ENTEST1A, posedge TEST1A,TT1C, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST1A, negedge TEST1A,TT1C, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, posedge TEST1A,0, TCT1X, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, negedge TEST1A,0, TCT1X, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST_RNMA, posedge TEST_RNMA,Ttrnmc, Tctrnmx, notif_test_rnma,,, delayed_CLKA, delayed_TEST_RNMA );
  $setuphold (posedge CLKA  &&& ENTEST_RNMA, negedge TEST_RNMA,Ttrnmc, Tctrnmx, notif_test_rnma,,, delayed_CLKA, delayed_TEST_RNMA );
  $setuphold (posedge CLKA  &&& ENRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[2], Trm2c, Tcrm2x, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[2], Trm2c, Tcrm2x, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENLS_A, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKA  &&& ENLS_A, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, posedge LS,Trlsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, negedge LS,Tflsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKA  &&& ENBC1, posedge BC1,Tbc1c, 0, notif_bc1,,, delayed_CLKA, delayed_BC1 );
  $setuphold (posedge CLKA  &&& ENBC1, negedge BC1,Tbc1c, 0, notif_bc1,,, delayed_CLKA, delayed_BC1 );
  $setuphold (posedge CLKB  &&& ENBC1, posedge BC1,Tbc1c, 0, notif_bc1_b,,, delayed_CLKB, delayed_BC1 );
  $setuphold (posedge CLKB  &&& ENBC1, negedge BC1,Tbc1c, 0, notif_bc1_b,,, delayed_CLKB, delayed_BC1 );
  $setuphold (posedge CLKA  &&& ENBC2, posedge BC2,Tbc2c, 0, notif_bc2,,, delayed_CLKA, delayed_BC2 );
  $setuphold (posedge CLKA  &&& ENBC2, negedge BC2,Tbc2c, 0, notif_bc2,,, delayed_CLKA, delayed_BC2 );
  $setuphold (posedge CLKB  &&& ENBC2, posedge BC2,Tbc2c, 0, notif_bc2_b,,, delayed_CLKB, delayed_BC2 );
  $setuphold (posedge CLKB  &&& ENBC2, negedge BC2,Tbc2c, 0, notif_bc2_b,,, delayed_CLKB, delayed_BC2 );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[7], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[7], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[7] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[8], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[8] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[8], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[8] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[9], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[9] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[9], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[9] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_CLKB, delayed_DB[0] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[0], Tdc, Tcdx, notif_db_0,,, delayed_CLKB, delayed_DB[0] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_CLKB, delayed_DB[1] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[1], Tdc, Tcdx, notif_db_1,,, delayed_CLKB, delayed_DB[1] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_CLKB, delayed_DB[2] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[2], Tdc, Tcdx, notif_db_2,,, delayed_CLKB, delayed_DB[2] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_CLKB, delayed_DB[3] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[3], Tdc, Tcdx, notif_db_3,,, delayed_CLKB, delayed_DB[3] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_CLKB, delayed_DB[4] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[4], Tdc, Tcdx, notif_db_4,,, delayed_CLKB, delayed_DB[4] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_CLKB, delayed_DB[5] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[5], Tdc, Tcdx, notif_db_5,,, delayed_CLKB, delayed_DB[5] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_CLKB, delayed_DB[6] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[6], Tdc, Tcdx, notif_db_6,,, delayed_CLKB, delayed_DB[6] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_CLKB, delayed_DB[7] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[7], Tdc, Tcdx, notif_db_7,,, delayed_CLKB, delayed_DB[7] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_CLKB, delayed_DB[8] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[8], Tdc, Tcdx, notif_db_8,,, delayed_CLKB, delayed_DB[8] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_CLKB, delayed_DB[9] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[9], Tdc, Tcdx, notif_db_9,,, delayed_CLKB, delayed_DB[9] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_CLKB, delayed_DB[10] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[10], Tdc, Tcdx, notif_db_10,,, delayed_CLKB, delayed_DB[10] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_CLKB, delayed_DB[11] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[11], Tdc, Tcdx, notif_db_11,,, delayed_CLKB, delayed_DB[11] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_CLKB, delayed_DB[12] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[12], Tdc, Tcdx, notif_db_12,,, delayed_CLKB, delayed_DB[12] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_CLKB, delayed_DB[13] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[13], Tdc, Tcdx, notif_db_13,,, delayed_CLKB, delayed_DB[13] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_CLKB, delayed_DB[14] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[14], Tdc, Tcdx, notif_db_14,,, delayed_CLKB, delayed_DB[14] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_CLKB, delayed_DB[15] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[15], Tdc, Tcdx, notif_db_15,,, delayed_CLKB, delayed_DB[15] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_CLKB, delayed_DB[16] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[16], Tdc, Tcdx, notif_db_16,,, delayed_CLKB, delayed_DB[16] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_CLKB, delayed_DB[17] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[17], Tdc, Tcdx, notif_db_17,,, delayed_CLKB, delayed_DB[17] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_CLKB, delayed_DB[18] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[18], Tdc, Tcdx, notif_db_18,,, delayed_CLKB, delayed_DB[18] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_CLKB, delayed_DB[19] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[19], Tdc, Tcdx, notif_db_19,,, delayed_CLKB, delayed_DB[19] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_CLKB, delayed_DB[20] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[20], Tdc, Tcdx, notif_db_20,,, delayed_CLKB, delayed_DB[20] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_CLKB, delayed_DB[21] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[21], Tdc, Tcdx, notif_db_21,,, delayed_CLKB, delayed_DB[21] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_CLKB, delayed_DB[22] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[22], Tdc, Tcdx, notif_db_22,,, delayed_CLKB, delayed_DB[22] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_CLKB, delayed_DB[23] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[23], Tdc, Tcdx, notif_db_23,,, delayed_CLKB, delayed_DB[23] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_CLKB, delayed_DB[24] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[24], Tdc, Tcdx, notif_db_24,,, delayed_CLKB, delayed_DB[24] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_CLKB, delayed_DB[25] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[25], Tdc, Tcdx, notif_db_25,,, delayed_CLKB, delayed_DB[25] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_CLKB, delayed_DB[26] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[26], Tdc, Tcdx, notif_db_26,,, delayed_CLKB, delayed_DB[26] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_CLKB, delayed_DB[27] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[27], Tdc, Tcdx, notif_db_27,,, delayed_CLKB, delayed_DB[27] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_CLKB, delayed_DB[28] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[28], Tdc, Tcdx, notif_db_28,,, delayed_CLKB, delayed_DB[28] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_CLKB, delayed_DB[29] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[29], Tdc, Tcdx, notif_db_29,,, delayed_CLKB, delayed_DB[29] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_CLKB, delayed_DB[30] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[30], Tdc, Tcdx, notif_db_30,,, delayed_CLKB, delayed_DB[30] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_CLKB, delayed_DB[31] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[31], Tdc, Tcdx, notif_db_31,,, delayed_CLKB, delayed_DB[31] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[32], Tdc, Tcdx, notif_db_32,,, delayed_CLKB, delayed_DB[32] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[32], Tdc, Tcdx, notif_db_32,,, delayed_CLKB, delayed_DB[32] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[33], Tdc, Tcdx, notif_db_33,,, delayed_CLKB, delayed_DB[33] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[33], Tdc, Tcdx, notif_db_33,,, delayed_CLKB, delayed_DB[33] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[34], Tdc, Tcdx, notif_db_34,,, delayed_CLKB, delayed_DB[34] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[34], Tdc, Tcdx, notif_db_34,,, delayed_CLKB, delayed_DB[34] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[35], Tdc, Tcdx, notif_db_35,,, delayed_CLKB, delayed_DB[35] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[35], Tdc, Tcdx, notif_db_35,,, delayed_CLKB, delayed_DB[35] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[36], Tdc, Tcdx, notif_db_36,,, delayed_CLKB, delayed_DB[36] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[36], Tdc, Tcdx, notif_db_36,,, delayed_CLKB, delayed_DB[36] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[37], Tdc, Tcdx, notif_db_37,,, delayed_CLKB, delayed_DB[37] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[37], Tdc, Tcdx, notif_db_37,,, delayed_CLKB, delayed_DB[37] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[38], Tdc, Tcdx, notif_db_38,,, delayed_CLKB, delayed_DB[38] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[38], Tdc, Tcdx, notif_db_38,,, delayed_CLKB, delayed_DB[38] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[39], Tdc, Tcdx, notif_db_39,,, delayed_CLKB, delayed_DB[39] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[39], Tdc, Tcdx, notif_db_39,,, delayed_CLKB, delayed_DB[39] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[40], Tdc, Tcdx, notif_db_40,,, delayed_CLKB, delayed_DB[40] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[40], Tdc, Tcdx, notif_db_40,,, delayed_CLKB, delayed_DB[40] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[41], Tdc, Tcdx, notif_db_41,,, delayed_CLKB, delayed_DB[41] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[41], Tdc, Tcdx, notif_db_41,,, delayed_CLKB, delayed_DB[41] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[42], Tdc, Tcdx, notif_db_42,,, delayed_CLKB, delayed_DB[42] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[42], Tdc, Tcdx, notif_db_42,,, delayed_CLKB, delayed_DB[42] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[43], Tdc, Tcdx, notif_db_43,,, delayed_CLKB, delayed_DB[43] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[43], Tdc, Tcdx, notif_db_43,,, delayed_CLKB, delayed_DB[43] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[44], Tdc, Tcdx, notif_db_44,,, delayed_CLKB, delayed_DB[44] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[44], Tdc, Tcdx, notif_db_44,,, delayed_CLKB, delayed_DB[44] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[45], Tdc, Tcdx, notif_db_45,,, delayed_CLKB, delayed_DB[45] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[45], Tdc, Tcdx, notif_db_45,,, delayed_CLKB, delayed_DB[45] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[46], Tdc, Tcdx, notif_db_46,,, delayed_CLKB, delayed_DB[46] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[46], Tdc, Tcdx, notif_db_46,,, delayed_CLKB, delayed_DB[46] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[47], Tdc, Tcdx, notif_db_47,,, delayed_CLKB, delayed_DB[47] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[47], Tdc, Tcdx, notif_db_47,,, delayed_CLKB, delayed_DB[47] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[48], Tdc, Tcdx, notif_db_48,,, delayed_CLKB, delayed_DB[48] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[48], Tdc, Tcdx, notif_db_48,,, delayed_CLKB, delayed_DB[48] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[49], Tdc, Tcdx, notif_db_49,,, delayed_CLKB, delayed_DB[49] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[49], Tdc, Tcdx, notif_db_49,,, delayed_CLKB, delayed_DB[49] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[50], Tdc, Tcdx, notif_db_50,,, delayed_CLKB, delayed_DB[50] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[50], Tdc, Tcdx, notif_db_50,,, delayed_CLKB, delayed_DB[50] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[51], Tdc, Tcdx, notif_db_51,,, delayed_CLKB, delayed_DB[51] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[51], Tdc, Tcdx, notif_db_51,,, delayed_CLKB, delayed_DB[51] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[52], Tdc, Tcdx, notif_db_52,,, delayed_CLKB, delayed_DB[52] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[52], Tdc, Tcdx, notif_db_52,,, delayed_CLKB, delayed_DB[52] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[53], Tdc, Tcdx, notif_db_53,,, delayed_CLKB, delayed_DB[53] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[53], Tdc, Tcdx, notif_db_53,,, delayed_CLKB, delayed_DB[53] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[54], Tdc, Tcdx, notif_db_54,,, delayed_CLKB, delayed_DB[54] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[54], Tdc, Tcdx, notif_db_54,,, delayed_CLKB, delayed_DB[54] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[55], Tdc, Tcdx, notif_db_55,,, delayed_CLKB, delayed_DB[55] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[55], Tdc, Tcdx, notif_db_55,,, delayed_CLKB, delayed_DB[55] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[56], Tdc, Tcdx, notif_db_56,,, delayed_CLKB, delayed_DB[56] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[56], Tdc, Tcdx, notif_db_56,,, delayed_CLKB, delayed_DB[56] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[57], Tdc, Tcdx, notif_db_57,,, delayed_CLKB, delayed_DB[57] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[57], Tdc, Tcdx, notif_db_57,,, delayed_CLKB, delayed_DB[57] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[58], Tdc, Tcdx, notif_db_58,,, delayed_CLKB, delayed_DB[58] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[58], Tdc, Tcdx, notif_db_58,,, delayed_CLKB, delayed_DB[58] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[59], Tdc, Tcdx, notif_db_59,,, delayed_CLKB, delayed_DB[59] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[59], Tdc, Tcdx, notif_db_59,,, delayed_CLKB, delayed_DB[59] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[60], Tdc, Tcdx, notif_db_60,,, delayed_CLKB, delayed_DB[60] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[60], Tdc, Tcdx, notif_db_60,,, delayed_CLKB, delayed_DB[60] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[61], Tdc, Tcdx, notif_db_61,,, delayed_CLKB, delayed_DB[61] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[61], Tdc, Tcdx, notif_db_61,,, delayed_CLKB, delayed_DB[61] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[62], Tdc, Tcdx, notif_db_62,,, delayed_CLKB, delayed_DB[62] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[62], Tdc, Tcdx, notif_db_62,,, delayed_CLKB, delayed_DB[62] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[63], Tdc, Tcdx, notif_db_63,,, delayed_CLKB, delayed_DB[63] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[63], Tdc, Tcdx, notif_db_63,,, delayed_CLKB, delayed_DB[63] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[64], Tdc, Tcdx, notif_db_64,,, delayed_CLKB, delayed_DB[64] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[64], Tdc, Tcdx, notif_db_64,,, delayed_CLKB, delayed_DB[64] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[65], Tdc, Tcdx, notif_db_65,,, delayed_CLKB, delayed_DB[65] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[65], Tdc, Tcdx, notif_db_65,,, delayed_CLKB, delayed_DB[65] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[66], Tdc, Tcdx, notif_db_66,,, delayed_CLKB, delayed_DB[66] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[66], Tdc, Tcdx, notif_db_66,,, delayed_CLKB, delayed_DB[66] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[67], Tdc, Tcdx, notif_db_67,,, delayed_CLKB, delayed_DB[67] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[67], Tdc, Tcdx, notif_db_67,,, delayed_CLKB, delayed_DB[67] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[68], Tdc, Tcdx, notif_db_68,,, delayed_CLKB, delayed_DB[68] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[68], Tdc, Tcdx, notif_db_68,,, delayed_CLKB, delayed_DB[68] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[69], Tdc, Tcdx, notif_db_69,,, delayed_CLKB, delayed_DB[69] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[69], Tdc, Tcdx, notif_db_69,,, delayed_CLKB, delayed_DB[69] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[70], Tdc, Tcdx, notif_db_70,,, delayed_CLKB, delayed_DB[70] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[70], Tdc, Tcdx, notif_db_70,,, delayed_CLKB, delayed_DB[70] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[71], Tdc, Tcdx, notif_db_71,,, delayed_CLKB, delayed_DB[71] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[71], Tdc, Tcdx, notif_db_71,,, delayed_CLKB, delayed_DB[71] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[72], Tdc, Tcdx, notif_db_72,,, delayed_CLKB, delayed_DB[72] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[72], Tdc, Tcdx, notif_db_72,,, delayed_CLKB, delayed_DB[72] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[73], Tdc, Tcdx, notif_db_73,,, delayed_CLKB, delayed_DB[73] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[73], Tdc, Tcdx, notif_db_73,,, delayed_CLKB, delayed_DB[73] );
  $setuphold (posedge CLKB  &&& ENDB, posedge DB[74], Tdc, Tcdx, notif_db_74,,, delayed_CLKB, delayed_DB[74] );
  $setuphold (posedge CLKB  &&& ENDB, negedge DB[74], Tdc, Tcdx, notif_db_74,,, delayed_CLKB, delayed_DB[74] );
  $setuphold (posedge CLKB  &&& ENWEB, posedge WEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_WEB );
  $setuphold (posedge CLKB  &&& ENWEB, negedge WEB,Twc, Tcwx, notif_web,,, delayed_CLKB, delayed_WEB );
  $setuphold (posedge CLKB  &&& ENMEB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENMEB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENTEST1B, posedge TEST1B,TT1C, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENTEST1B, negedge TEST1B,TT1C, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, posedge TEST1B,0, TCT1X, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, negedge TEST1B,0, TCT1X, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENTEST_RNMB, posedge TEST_RNMB,Ttrnmc, Tctrnmx, notif_test_rnmb,,, delayed_CLKB, delayed_TEST_RNMB );
  $setuphold (posedge CLKB  &&& ENTEST_RNMB, negedge TEST_RNMB,Ttrnmc, Tctrnmx, notif_test_rnmb,,, delayed_CLKB, delayed_TEST_RNMB );
  $setuphold (posedge CLKB  &&& ENRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[2], Trm2c, Tcrm2x, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[2], Trm2c, Tcrm2x, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $recrem ( posedge CLKA,posedge CLKB  &&& ENCLKACLKBrec, Tcsep, Tcsep, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( negedge RSCEN,posedge CLKA  &&& ENRSCENCLKArec, Trenclkrec, Trenclkrec, notif_rscen_CLKA_rise_fall_rec,,, delayed_RSCEN, delayed_CLKA);
  $recrem ( negedge RSCEN,posedge CLKB  &&& ENRSCENCLKBrec, Trenclkrec, Trenclkrec, notif_rscen_CLKB_rise_fall_rec,,, delayed_RSCEN, delayed_CLKB);
  $recrem ( negedge RSCRST,posedge RSCLK  &&& ENRSCRSTRSCLKrec, Trrstrclkrec, Trrstrclkrec, notif_rscrst_RSCLK_rise_fall_rec,,, delayed_RSCRST, delayed_RSCLK);
  $recrem ( negedge RSCRST,posedge CLKA  &&& ENRSCRSTCLKArec, Trrstclkrec, Trrstclkrec, notif_rscrst_CLKA_rise_fall_rec,,, delayed_RSCRST, delayed_CLKA);
  $recrem ( negedge RSCRST,posedge CLKB  &&& ENRSCRSTCLKBrec, Trrstclkrec, Trrstclkrec, notif_rscrst_CLKB_rise_fall_rec,,, delayed_RSCRST, delayed_CLKB);
  $recrem ( posedge RSCLK,posedge CLKA  &&& ENRSCLKCLKArec, Trclkclkrec, Trclkclkrec, notif_rsclk_CLKA_rise_rise_rec,,, delayed_RSCLK, delayed_CLKA);
  $recrem ( posedge RSCLK,posedge CLKB  &&& ENRSCLKCLKBrec, Trclkclkrec, Trclkclkrec, notif_rsclk_CLKB_rise_rise_rec,,, delayed_RSCLK, delayed_CLKB);
  $recrem ( posedge CLKB,posedge CLKA  &&& ENCLKBCLKArec, Tcsep, Tcsep, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);

endspecify
`endif // endif of VIRAGE_FAST_VERILOG
wire test1_ls_pwr, mux_ls;
assign test1_ls_pwr = ((uut.TEST1Alatched === 1'b1 && uut.MEAlatched === 1'b1 ) || (uut.TEST1Blatched === 1'b1 && uut.MEBlatched === 1'b1 )) && LS_buf;
assign mux_ls = (test1_ls_pwr === 1'b1) ? LS_old : ((test1_ls_pwr === 1'b0) ? LS_buf : 1'bX);

wire [74:0] QA_mem;
assign QA_buf = QA_mem;
wire [74:0] QB_mem;
assign QB_buf = QB_mem;
// Corrupt memory if BC1 or BC2 assert during Light Mode or Deep Sleep Mode
always @(BC1_buf or BC2_buf)
begin
  if (LS_buf !== 1'b0)
  begin
    uut.corrupt_all_loc(`True);
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("\n%m<<VIRL_MEM_WARNING: Assertion on BC1/BC2 pin during Light Sleep Mode>>(time %0t)\n\n", $time);
    end
  end
  if (BC1_buf === 1'bX)
  begin
    uut.report_unknown("BC1");
    uut.corrupt_all_loc(`True);
  end
  if (BC2_buf === 1'bX)
  begin
    uut.report_unknown("BC2");
    uut.corrupt_all_loc(`True);
  end
end


`ifdef VIRAGE_FAST_VERILOG
generic_behav_RF_DPHD_1024x75 #( MES_CNTRL, PreloadFilename, MemFault_Inj) uut (  .QA (QA_mem), .RSCOUT(RSCOUT_buf), .QB (QB_mem), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .TEST1A(TEST1A_buf), .TEST_RNMA(TEST_RNMA_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .LS(LS_buf), .BC1(BC1_buf), .BC2(BC2_buf), .ADRB (ADRB_pre), .DB (DB_pre), .WEB(WEB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .TEST_RNMB(TEST_RNMB_buf), .RMEB(RMEB_buf), .RMB (RMB_int), .sim_check_A (sim_check_A), .sim_check_B (sim_check_B) );
`else
generic_behav_RF_DPHD_1024x75 #( MES_CNTRL, PreloadFilename, MemFault_Inj) uut (  .QA (QA_mem), .RSCOUT(RSCOUT_buf), .QB (QB_mem), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLKA(CLKA_mem), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .TEST1A(TEST1A_buf), .TEST_RNMA(TEST_RNMA_buf), .RMEA(RMEA_buf), .RMA (RMA_int), .LS(LS_buf), .BC1(BC1_buf), .BC2(BC2_buf), .ADRB (ADRB_pre), .DB (DB_pre), .WEB(WEB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .TEST_RNMB(TEST_RNMB_buf), .RMEB(RMEB_buf), .RMB (RMB_int), .EVENT_TCQ_A (EVENT_TCQ_A), .EVENT_TCQ_B (EVENT_TCQ_B),.notif_adra(notif_adra), .notif_da(notif_da), .notif_wea(notif_wea), .notif_mea(notif_mea), .notif_clka(notif_clka), .notif_clkap(notif_clkap), .notif_clka_CLKB_rise_rise_rec(notif_clka_CLKB_rise_rise_rec), .notif_rscin(notif_rscin), .notif_rscen(notif_rscen), .notif_rscen_CLKA_rise_fall_rec(notif_rscen_CLKA_rise_fall_rec), 
.notif_rscen_CLKB_rise_fall_rec(notif_rscen_CLKB_rise_fall_rec), .notif_rscrst(notif_rscrst), .notif_rscrst_setup(notif_rscrst_setup), .notif_rscrst_RSCLK_rise_fall_rec(notif_rscrst_RSCLK_rise_fall_rec), .notif_rscrst_CLKA_rise_fall_rec(notif_rscrst_CLKA_rise_fall_rec), .notif_rscrst_CLKB_rise_fall_rec(notif_rscrst_CLKB_rise_fall_rec), .notif_rsclk(notif_rsclk), .notif_rsclk_CLKA_rise_rise_rec(notif_rsclk_CLKA_rise_rise_rec), .notif_rsclk_CLKB_rise_rise_rec(notif_rsclk_CLKB_rise_rise_rec), .notif_fiso(notif_fiso), .notif_test1a(notif_test1a), .notif_test_rnma(notif_test_rnma), .notif_rmea(notif_rmea), .notif_rma(notif_rma), .notif_ls(notif_ls), .notif_ls_b(notif_ls_b), .notif_bc1(notif_bc1), .notif_bc1_b(notif_bc1_b), .notif_bc2(notif_bc2), .notif_bc2_b(notif_bc2_b), .notif_adrb(notif_adrb), .notif_db(notif_db), .notif_web(notif_web), .notif_meb(notif_meb), .notif_clkb(notif_clkb), .notif_clkbp(notif_clkbp), .notif_clkb_CLKA_rise_rise_rec(notif_clkb_CLKA_rise_rise_rec), .notif_test1b(notif_test1b), 
.notif_test_rnmb(notif_test_rnmb), .notif_rmeb(notif_rmeb), .notif_rmb(notif_rmb) );
`endif // endif of VIRAGE_FAST_VERILOG

initial
begin

  ADRFLAGA = 1;
  ADRFLAGB = 1;
end // end of initial block
always @( negedge CLKA_buf or ADRA_buf )
begin : blk_addrhold_0
  if ( CLKA_buf === 1'b0 )
  begin
    ADRA_old <= ADRA_buf;
  end // if of CLKA_buf = 0
end // if of always block blk_addrhold_0

always @( negedge CLKA_buf or MEA_buf )
begin : blk_mehold_0
  if ( CLKA_buf === 1'b0 )
  begin
    MEA_old <= MEA_buf;
  end // if of CLKA_buf = 0
end // if of always block blk_mehold_0

always @( negedge CLKA_buf or WEA_buf )
begin : blk_wehold_0
  if ( CLKA_buf === 1'b0 )
  begin
    WEA_old <= WEA_buf;
  end // if of CLKA_buf = 0
end // if of always block blk_wehold_0

always @( posedge CLKA_mem)
begin : blk_posclock_0
  MEA_buf_L = MEA_old;
  WEA_buf_L = WEA_old;
  CLK_T_A = $realtime;
  if (LS_buf ===  1'b1 || TEST_RNMA_buf ===  1'b1)
  begin
   MEA_buf_L = 1'b0;
  end
`ifdef VIRAGE_FAST_VERILOG
`else
  EVENT_TCQ_A = 1'b1;
`endif
  ADRA_buf_L = ADRA_old;
  #0;
  if (CLK_T_A == CLK_T_B)
  begin
    if ( ((ADRA_buf_L === ADRB_buf_L) && ADRFLAGA) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || (( ADRA_buf_L^ADRA_buf_L) !== 0) || (( ADRB_buf_L^ADRB_buf_L) !== 0))
    begin
      if ( (MEA_buf_L !== 1'b0 && MEB_buf_L !== 1'b0 ) && ((WEA_buf_L !== 1'b0) || (WEB_buf_L !== 1'b0) || ((WEA_buf_L !== 1'b0) && ( WEB_buf_L !== 1'b0 ))))
      begin
        `ifdef VIRAGE_FAST_VERILOG
        `else
        if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid)
        begin
          $display("\n<<VIRL_MEM_ERR: Recovery Timing Violation on posedge CLKA wrt posedge CLKB>> at time=%t; instance=%m (RAMS1H)",$realtime);
        end // if of message display is enabled
        `endif // endif of VIRAGE_FAST_VERILOG
        `ifdef VIRAGE_FAST_VERILOG
        if( sim_check_A === 1'bx)
          #0 sim_check_A = 1'b0;
        else
          #0 sim_check_A = !sim_check_A;
        `else
        if(notif_clka_CLKB_rise_rise_rec === 1'bx)
          #0 notif_clka_CLKB_rise_rise_rec = 1'b0;
        else
         #0 notif_clka_CLKB_rise_rise_rec = !notif_clka_CLKB_rise_rise_rec;
        `endif // endif of VIRAGE_FAST_VERILOG
      end
    end
  end
end
always @( negedge CLKB_buf or ADRB_buf )
begin : blk_addrhold_1
  if ( CLKB_buf === 1'b0 )
  begin
    ADRB_old <= ADRB_buf;
  end // if of CLKB_buf = 0
end // if of always block blk_addrhold_1

always @( negedge CLKB_buf or MEB_buf )
begin : blk_mehold_1
  if ( CLKB_buf === 1'b0 )
  begin
    MEB_old <= MEB_buf;
  end // if of CLKB_buf = 0
end // if of always block blk_mehold_1

always @( negedge CLKB_buf or WEB_buf )
begin : blk_wehold_1
  if ( CLKB_buf === 1'b0 )
  begin
    WEB_old <= WEB_buf;
  end // if of CLKB_buf = 0
end // if of always block blk_wehold_1

always @( posedge CLKB_mem)
begin : blk_posclock_1
  MEB_buf_L = MEB_old;
  WEB_buf_L = WEB_old;
  CLK_T_B = $realtime;
  if (LS_buf ===  1'b1 || TEST_RNMB_buf ===  1'b1)
  begin
   MEB_buf_L = 1'b0;
  end
`ifdef VIRAGE_FAST_VERILOG
`else
  EVENT_TCQ_B = 1'b1;
`endif
  ADRB_buf_L = ADRB_old;
  #0;
  if (CLK_T_B == CLK_T_A)
  begin
    if ( ((ADRB_buf_L === ADRA_buf_L) && ADRFLAGB) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || (( ADRB_buf_L^ADRB_buf_L) !== 0) || (( ADRA_buf_L^ADRA_buf_L) !== 0))
    begin
      if ( (MEB_buf_L !== 1'b0 && MEA_buf_L !== 1'b0 ) && ((WEA_buf_L !== 1'b0) || (WEB_buf_L !== 1'b0) || ((WEA_buf_L !== 1'b0) && ( WEB_buf_L !== 1'b0 ))))
      begin
        `ifdef VIRAGE_FAST_VERILOG
        `else
        if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid)
        begin
          $display("\n<<VIRL_MEM_ERR: Recovery Timing Violation on posedge CLKB wrt posedge CLKA>> at time=%t; instance=%m (RAMS1H)",$realtime);
        end // if of message display is enabled
        `endif // endif of VIRAGE_FAST_VERILOG
        `ifdef VIRAGE_FAST_VERILOG
        if( sim_check_B === 1'bx)
          #0 sim_check_B = 1'b0;
        else
          #0 sim_check_B = !sim_check_B;
        `else
        if(notif_clkb_CLKA_rise_rise_rec === 1'bx)
          #0 notif_clkb_CLKA_rise_rise_rec = 1'b0;
        else
         #0 notif_clkb_CLKA_rise_rise_rec = !notif_clkb_CLKA_rise_rise_rec;
        `endif // endif of VIRAGE_FAST_VERILOG
      end
    end
  end
end
`ifdef VIRAGE_FAST_VERILOG
`else
assign rise_time_same = ( CLK_T_A == CLK_T_B )? 1'b0:1'b1;
`endif


always @ ( ADRA_buf )
begin : blk_address_0
  if ( $realtime != 0)
  begin
    if ( ADRA_buf > 10'b1111111111) 
    begin
      ADRFLAGA = 0;
    end // if of address is out of range
    else
    begin
      ADRFLAGA = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of always block blk_address_0

always @ ( ADRB_buf )
begin : blk_address_1
  if ( $realtime != 0)
  begin
    if ( ADRB_buf > 10'b1111111111) 
    begin
      ADRFLAGB = 0;
    end // if of address is out of range
    else
    begin
      ADRFLAGB = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of always block blk_address_1

assign RMA_int = ((RMEA_buf===1'b1)?RMA_buf[2:0]:((RMEA_buf===1'b0)?3'b010:3'bx));
wire llsb;
assign llsb = (!(mux_ls) || (RMA_buf[3] || RMB_buf[3]));

assign RMB_int = ((RMEB_buf===1'b1)?RMB_buf[2:0]:((RMEB_buf===1'b0)?3'b010:3'bx));
initial
begin
disp_LS_msgA = 1'b1;
disp_LS_msgB = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgA = 1'b1;
  disp_LS_msgA_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLKA_buf)
begin : blk_ls_0
  if (LS_buf === 1'b1 && MEA_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgA === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port A : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgA = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgB = 1'b1;
  disp_LS_msgB_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLKB_buf)
begin : blk_ls_1
  if (LS_buf === 1'b1 && MEB_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgB === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port B : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgB = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_1

always @(RMA_buf[3])
begin
  if(RMA_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL == "WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RMA[3] is unknown>> at time=%t; instance=%m (RF_DPHD_1024x75_core)",$realtime);
    end
  end
end

always @(RMB_buf[3])
begin
  if(RMB_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL == "WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RMB[3] is unknown>> at time=%t; instance=%m (RF_DPHD_1024x75_core)",$realtime);
    end
  end
end


`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_da = {notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0};
assign notif_db = {notif_db_74, notif_db_73, notif_db_72, notif_db_71, notif_db_70, notif_db_69, notif_db_68, notif_db_67, notif_db_66, notif_db_65, notif_db_64, notif_db_63, notif_db_62, notif_db_61, notif_db_60, notif_db_59, notif_db_58, notif_db_57, notif_db_56, notif_db_55, notif_db_54, notif_db_53, notif_db_52, notif_db_51, notif_db_50, notif_db_49, notif_db_48, notif_db_47, notif_db_46, notif_db_45, notif_db_44, notif_db_43, notif_db_42, notif_db_41, notif_db_40, notif_db_39, notif_db_38, notif_db_37, notif_db_36, notif_db_35, notif_db_34, notif_db_33, notif_db_32, notif_db_31, notif_db_30, notif_db_29, notif_db_28, notif_db_27, notif_db_26, notif_db_25, notif_db_24, notif_db_23, notif_db_22, notif_db_21, notif_db_20, notif_db_19, notif_db_18, notif_db_17, notif_db_16, notif_db_15, notif_db_14, notif_db_13, notif_db_12, notif_db_11, notif_db_10, notif_db_9, notif_db_8, notif_db_7, notif_db_6, notif_db_5, notif_db_4, notif_db_3, notif_db_2, notif_db_1, notif_db_0};
`endif // endif of VIRAGE_FAST_VERILOG

reg del_CLKA_buf, del_CLKB_buf;
always @(CLKA_buf)
begin
  if (CLKA_buf === 1'b1)
  begin
    del_CLKA_buf = CLKA_buf && MEA_pre ;
    if (TEST1A_buf === 1'b0)
      #0.746 del_CLKA_buf = 1'b0;
  end
  else
  begin
    del_CLKA_buf = CLKA_buf;
  end
end
always @(CLKB_buf)
begin
  if (CLKB_buf === 1'b1)
  begin
    del_CLKB_buf = CLKB_buf && MEB_pre ;
    if (TEST1B_buf === 1'b0)
      #0.746 del_CLKB_buf = 1'b0;
  end
  else
  begin
    del_CLKB_buf = CLKB_buf;
  end
end
assign LS_old = (del_CLKA_buf === 1'b0 && del_CLKB_buf === 1'b0) ? LS_buf : LS_old;
assign CLKA_mem = CLKA_buf;
assign CLKB_mem = CLKB_buf;

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG
module generic_behav_RF_DPHD_1024x75 (  QA, RSCOUT, QB, ADRA, DA, WEA, MEA, CLKA, RSCIN, RSCEN, RSCRST, RSCLK, FISO, TEST1A, TEST_RNMA, RMEA, RMA, LS, BC1, BC2, ADRB, DB, WEB, MEB, CLKB, TEST1B, TEST_RNMB, RMEB, RMB,sim_check_A, sim_check_B );
`else
module generic_behav_RF_DPHD_1024x75 (  QA, RSCOUT, QB, ADRA, DA, WEA, MEA, CLKA, RSCIN, RSCEN, RSCRST, RSCLK, FISO, TEST1A, TEST_RNMA, RMEA, RMA, LS, BC1, BC2, ADRB, DB, WEB, MEB, CLKB, TEST1B, TEST_RNMB, RMEB, RMB, EVENT_TCQ_A, EVENT_TCQ_B,notif_adra, notif_da, notif_wea, notif_mea, notif_clka, notif_clkap, notif_clka_CLKB_rise_rise_rec, notif_rscin, notif_rscen, notif_rscen_CLKA_rise_fall_rec, notif_rscen_CLKB_rise_fall_rec, notif_rscrst, notif_rscrst_setup, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLKA_rise_fall_rec, notif_rscrst_CLKB_rise_fall_rec, notif_rsclk, notif_rsclk_CLKA_rise_rise_rec, notif_rsclk_CLKB_rise_rise_rec, notif_fiso, notif_test1a, notif_test_rnma, notif_rmea, notif_rma, notif_ls, notif_ls_b, notif_bc1, notif_bc1_b, notif_bc2, notif_bc2_b, notif_adrb, notif_db, notif_web, notif_meb, notif_clkb, notif_clkbp, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_test_rnmb, notif_rmeb, notif_rmb );
`endif // endif of VIRAGE_FAST_VERILOG

parameter MES_CNTRL = "ON";
parameter PreloadFilename = "init.file";
parameter MemFault_Inj = 0;

parameter words = 1024, bits = 75, addrbits = 10, O_delay=0.0, timingmode = 1, rmbits=3;

output [bits-1:0] QA;
output RSCOUT;
output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input WEA;
input MEA;
input CLKA;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input TEST1A;
input TEST_RNMA;
input RMEA;
input [rmbits-1:0] RMA;
input LS;
input BC1;
input BC2;
input [addrbits-1:0] ADRB;
input [bits-1:0] DB;
input WEB;
input MEB;
input CLKB;
input TEST1B;
input TEST_RNMB;
input RMEB;
input [rmbits-1:0] RMB;

`ifdef VIRAGE_FAST_VERILOG
input sim_check_A, sim_check_B;
`else
input EVENT_TCQ_A;
input EVENT_TCQ_B;
input [74:0] notif_da;
input [74:0] notif_db;
input notif_adra, notif_wea, notif_mea, notif_clka, notif_clkap, notif_clka_CLKB_rise_rise_rec, notif_rscin, notif_rscen, notif_rscen_CLKA_rise_fall_rec, notif_rscen_CLKB_rise_fall_rec, notif_rscrst, notif_rscrst_setup, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLKA_rise_fall_rec, notif_rscrst_CLKB_rise_fall_rec, notif_rsclk, notif_rsclk_CLKA_rise_rise_rec, notif_rsclk_CLKB_rise_rise_rec, notif_fiso, notif_test1a, notif_test_rnma, notif_rmea, notif_rma, notif_ls, notif_ls_b, notif_bc1, notif_bc1_b, notif_bc2, notif_bc2_b, notif_adrb, notif_web, notif_meb, notif_clkb, notif_clkbp, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_test_rnmb, notif_rmeb, notif_rmb;

`endif // endif of VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };



reg  [bits-1:0]  QA;
reg RSCOUT;
reg  [bits-1:0]  QB;
reg [addrbits-1:0] ADRAlatched;

reg [addrbits-1:0] ADRA_old;

reg [bits-1:0] DAlatched;

reg [bits-1:0] DA_old;

reg WEAlatched;
reg WEA_old;
reg MEAlatched;
reg MEA_old;
reg RSCENlatched;
reg TEST1Alatched;
reg TEST_RNMAlatched;
reg TEST_RNMA_old;
reg diff_me_tcha, diff_me_tcca;
reg TEST1A_old;
reg [addrbits-1:0] ADRBlatched;

reg [addrbits-1:0] ADRB_old;

reg [bits-1:0] DBlatched;

reg [bits-1:0] DB_old;

reg WEBlatched;
reg WEB_old;
reg MEBlatched;
reg MEB_old;
reg TEST1Blatched;
reg TEST_RNMBlatched;
reg TEST_RNMB_old;
reg diff_me_tchb, diff_me_tccb;
reg TEST1B_old;
//reg  [bits-1:0] X_a_corrupt;
reg  left_col_out_range;
reg  right_col_out_range;
integer bit_cnt;
reg flaga_clear_scan_reg;
reg flaga_shift_ok;
reg RST_check ;
reg RST_tri ;
reg [17:0] scan_reg;
reg RSCOUT_local;
wire RSCOUT_tmp;
reg disp_LS_msg;
reg disp_RSCLK_msg;
reg
  flaga_read_ok,
  flaga_we_ok,
  flaga_d_ok,
  flaga_rm_ok,
  flaga_adr_ok,
  flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_viol;
event   ev_read_out_a_port;
event   ev_RST_out_a_port;
reg  MEA_chk;
real CLKA_TIME;
real CLKA_T;
wire   [74:0]  QA_temp;
reg    [74:0]  QA_local_tmp;
reg    [74:0]  memdata;
reg
  flagb_read_ok,
  flagb_we_ok,
  flagb_d_ok,
  flagb_rm_ok,
  flagb_adr_ok,
  flagb_range_ok;
reg     flagb_clk_valid;
reg     flagb_viol;
event   ev_read_out_b_port;
event   ev_RST_out_b_port;
reg  MEB_chk;
real CLKB_TIME;
real CLKB_T;
wire   [74:0]  QB_temp;
reg    [74:0]  QB_local_tmp;
`ifdef VIRAGE_FAST_VERILOG
`else
real tcqa_time;

always @(negedge EVENT_TCQ_A)
begin : blk_negtcqevent_0
  tcqa_time = $realtime;
end // end of always block blk_negtcqevent_0
`endif // endif of VIRAGE_FAST_VERILOG
reg mes_all_valid;
integer i;
reg [307:0] mem_core_array [0:255];
reg [74:0] mem_core_array_read [0:1023];

parameter MaxCol =308;
parameter MaxRow = 256 ;
integer tempcnt;
reg [MaxCol-1:0]mem_fault_array_XOR[0:MaxRow-1];
reg [MaxCol-1:0]mem_fault_array_sa0[0:MaxRow-1];
reg [MaxCol-1:0]mem_fault_array_sa1[0:MaxRow-1];
reg faultinj_en;
initial
begin : reinit_fault_blk
  faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
  faultinj_en = 1'b1;
`else
  if (MemFault_Inj == 1)
    faultinj_en = 1'b1;
`endif
  for (tempcnt=0; tempcnt<MaxRow; tempcnt=tempcnt+1)
  begin
    if (faultinj_en == 1)
      mem_fault_array_XOR[tempcnt] = 0;
    else
    begin
      mem_fault_array_sa0[tempcnt] = {MaxCol{1'b1}};
      mem_fault_array_sa1[tempcnt] = 0;
    end
  end
  if (faultinj_en == 1)
  begin
if ($test$plusargs("star_error_fail")) 
  begin
    mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4) | (1'b1 << 8);
  end // if of +star_error_fail is used
       else if ($test$plusargs("star_error_a")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 4) | (1'b1 << 160); 
       end // if of +star_error_a is used 
       else if ($test$plusargs("star_error_b")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 80) | (1'b1 << 232); 
       end // if of +star_error_b is used 
       else if ($test$plusargs("star_error_c")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 155) | (1'b1 << 307); 
       end // if of +star_error_c is used 

else if ($test$plusargs("star_error")) 
  begin
    mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4);
  end // if of +star_error is used
  end
end // end of initial block
`ifdef VIRAGE_FAST_VERILOG
`else
real tcqb_time;

always @(negedge EVENT_TCQ_B)
begin : blk_negtcqevent_1
  tcqb_time = $realtime;
end // end of always block blk_negtcqevent_1
`endif // endif of VIRAGE_FAST_VERILOG



// Checks whether address input is Valid; 1-bit return value
function is_adr_Valid;  
input [addrbits-1:0] addr_to_check;
reg     ret_value;
begin
  ret_value = `True;
  if ((^addr_to_check) === 1'bx)
  begin
    ret_value = `False;
  end // if addr_to_check is X
  is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*9:1] signal;
begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask


// Calculate Column position
task get_column_position;
output [8:0] column_position;
input [1:0] Y_adr;
input [6:0] bit_index;
reg [5:0] blk_right;
reg [5:0] blk_left;
begin
  if ( ^scan_reg === 1'bX )
  begin
    left_col_out_range = 1'bx;
    right_col_out_range = 1'bx;
    if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m<<VIRL_MEM_ERR: INVALID RECONFIG REGISTER COLUMN>>(time %0t)", $time);
    end
  end
  if ( bit_index > 37)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      if (scan_reg[10:9] === 2'b0)
      begin
        if ({scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 6'b100100 )
        begin
          if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
          begin
           $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
          end
          right_col_out_range = 1'b1;
        end // if of {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 6'b100100
        else
        begin
          blk_right = ((bit_index - 38) * 1) + (Y_adr/4);
          if (blk_right <= {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]})
          begin
            column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
          end // if of blk_right <= {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
          else
          begin
            column_position = (Y_adr + (((bit_index * 1) + 2) * 4));
            //$display("\n%m column_position=%b,Y_adr=%b,bit_index=%b,scan_reg=%b at %0t\n\n", column_position, Y_adr, bit_index, scan_reg, $time);
          end // else of if blk_right <= {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
        end // else of if {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 6'b100100
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR: INVALID ADDRESS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        right_col_out_range = 1'b1;
      end // else of if unused scan register bits are zero
    end // if of Scan register enable bit is 1
    else
    begin
      column_position = (Y_adr + (((bit_index * 1) + 2) * 4));
    end // else of if enable bit is 1
  end // if of bit is on right side
  else
  begin
    if (scan_reg[8] === 1'b1)
    begin
      if (scan_reg[1:0] === 2'b0)
      begin
        if ({scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 6'b100101)
        begin
          if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
          begin
          $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
          end
          left_col_out_range = 1'b1;
        end // if of {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 6'b100101
        else
        begin
          blk_left = (bit_index * 1) + (Y_adr/4);
          if (blk_left > {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]})
          begin
            column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
          end // if of blk_left > {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
          else
          begin
            column_position = (Y_adr + ((bit_index * 1) * 4));
          end // else of if blk_left > {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
        end // else of if {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 6'b100101
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR:INVALID ADDRESS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        left_col_out_range = 1'b1;
      end // else of is unused scan register bits are zero
    end // if of enable bit is enabled
    else
    begin
      column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
    end // else of if enable bit is enabled
  end // else of if bit is on left side
end
endtask
task write_mem_red ;
input [9 : 0] address;
input [74 : 0] data;
reg [7:0] X_adr;
reg [1:0] Y_adr;
reg [8:0] col_address;
reg [307:0] memrow;
reg [307:0] tmp_memrow;
begin
  X_adr = address[9:2];
  Y_adr = address[1:0];
  if (address < 1024)
  begin
    tmp_memrow = mem_core_array[X_adr];
    get_column_position (col_address, Y_adr, 0);
    get_column_position (col_address, Y_adr, 74);
    if (left_col_out_range !== 1'bx && right_col_out_range !== 1'bx)
    begin
//Left
      memrow[155:0] = tmp_memrow[155:0];
      if (!left_col_out_range)
      begin
        for (bit_cnt = 0; bit_cnt < 38; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = data[bit_cnt]; 
        end
      end
      else if (left_col_out_range)
      begin
        memrow[155:0] = {156{1'bx}};
      end
//Right
      memrow[307:156] = tmp_memrow[307:156];
      if (!right_col_out_range)
      begin
        for (bit_cnt = 38; bit_cnt < 75; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = data[bit_cnt]; 
        end
      end
      else if (right_col_out_range)
      begin
        memrow[307:156] = {152{1'bx}};
      end
    end
    else
    begin
      corrupt_all_loc(`True);
      memrow = 308'bX;
    end
    mem_core_array[X_adr] = memrow;
    corrupt_red(address);
  end // end of if address with in range
end
endtask

// Corrupt Redundant/Unused columns
task corrupt_red;
input [9 : 0] address;
reg[8:0] column_to_corrupt;
reg[307:0] memrow;
reg[6:0] bit_index;
reg [7:0] X_adr;
reg [1:0] Y_adr;
reg [5:0] faulty_blk_right;
reg [5:0] faulty_blk_left;
integer j;
begin
  X_adr = address[9:2];
  Y_adr = address[1:0];
  memrow = mem_core_array[X_adr];
  faulty_blk_right =  ({scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]});
  faulty_blk_left  =  ({scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]});
  if (right_col_out_range === 1'b0)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_right+40)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of enable bit is 1
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(39)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if enable bit is 1
  end
  else
  begin
    memrow[307:156] = {152{1'bx}};
  end
  if (left_col_out_range === 1'b0)
  begin
    if ( scan_reg[8] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_left+1)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of enable bit is 1 
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = j;
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if enable bit is 1 
  end
  else
  begin
    memrow[155:0] = {156{1'bx}};
  end
  mem_core_array[X_adr] = memrow;
end
endtask


//Calculate Row Address
task get_X_Y_adr;
output [7:0] X_adr;
output [1:0] Y_adr;
input [9:0] Adr;
begin
  X_adr = Adr[9:2];
  Y_adr = Adr[1:0];
end
endtask

task read_mem_red ;
output [74 : 0] memdata;
input [9 : 0] address;
reg [7:0] X_adr;
reg [1:0] Y_adr;
reg [8:0] col_address;
reg [307:0] memrow;
begin
  X_adr = address[9:2];
  Y_adr = address[1:0];
   if (faultinj_en == 1)
     memrow = mem_core_array[X_adr]^mem_fault_array_XOR[X_adr];
   else
   begin
     memrow = mem_core_array[X_adr] & mem_fault_array_sa0[X_adr];
     memrow = memrow | mem_fault_array_sa1[X_adr];
   end
   get_column_position (col_address, Y_adr, 0);
   if ( left_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 0; bit_cnt < 38; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[37:0] = {38{1'bx}};
   end
   get_column_position (col_address, Y_adr, 38);
   if ( right_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 38; bit_cnt < 75; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[74:38] = {37{1'bx}};
   end
end
endtask


task corrupt_qA;
begin
  QA_local_tmp = 75'bx;
end
endtask

task corrupt_qnbA;
begin
  QA_local_tmp <= 75'bx;
end
endtask

task corrupt_qB;
begin
  QB_local_tmp = 75'bx;
end
endtask

task corrupt_qnbB;
begin
  QB_local_tmp <= 75'bx;
end
endtask

// Corrupt Current Location
task corrupt_cur_loc;
input[9:0] Adr_to_corrupt;
integer cnt;
begin
  if (is_adr_Valid (Adr_to_corrupt))
  begin
    write_mem_red(Adr_to_corrupt,DataX);
  end // if of is_adr_Valid (Adr_to_corrupt)
  else
  begin
      corrupt_all_loc(`True);
  end // else of if is_adr_Valid (Adr_to_corrupt)
end
endtask

// Corrupt Entire memory; Do not corrupt entire memory if address is out of range
// during Write; For all other cases, if flag_range_ok is true, corrupt entire memory
task corrupt_all_loc;
input flag_range_ok;
integer row_index;
begin
  if( flag_range_ok == `True)
  begin
    for( row_index = 0; row_index < 256 ; row_index = row_index + 1)
    begin
      mem_core_array[row_index] = 308'bx;
    end // end of for row_index loop
  end // if of flag_range_ok is true
end
endtask


// Load memory with Data from a file(PreloadFilename)
task load_mem;
reg[ 74:0] mem_array [0:1023];
reg[ 74:0] mem_word;
reg[7:0] X_adr;
reg[1:0] Y_adr;
reg[307:0] mem_row;
integer adr_cnt;
integer start_adr_cnt;
integer num_adr_cnt;
integer i, status, status1;
reg [74:0] init_value;
begin
  if ($test$plusargs("init_mem_data"))
  begin
    status = $value$plusargs("init_mem_data=%d",init_value);
    if ($value$plusargs("init_mem_start_adr=%d",start_adr_cnt))
    begin
      num_adr_cnt = 1;
      if (init_value === 75'b1) begin
        init_value = {75{1'b1}};
      end
      status1 = $value$plusargs("num_of_locations=%d",num_adr_cnt);
      if (num_adr_cnt < 1) begin
        $display("<<VIRL_MEM_WARNING>> \"num_of_locations=%d\" is wrong, setting it to 1 instance=%m ",num_adr_cnt);
        num_adr_cnt = 1;
      end
      if ((start_adr_cnt + num_adr_cnt -1) > 1023) begin
        $display("<<VIRL_MEM_WARNING>> \"init_mem_start_adr=%d + num_of_locations=%d\" exceed maximum address (NW-1)=1023 instance=%m ",start_adr_cnt,num_adr_cnt);
      end
      if (^init_value === 1'bX)
      begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = adr_cnt;
        end
      end
      else begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = init_value;
        end
      end
    end
    else begin
      if (init_value === 75'b0 || init_value === 75'b1)
      begin
        for( adr_cnt = 0; adr_cnt < 1024 ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = {75{init_value[0]}};
        end
      end
      else
      begin
        if (^init_value !== 1'bX)
        begin
          for( adr_cnt = 0; adr_cnt < 1024 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = init_value;
          end
        end
        else
        begin
          i = 0;
          for( adr_cnt = 0; adr_cnt < 1024 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = i;
            i = i + 1;
            if (i > 75'b111111111111111111111111111111111111111111111111111111111111111111111111111) i = 0;
          end
        end
      end
    end
  end
  else
  begin
    $readmemh(PreloadFilename, mem_array);
  end
  for( adr_cnt = 0; adr_cnt < 1024 ; adr_cnt = adr_cnt + 1)
  begin
    mem_word = mem_array[adr_cnt];
    get_X_Y_adr(X_adr, Y_adr, adr_cnt);
    mem_row = mem_core_array[X_adr];
    write_mem_red(adr_cnt,mem_word);
    if (!mes_all_valid )
    begin
      mes_all_valid = 1'b1;
    end // if of mes_all_valid is not true
  end // end of for adr_cnt loop
end
endtask
// Store the memory contents into array mem_core_array_read (NWxNB)
task store_mem;
reg[ 74:0] mem_word;
integer adr_cnt;
begin
  for( adr_cnt = 0; adr_cnt < 1024 ; adr_cnt = adr_cnt + 1)
  begin
    read_mem_red(mem_word,adr_cnt);
    mem_core_array_read[adr_cnt] = mem_word;
  end // end of for adr_cnt loop
end
endtask

        

// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok} ) // only 1 and 0
    3'b111   : ;                                                // everything ok!!!
    3'b101,
    3'b100   : corrupt_cur_loc(ADRAlatched);          // WE is unstable
    3'b110   : if (WEAlatched !== 1'b0)
                 corrupt_cur_loc(ADRAlatched);         // Data is unstable
    3'b000,
    3'b001   : corrupt_all_loc(flaga_range_ok);            // ADR and WE unstable
    3'b010,
    3'b011   : corrupt_all_loc(flaga_range_ok);    // ADR unstable, WE stable
  endcase
 end
endtask // end of task checkSanityOnAport

// PORT A FUNCTIONALITY (Handle violation behavior)

reg INTERNAL_RESET; // For Internally resetting the memory(negedge of rscrst)

initial
begin : reinit_uut_blkA
 if(($test$plusargs("upf_sim"))) 
  #0.001;
  left_col_out_range = 1'b0;
  right_col_out_range = 1'b0;
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
  diff_me_tcha = 1'b0;
  diff_me_tcca = 1'b0;
  flaga_viol = `False;
  flaga_clk_valid = `True;
  flaga_shift_ok = `True;
  flaga_clear_scan_reg = `False;
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_dont_reinit *)
`endif
initial 
begin
  QA_local_tmp <= 75'bx;
  RST_tri = 1'b0;
  RST_check = 1'b0;
  mes_all_valid = 1'b0;
   disp_RSCLK_msg = 1'b1;
   disp_LS_msg = 1'b1;
  `ifdef VIRAGE_IGNORE_RESET
  #1 INTERNAL_RESET = 1'b1;
  `endif // endif of VIRAGE_IGNORE_RESET
end // end of initial block

// Perform Sanity Check on Port B, Corrupt memory if required

task checkSanityOnBport;
begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flagb_adr_ok, flagb_we_ok, flagb_d_ok} ) // only 1 and 0
    3'b111   : ;                                                // everything ok!!!
    3'b101,
    3'b100   : corrupt_cur_loc(ADRBlatched);          // WE is unstable
    3'b110   : if (WEBlatched !== 1'b0)
                 corrupt_cur_loc(ADRBlatched);         // Data is unstable
    3'b000,
    3'b001   : corrupt_all_loc(flagb_range_ok);            // ADR and WE unstable
    3'b010,
    3'b011   : corrupt_all_loc(flagb_range_ok);    // ADR unstable, WE stable
  endcase
 end
endtask // end of task checkSanityOnBport

// PORT B FUNCTIONALITY (Handle violation behavior)


initial
begin : reinit_uut_blkB
 if(($test$plusargs("upf_sim"))) 
  #0.001;
  flagb_adr_ok  = `True;
  flagb_range_ok = `True;
  flagb_we_ok   = `True;
  flagb_d_ok    = `True;
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
  diff_me_tchb = 1'b0;
  diff_me_tccb = 1'b0;
  flagb_viol = `False;
  flagb_clk_valid = `True;
end

initial 
begin
  QB_local_tmp <= 75'bx;
end // end of initial block

// For Zerohold of ADRA pin
always @( negedge CLKA or ADRA )
begin : blk_addrhold_0
if ( CLKA == 1'b0 )
  begin
    ADRA_old <= ADRA;
  end // if of CLKA = 0
end // end of always block blk_addrhold_0
// For Zerohold of DA pin
always @( negedge CLKA or DA )
begin : blk_dihold_0
if ( CLKA == 1'b0 )
  begin
    DA_old <= DA;
  end // if of CLKA = 0
end // end of always block blk_dihold_0
// For Zerohold of WEA pin
always @( negedge CLKA or WEA )
begin : blk_wehold_0
if ( CLKA == 1'b0 )
  begin
    WEA_old <= WEA;
  end // if of CLKA = 0
end // end of always block blk_wehold_0
// For Zerohold of MEA pin
always @( negedge CLKA or MEA or LS  )
begin : blk_mehold_0
if ( CLKA == 1'b0 )
  begin
    if ( (LS === 1'b1 && MEA !== 1'bx))
      MEA_old <= 1'b0;
    else
      MEA_old <= MEA;
  end // if of CLKA = 0
end // end of always block blk_mehold_0
// For Zerohold of TEST_RNMA pin
always @( negedge CLKA or TEST_RNMA )
begin : blk_test_rnmhold_0
if ( CLKA == 1'b0 )
  begin
    TEST_RNMA_old <= TEST_RNMA;
  end // if of CLKA = 0
end // end of always block blk_test_rnmhold_0
// For Zerohold of Test1 pin
always @( negedge CLKA or TEST1A )
begin : blk_test1hold_0
  if ( CLKA == 1'b0 )
  begin
    TEST1A_old <= TEST1A;
  end // if of CLKA = 0
end // end of always block blk_test1hold_0


reg LSA_old;
always @( negedge CLKA or LS )
begin : blk_lshold_0
  if (CLKA == 1'b0)
  begin
    LSA_old <= LS;
  end
end // end of always block blk_lshold_0
// For Zerohold of ADRB pin
always @( negedge CLKB or ADRB )
begin : blk_addrhold_1
if ( CLKB == 1'b0 )
  begin
    ADRB_old <= ADRB;
  end // if of CLKB = 0
end // end of always block blk_addrhold_1
// For Zerohold of DB pin
always @( negedge CLKB or DB )
begin : blk_dihold_1
if ( CLKB == 1'b0 )
  begin
    DB_old <= DB;
  end // if of CLKB = 0
end // end of always block blk_dihold_1
// For Zerohold of WEB pin
always @( negedge CLKB or WEB )
begin : blk_wehold_1
if ( CLKB == 1'b0 )
  begin
    WEB_old <= WEB;
  end // if of CLKB = 0
end // end of always block blk_wehold_1
// For Zerohold of MEB pin
always @( negedge CLKB or MEB or LS  )
begin : blk_mehold_1
if ( CLKB == 1'b0 )
  begin
    if ( (LS === 1'b1 && MEB !== 1'bx))
      MEB_old <= 1'b0;
    else
      MEB_old <= MEB;
  end // if of CLKB = 0
end // end of always block blk_mehold_1
// For Zerohold of TEST_RNMB pin
always @( negedge CLKB or TEST_RNMB )
begin : blk_test_rnmhold_1
if ( CLKB == 1'b0 )
  begin
    TEST_RNMB_old <= TEST_RNMB;
  end // if of CLKB = 0
end // end of always block blk_test_rnmhold_1
// For Zerohold of Test1 pin
always @( negedge CLKB or TEST1B )
begin : blk_test1hold_1
  if ( CLKB == 1'b0 )
  begin
    TEST1B_old <= TEST1B;
  end // if of CLKB = 0
end // end of always block blk_test1hold_1


reg LSB_old;
always @( negedge CLKB or LS )
begin : blk_lshold_1
  if (CLKB == 1'b0)
  begin
    LSB_old <= LS;
  end
end // end of always block blk_lshold_1

`ifdef VIRAGE_FAST_VERILOG
`else
// PORT A WE violation
always @(notif_wea)           
begin : blk_notif_we_0
  if ((RSCRST === 1'b0 ))
  begin
    if ( WEA_old === 1'b0)
    begin
      flaga_viol = `True;
    end // if of WEA_old = 0
    flaga_we_ok = `False;
    checkSanityOnAport;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    corrupt_qnbA;
  end // if of rscrst = 0
end // end of always block blk_notif_we_0

// PORT A CLKA violation
always @(notif_clka)
begin : blk_notif_clk_0
if (RSCRST === 1'b0  && (diff_me_tcha === 1'b1 || MEA !== 1'b0))
begin
  flaga_clk_valid = `False;
  MEB_chk = MEB_old;
  if ( EVENT_TCQ_B == 1'b1 && MEB_chk === 1'b1 )
  begin
    disable blk_readout_1.OUTPUT_b;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end 
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
  checkSanityOnAport;
  flaga_read_ok = `False;     // irrespective of WE
  -> ev_read_out_a_port;
  end // if of rscrst = 0 and dftmask = 0
end // end of always block blk_notif_clk_0

// PORT A CLKA violation
always @(notif_clkap)
begin : blk_notif_clkp_0
if (RSCRST === 1'b0  && (diff_me_tcca === 1'b1 || MEA !== 1'b0))
begin
  flaga_clk_valid = `False;
  MEB_chk = MEB_old;
  if ( EVENT_TCQ_B == 1'b1 && MEB_chk === 1'b1 )
  begin
    disable blk_readout_1.OUTPUT_b;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end 
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
  checkSanityOnAport;
  flaga_read_ok = `False;     // irrespective of WE
  -> ev_read_out_a_port;
  end // if of rscrst = 0 and dftmask = 0
end // end of always block blk_notif_clk_0

// PORT A ME violation
always @(notif_mea)           
begin : blk_notif_me_0
if (RSCRST === 1'b0 )
begin
  if (((WEAlatched === 1'b1)) && (EVENT_TCQ_B == 1'b1 || (tcqb_time == $realtime)))
  begin
    disable blk_readout_1.OUTPUT_b;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end // if of write
    flaga_viol = `True;
    flaga_read_ok = `False;                           
    -> ev_read_out_a_port;
    flaga_adr_ok = `False;
    checkSanityOnAport;
end // if of RSCRST = 0
end // end of always block blk_notif_me_0

// PORT A ADR violation
always @(notif_adra)     
begin : blk_notif_addr_0
if (RSCRST === 1'b0 )
begin
   MEB_chk = MEB_old;
   if (MEB_chk === 1'b1 && ((WEAlatched === 1'b1)) && (EVENT_TCQ_B == 1'b1 || (tcqb_time == $realtime)))
    begin
      disable blk_readout_1.OUTPUT_b;
      flagb_read_ok = `False;
      -> ev_read_out_b_port;
    end // if of write
      flaga_viol = `True;
      flaga_read_ok = `False;                         
      -> ev_read_out_a_port;
      flaga_adr_ok = `False;
      corrupt_all_loc(`True);
end // if of RSCRST = 0 
end // end of always block blk_notif_addr_0

// PORT A D violation
genvar nk;
generate for (nk=0; nk<75; nk=nk+1)
begin : ENDA_blk

reg [74:0]  tmp_DA;

always @(notif_da[nk])
begin
if (RSCRST === 1'b0 )
begin
    read_mem_red(memdata,ADRA_old);
    tmp_DA = memdata;
    tmp_DA[nk] = 1'bX;
    write_mem_red(ADRA_old,tmp_DA);
end // if of RSCRST = 0 
end // end of always block blk_notif_di_0
end 
endgenerate

//PORT A TEST1A violation
always @(notif_test1a)   
begin : blk_notif_test1_0
//  MEA_chk = MEA_old;
if (RSCRST === 1'b0)
begin
  if ( WEAlatched === 1'b0 )
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  else if ( WEAlatched === 1'b1 )
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end
end // if of RSCRST = 0
end // end of always block blk_notif_test1_0

// PORT A TEST_RNMA violation
always @(notif_test_rnma)     
begin : blk_notif_test_rnm_0
if (RSCRST === 1'b0 )
begin
  if (WEA_old === 1'b0)
  begin
    flaga_read_ok = `False;                         
    -> ev_read_out_a_port;
  end
  flaga_adr_ok = `False;
  corrupt_all_loc(`True);
end // if of RSCRST = 0 
end // end of always block blk_notif_test_rnm_0

always @(notif_ls)
begin
  corrupt_all_loc(`True);
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end

always @(notif_bc1 or notif_bc2)
begin : blk_notif_bc1bc2_0
  if (RSCRST === 1'b0)
  begin
  flaga_we_ok  = `False;
  corrupt_all_loc(`True);
  end // if of RSCRST = 0
end  // blk_notif_bc1bc2_0

//PORT A RMA violation
always @(notif_rma)       
begin : blk_notif_rm_0
if (RSCRST === 1'b0)
begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // if of RSCRST = 0
end // end of always block blk_notif_rm_0

//PORT A RME violation
always @(notif_rmea)  
begin : blk_notif_rmen_0
if (RSCRST === 1'b0)
begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // if of RSCRST = 0
end // end of always block blk_notif_rmen_0
`endif // endif of VIRAGE_FAST_VERILOG

// Simultaneous Clock Handling
`ifdef VIRAGE_FAST_VERILOG
always @(sim_check_A)
begin : blk_simultclock_0
`else
always @(notif_clka_CLKB_rise_rise_rec)
begin : blk_simultclock_0
`endif // endif of VIRAGE_FAST_VERILOG
      if ( WEAlatched !== 1'b0 && WEB_old  !== 1'b0 )
      begin
        flaga_d_ok = `False;
        flagb_d_ok = `False;
  if(($test$plusargs("upf_sim"))) 
    #0.001;
        write_mem_red(ADRAlatched,(((DAlatched ^ DB_old) & 75'bx) ^ DAlatched));
      end // if write enable is not disabled for both ports
      else if ( WEAlatched !== 1'b0)
      begin
        #0;
        flagb_viol = `True;
        flagb_read_ok = `False;
       if ( TEST1Blatched === 1'b0)
        -> ev_read_out_b_port;
      end // else if of WEAlatched != 0
      else 
      begin
        flaga_read_ok = `False;
       if ( TEST1Alatched === 1'b0)
        -> ev_read_out_a_port;
      end // else if of WEB_old  != 0
end // end of always block blk_simultclock_0


`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
always @(notif_rscrst_CLKA_rise_fall_rec)
begin : rscrst_CLKA_rise_fall_rec
  if (WEA_old == 1'b0 && MEA_old == 1'b1)
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  if (WEA_old == 1'b1 && MEA_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WEA_old = 1
end // end of always block rscrst_CLKA_rise_fall_rec 

always @(notif_rsclk_CLKA_rise_rise_rec)
begin : rsclk_CLKA_rise_rise_rec
  flaga_viol = `True;
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
  flaga_adr_ok = `False;
  checkSanityOnAport;
end // end of always block rscrst_CLKA_rise_fall_rec 

always @(notif_rscen_CLKA_rise_fall_rec)
begin : rscen_CLKA_rise_fall_rec
  if (WEA_old == 1'b0 && MEA_old == 1'b1)
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  if (WEA_old == 1'b1 && MEA_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WEA_old = 1
end // end of always block rsclk_CLKA_rise_rise_rec 

always @(notif_rscrst_RSCLK_rise_fall_rec)
begin : rscrst_RSCLK_rise_fall_rec
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_rsclk_rise_fall_rec

always @(notif_rsclk or notif_rscen or notif_fiso)
begin : blk_notif_rsclk_0
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rsclk_0

always @(notif_rscrst)
begin : blk_notif_rscrst_0
  flaga_clear_scan_reg = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_0

// RSCIN violation
always @(notif_rscin)
begin : blk_notif_rscin_0
  flaga_shift_ok = `False;
  scan_reg[0] = 1'bx;
end // end of always block blk_notif_rscen_0


`endif // endif of VIRAGE_FAST_VERILOG

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCEN)
begin : blk_rscen_0
  flaga_shift_ok = `True;
  disp_RSCLK_msg = 1'b1;
end // end of always block blk_rscen_0


`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCRST or posedge INTERNAL_RESET)
begin : blk_posrscrst_0
  if ( RSCRST === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
   #0.0;
   `ifdef VIRAGE_IGNORE_RESET
   if (RSCRST === 1'b1 || INTERNAL_RESET === 1'b1)
   `else 
   if (RSCRST === 1'b1)
   `endif
   begin
    scan_reg = 18'b0;
    RSCOUT_local = scan_reg[17];
    flaga_clear_scan_reg = `True;
    RST_check = 1'b0;
    if (INTERNAL_RESET === 1'b1)
    begin
      #1 INTERNAL_RESET = 1'b0;
    end
   end
  end // else of if RSCRST = X
end // end of always block blk_posrscrst_0

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
// Functionality of RSCRST
always @(negedge RSCRST or negedge INTERNAL_RESET)
begin : blk_negrscrst_0
  #0;
  if ( RSCRST === 1'bx)
  begin
    flaga_clear_scan_reg = `False;
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
    if ( RST_check == 1'b0 && $realtime != 0)
    begin
      RST_check = 1'b1;
      RST_tri = 1'b1;
      #0;
      if ( flaga_clear_scan_reg )
      begin:clear_scan_reg
        scan_reg = 18'b0 ;
        RSCOUT_local = scan_reg[17];
      end // if of flaga_clear_scan_reg is true
      `ifdef INITIALIZE_MEM
      // to read initialization files, add to verilog model `define INITIALIZE_MEM
      // or use command line option +define+INITIALIZE_MEM
        load_mem;        // Read initial data for memory if any preload file exists.
      `endif
    end // if of RST_check = 0 and $realtime != 0
    flaga_clear_scan_reg = `False;
  end // else of if RSCRST = X
end // end of always block blk_negrscrst_0
// reset for next cycle

always @(negedge CLKA)
begin : blk_intnegclock_0
  if ( CLKA !== 1'bx )
  begin
    #0.001;
    flaga_range_ok  = `True;
    flaga_read_ok = `True;
    flaga_rm_ok = `True;
    flaga_clk_valid = `True;
    flaga_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
    left_col_out_range = 1'b0;
    right_col_out_range = 1'b0;
    flaga_viol    = `False;
  end // if of CLKA != X
  else
  begin
    if (MEA !== 1'b0)
    begin
    flaga_clk_valid = `False;
    QA_local_tmp = 75'bx;
    corrupt_all_loc(`True);
    report_unknown("CLKA");
    end
  end // else of if CLKA != X
end // end of always block blk_intnegclock_0

// PORT A FUNCTIONALITY 
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO)
begin : blk_fiso_0
  if (FISO === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    RSCOUT = scan_reg[17];
    report_unknown("FISO");
  end // else if of FISO = X 
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCLK)
begin : blk_negtestrsclock_0
  if (RSCLK !== 1'bx)
  begin
    flaga_shift_ok = `True;
  end
  else
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
end

integer j;
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCLK)
begin : blk_postestrsclock_0
  RSCENlatched = RSCEN;
  #0;
  if (RSCLK === 1'bx && RSCENlatched)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
  if ( RSCENlatched === 1'b1 && RSCRST === 1'b0)
  begin:do_shift
    #0;
    if ( RSCLK !== 1'bx )
    begin
      if ( flaga_shift_ok )
      begin
        scan_reg = scan_reg << 1;
        RSCOUT_local = scan_reg[17];
        scan_reg[0] = RSCIN;
        flaga_shift_ok = `False;
        if ( RSCIN === 1'bx )
        begin
          report_unknown("RSCIN");
        end // if of RSCIN = X
      end // if of flaga_shift_ok is true
    end // if of flaga_clk_valid is true 
  end // if of RSCEN = 1 and RSCRST = 0 
  else if ( RSCEN === 1'bx || RSCRST === 1'bx )
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    if ( RSCEN === 1'bx )
    begin
      report_unknown("RSCEN");
    end // if of RSCEN = X
  end // else if of RSCEN = X or RSCRST = X
end


always @(posedge CLKA)
begin : blk_intposclock_0
  CLKA_T = $realtime;
  MEAlatched = MEA_old;
  WEAlatched = WEA_old;
  TEST1Alatched = TEST1A_old;
  TEST_RNMAlatched = TEST_RNMA_old;
  ADRAlatched = ADRA_old;
  DAlatched = DA_old;
 `ifdef VIRAGE_FAST_VERILOG
   if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid && RSCEN === 1'b1 && RSCRST === 1'b0 && disp_RSCLK_msg === 1'b1)
   begin
     $display("\n%m<<VIRL_MEM_WARNING:For proper memory write/read operation ensure RSCLK is not running>>(time %0t)\n", $time);
     disp_RSCLK_msg = 1'b0;
   end
 `endif // endif of VIRAGE_FAST_VERILOG
  if ((LSA_old === 1'b1 && MEAlatched !== 1'bx) || TEST_RNMAlatched === 1'b1)
  begin
    MEAlatched = 1'b0;
  end
  if (LSA_old === 1'bX && MEAlatched !== 1'b0)
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    QA_local_tmp = 75'bx;
  end
  else
  begin
    if (^(ADRAlatched) === 1'bx && MEAlatched !== 1'b0)
    begin
      report_unknown("ADRA");
      if ( WEAlatched === 1'b1 )
      begin
        flaga_viol = `True;
      end // if of WEAlatched = 1
      else
      begin
        flaga_read_ok = `False;
      end
      `ifdef virage_ignore_read_addx
      if ((WEAlatched === 1'b1))
      begin
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      end // if of write
      `else
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      `endif // endif of virage_ignore_read_addx is true
      -> ev_RST_out_a_port;
    end // if of (^ADRAlatched) is 1'bx and MEAlatched != 0
    else if((ADRAlatched > 10'b1111111111) && (MEAlatched === 1'b1) && (WEAlatched === 1'b1) )
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
      begin
        $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE: 0 to 1023\n", $time);
      end
      flaga_range_ok = `False;
    end // if of ADRAlatched out of range with MEAlatched = 1
    if (!flaga_clk_valid) 
    begin
      QA_local_tmp = 75'bx;
    end // if of flaga_clk_valid is NOT true
    else if ( CLKA === 1'bx )
    begin
    #0.001; 
      if (diff_me_tcha === 1'b1 || MEA !== 1'b0)
      begin
      QA_local_tmp = 75'bx;
      corrupt_all_loc(flaga_range_ok);
      report_unknown("CLKA");
      end // end of if diff_me_tch
    end // if of CLKA = X
    else if ((BC1 === 1'bX || BC2 === 1'bX) && WEAlatched !== 1'b0)
    begin
      if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
      begin
        //$display("\n%m <<VIRL_MEM_WARNING: BC1 or BC2 is unknown>>(time %0t)\n\n", $time);
      end
    end
    else if (RSCRST === 1'b1)
    begin
      if (MEAlatched === 1'b1 && ((WEAlatched === 1'b0)))
      begin
        corrupt_qA;
      end // if of MEAlatched = 1 and read
      if (MEAlatched === 1'b1 && ((WEAlatched === 1'b1)))
      begin
        corrupt_all_loc(flaga_range_ok);
      end // if of MEAlatched = 1 and write
    end
    else
    begin
      -> ev_RST_out_a_port;
    end // else of if CLKA = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_0
// PORT A READ-OUT

always @(ev_read_out_a_port)
begin : blk_readout_0
  #0;                // let CLOCK and NOTIFIER module execute first
  if (^RMA === 1'bx)
  begin
    flaga_rm_ok = `False;
  end // if of RMA is not valid
  if (flaga_adr_ok && flaga_read_ok && flaga_rm_ok)
  begin : OUTPUT_a
    if (WEAlatched === 1'b0)
    begin
      if (ADRAlatched <= 10'b1111111111)
      begin
          
         if (RSCRST !== 1'b1)
         begin
         read_mem_red(memdata,ADRAlatched);
         QA_local_tmp = memdata;
        end // if RSCRST
      end // if of ADRAlatched <= 10'b1111111111
    end // if of WEAlatched = 0
  end //if of flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  else
  begin
    if (flaga_viol)
    begin
      if ((WEAlatched === 1'b0))
      begin
        corrupt_qA;
        flaga_read_ok = `True;
      end  // if of read
    end // if of flaga_viol is true
    else
    begin
      corrupt_qA;
      flaga_read_ok = `True;
    end // else of if flaga_viol is true
  end // else of if flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
end // end of always block blk_readout_0

// Handle Read/Write
always @(ev_RST_out_a_port)
begin : blk_readwrite_0
  if ( RST_tri === 1'b0 )
  begin
    QA_local_tmp = 75'bx;
  end // if RST_tri = 0
  else 
  begin
    if (MEAlatched !== 1'b0 && !flaga_viol)
    begin
      if (WEAlatched === 1'bx)
      begin
        flaga_we_ok = `False;
        flaga_read_ok = `False;
        report_unknown("WEA");
      end // if of WEAlatched = X
      if ((^DAlatched === 1'bx))
      begin
        if (DAlatched === 75'bx)
        begin
          flaga_d_ok  = `False;
        end
        if (WEAlatched !== 1'b0)
        begin
          report_unknown("DA");
        end
      end
          if (TEST1Alatched === 1'bx)
          begin
            report_unknown("TEST1A");
            if ( WEAlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRAlatched);                             
            end // if of WEAlatched = 1
            else
            begin
              corrupt_qA;
            end // else of if WEAlatched = 1
          end // if TEST1Alatched = X
          else if (TEST_RNMAlatched === 1'bx)
          begin
            report_unknown("TEST_RNMA");
            if (WEAlatched !== 1'b1)
            begin
              corrupt_qA;
            end // if of WEAlatched != 1
            corrupt_all_loc(`True);
          end // else if TEST_RNMAlatched = X
          else
          begin
                if (^RMA === 1'bx)
                begin
                  if ( RMEA !== 1'bx )
                    report_unknown("RMA");
                  else
                    report_unknown("RMEA");
                  if ( WEAlatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRAlatched);
                  end // if of WEAlatched = 1
                  else
                  begin
                    corrupt_qA;
                  end // else of if WEAlatched = 1
                end // if of RMA = X 
                else
                begin
                  if (MEAlatched !== 1'b1)
                  begin
                    flaga_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MEAlatched != 1 

                  if(ADRAlatched > 10'b1111111111) 
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE:0 to 1023\n", $time);
                    end
                    flaga_range_ok = `False;
                    if (WEAlatched === 1'b0)
                    begin
                      flaga_read_ok = `False;
                    end // if of flaga_read_ok
                  end // if of ADRAlatched out of range with MEAlatched = 1
                  if ( MEAlatched === 1'bx )
                  begin
                    report_unknown("MEA");
                    `ifdef virage_ignore_read_addx
                    if (WEAlatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WEAlatched = 1 
                    else
                    begin
                      corrupt_qA;
                    end // else of if WEAlatched = 1
                    `else
                    if (WEAlatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WEAlatched = 1
                    else
                    begin
                      corrupt_qA;
                      corrupt_all_loc(flaga_range_ok);
                    end // else of if WEAlatched = 1
                    `endif
                  end // if of MEAlatched = X
                  else
                  begin
                    if (RSCRST !== 1'b1) 
                    begin
                      if (flaga_range_ok && flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
                      begin
                        
                        write_mem_red(ADRAlatched,DAlatched);
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnAport;
                      end // else of if write
                    end // if of RSCRST
                  if (TEST1Alatched === 1'b1)
                  begin
                     if (WEAlatched === 1'b0)
                     begin
                       flaga_read_ok = `False;
                       -> ev_read_out_a_port;
                       @(negedge CLKA);
                     end
                     if (TEST_RNMA === 1'b0)
                     -> ev_read_out_a_port;
                  end // if of TEST1Alatched = 1
                  else 
                  begin
                    -> ev_read_out_a_port;
                  end // else of if TEST1Alatched = 1
                  end // else of if MEAlatched = X
                end // else of if RMA = X
          end // else of if TEST1Alatched = X
    end // if of MEAlatched != 0 & flaga_viol = 0
  end // else of if RST_tri = 0
end // end of always block blk_readwrite_0




assign QA_temp = QA_local_tmp;

// Final Output Update 

always @( QA_temp )
begin : blk_output_0
  if ( RST_check == 1'b1 )
  begin
    `ifdef VIRAGE_FAST_VERILOG
    #(O_delay) QA <= QA_temp;
    `else
    QA <= 75'bx;
    #0.001;
    QA <= QA_temp;
    `endif // endif of VIRAGE_FAST_VERILOG
  end
  else
    QA <= 75'bx;
end // end of always block blk_output_0

assign RSCOUT_tmp = RSCOUT_local;

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @ (RSCOUT_tmp)
begin: blk_RSCOUT
  RSCOUT <= RSCOUT_tmp;
end


// Display the warning when TEST1A is 1.
always @ (TEST1A)
begin : blk_test1_0
  if(($test$plusargs("cpf_sim"))) 
    #0.001; 
  if (CLKA === 1'b1 && MEAlatched === 1'b1)
  begin
    corrupt_qA;
    flaga_read_ok = `False;
  end
  if ( TEST1A == 1'b1 && (LS === 1'b0))
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0,but input value is TEST1A=1'b1>>(time %0t)\n\n", $time);
    end
  end // if TEST1A = 1 
end // end of always block blk_test1_0
always @ (TEST_RNMA)
begin : blk_test_rnm_0
  if (CLKA === 1'b1 && MEA_old === 1'b1 && TEST1Alatched === 1'b1)
  begin
    if (WEAlatched === 1'b0)
    begin
      flaga_read_ok = `False;
      corrupt_qA;
    end
    if (WEAlatched === 1'b1)
    begin
      flaga_d_ok = `False;
      checkSanityOnAport;
    end
  end
end // end of always block blk_test_rnm_0


`ifdef VIRAGE_FAST_VERILOG
`else
// PORT B WE violation
always @(notif_web)           
begin : blk_notif_we_1
  if ((RSCRST === 1'b0 ))
  begin
    if ( WEB_old === 1'b0)
    begin
      flagb_viol = `True;
    end // if of WEB_old = 0
    flagb_we_ok = `False;
    checkSanityOnBport;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    corrupt_qnbB;
  end // if of rscrst = 0
end // end of always block blk_notif_we_1

// PORT B CLKB violation
always @(notif_clkb)
begin : blk_notif_clk_1
if (RSCRST === 1'b0  && (diff_me_tchb === 1'b1 || MEB !== 1'b0))
begin
  flagb_clk_valid = `False;
  MEA_chk = MEA_old;
  if ( EVENT_TCQ_A == 1'b1 && MEA_chk === 1'b1 )
  begin
    disable blk_readout_0.OUTPUT_a;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end 
  flagb_adr_ok = `False;
  flagb_we_ok  = `False;
  checkSanityOnBport;
  flagb_read_ok = `False;     // irrespective of WE
  -> ev_read_out_b_port;
  end // if of rscrst = 0 and dftmask = 0
end // end of always block blk_notif_clk_1

// PORT B CLKB violation
always @(notif_clkbp)
begin : blk_notif_clkp_1
if (RSCRST === 1'b0  && (diff_me_tccb === 1'b1 || MEB !== 1'b0))
begin
  flagb_clk_valid = `False;
  MEA_chk = MEA_old;
  if ( EVENT_TCQ_A == 1'b1 && MEA_chk === 1'b1 )
  begin
    disable blk_readout_0.OUTPUT_a;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end 
  flagb_adr_ok = `False;
  flagb_we_ok  = `False;
  checkSanityOnBport;
  flagb_read_ok = `False;     // irrespective of WE
  -> ev_read_out_b_port;
  end // if of rscrst = 0 and dftmask = 0
end // end of always block blk_notif_clk_1

// PORT B ME violation
always @(notif_meb)           
begin : blk_notif_me_1
if (RSCRST === 1'b0 )
begin
  if (((WEBlatched === 1'b1)) && (EVENT_TCQ_A == 1'b1 || (tcqa_time == $realtime)))
  begin
    disable blk_readout_0.OUTPUT_a;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end // if of write
    flagb_viol = `True;
    flagb_read_ok = `False;                           
    -> ev_read_out_b_port;
    flagb_adr_ok = `False;
    checkSanityOnBport;
end // if of RSCRST = 0
end // end of always block blk_notif_me_1

// PORT B ADR violation
always @(notif_adrb)     
begin : blk_notif_addr_1
if (RSCRST === 1'b0 )
begin
   MEA_chk = MEA_old;
   if (MEA_chk === 1'b1 && ((WEBlatched === 1'b1)) && (EVENT_TCQ_A == 1'b1 || (tcqa_time == $realtime)))
    begin
      disable blk_readout_0.OUTPUT_a;
      flaga_read_ok = `False;
      -> ev_read_out_a_port;
    end // if of write
      flagb_viol = `True;
      flagb_read_ok = `False;                         
      -> ev_read_out_b_port;
      flagb_adr_ok = `False;
      corrupt_all_loc(`True);
end // if of RSCRST = 0 
end // end of always block blk_notif_addr_1

// PORT B D violation
generate for (nk=0; nk<75; nk=nk+1)
begin : ENDB_blk

reg [74:0]  tmp_DB;

always @(notif_db[nk])
begin
if (RSCRST === 1'b0 )
begin
    read_mem_red(memdata,ADRB_old);
    tmp_DB = memdata;
    tmp_DB[nk] = 1'bX;
    write_mem_red(ADRB_old,tmp_DB);
end // if of RSCRST = 0 
end // end of always block blk_notif_di_1
end 
endgenerate

//PORT B TEST1B violation
always @(notif_test1b)   
begin : blk_notif_test1_1
//  MEB_chk = MEB_old;
if (RSCRST === 1'b0)
begin
  if ( WEBlatched === 1'b0 )
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end
  else if ( WEBlatched === 1'b1 )
  begin
    flagb_d_ok  = `False;
    checkSanityOnBport;
  end
end // if of RSCRST = 0
end // end of always block blk_notif_test1_1

// PORT B TEST_RNMB violation
always @(notif_test_rnmb)     
begin : blk_notif_test_rnm_1
if (RSCRST === 1'b0 )
begin
  if (WEB_old === 1'b0)
  begin
    flagb_read_ok = `False;                         
    -> ev_read_out_b_port;
  end
  flagb_adr_ok = `False;
  corrupt_all_loc(`True);
end // if of RSCRST = 0 
end // end of always block blk_notif_test_rnm_1

always @(notif_ls_b)
begin
  corrupt_all_loc(`True);
  flagb_read_ok = `False;
  -> ev_read_out_b_port;
end

always @(notif_bc1_b or notif_bc2_b)
begin : blk_notif_bc1bc2_1
  if (RSCRST === 1'b0)
  begin
  flagb_we_ok  = `False;
  corrupt_all_loc(`True);
  end // if of RSCRST = 0
end  // blk_notif_bc1bc2_1

//PORT B RMB violation
always @(notif_rmb)       
begin : blk_notif_rm_1
if (RSCRST === 1'b0)
begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok  = `False;
    checkSanityOnBport;
end // if of RSCRST = 0
end // end of always block blk_notif_rm_1

//PORT B RME violation
always @(notif_rmeb)  
begin : blk_notif_rmen_1
if (RSCRST === 1'b0)
begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flagb_d_ok  = `False;
    checkSanityOnBport;
end // if of RSCRST = 0
end // end of always block blk_notif_rmen_1
`endif // endif of VIRAGE_FAST_VERILOG

// Simultaneous Clock Handling
`ifdef VIRAGE_FAST_VERILOG
always @(sim_check_B)
begin : blk_simultclock_1
`else
always @(notif_clkb_CLKA_rise_rise_rec)
begin : blk_simultclock_1
`endif // endif of VIRAGE_FAST_VERILOG
      if ( WEBlatched !== 1'b0 && WEA_old  !== 1'b0 )
      begin
        flaga_d_ok = `False;
        flagb_d_ok = `False;
  if(($test$plusargs("upf_sim"))) 
    #0.001;
        write_mem_red(ADRBlatched,(((DBlatched ^ DA_old) & 75'bx) ^ DBlatched));
      end // if write enable is not disabled for both ports
      else if ( WEBlatched !== 1'b0)
      begin
        #0;
        flaga_viol = `True;
        flaga_read_ok = `False;
       if ( TEST1Alatched === 1'b0)
        -> ev_read_out_a_port;
      end // else if of WEBlatched != 0
      else 
      begin
        flagb_read_ok = `False;
       if ( TEST1Blatched === 1'b0)
        -> ev_read_out_b_port;
      end // else if of WEA_old  != 0
end // end of always block blk_simultclock_1


`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
always @(notif_rscrst_CLKB_rise_fall_rec)
begin : rscrst_CLKB_rise_fall_rec
  if (WEB_old == 1'b0 && MEB_old == 1'b1)
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end
  if (WEB_old == 1'b1 && MEB_old == 1'b1)
  begin
    flagb_adr_ok = `False;
    checkSanityOnBport;
  end // if of WEB_old = 1
end // end of always block rscrst_CLKB_rise_fall_rec 

always @(notif_rsclk_CLKB_rise_rise_rec)
begin : rsclk_CLKB_rise_rise_rec
  flagb_viol = `True;
  flagb_read_ok = `False;
  -> ev_read_out_b_port;
  flagb_adr_ok = `False;
  checkSanityOnBport;
end // end of always block rscrst_CLKB_rise_fall_rec 

always @(notif_rscen_CLKB_rise_fall_rec)
begin : rscen_CLKB_rise_fall_rec
  if (WEB_old == 1'b0 && MEB_old == 1'b1)
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end
  if (WEB_old == 1'b1 && MEB_old == 1'b1)
  begin
    flagb_adr_ok = `False;
    checkSanityOnBport;
  end // if of WEB_old = 1
end // end of always block rsclk_CLKB_rise_rise_rec 

`endif // endif of VIRAGE_FAST_VERILOG

// reset for next cycle

always @(negedge CLKB)
begin : blk_intnegclock_1
  if ( CLKB !== 1'bx )
  begin
    #0.001;
    flagb_range_ok  = `True;
    flagb_read_ok = `True;
    flagb_rm_ok = `True;
    flagb_clk_valid = `True;
    flagb_adr_ok  = `True;
    flagb_we_ok   = `True;
    flagb_d_ok    = `True;
    left_col_out_range = 1'b0;
    right_col_out_range = 1'b0;
    flagb_viol    = `False;
  end // if of CLKB != X
  else
  begin
    if (MEB !== 1'b0)
    begin
    flagb_clk_valid = `False;
    QB_local_tmp = 75'bx;
    corrupt_all_loc(`True);
    report_unknown("CLKB");
    end
  end // else of if CLKB != X
end // end of always block blk_intnegclock_1

// PORT B FUNCTIONALITY 


always @(posedge CLKB)
begin : blk_intposclock_1
  CLKB_T = $realtime;
  MEBlatched = MEB_old;
  WEBlatched = WEB_old;
  TEST1Blatched = TEST1B_old;
  TEST_RNMBlatched = TEST_RNMB_old;
  ADRBlatched = ADRB_old;
  DBlatched = DB_old;
 `ifdef VIRAGE_FAST_VERILOG
   if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid && RSCEN === 1'b1 && RSCRST === 1'b0 && disp_RSCLK_msg === 1'b1)
   begin
     $display("\n%m<<VIRL_MEM_WARNING:For proper memory write/read operation ensure RSCLK is not running>>(time %0t)\n", $time);
     disp_RSCLK_msg = 1'b0;
   end
 `endif // endif of VIRAGE_FAST_VERILOG
  if ((LSB_old === 1'b1 && MEBlatched !== 1'bx) || TEST_RNMBlatched === 1'b1)
  begin
    MEBlatched = 1'b0;
  end
  if (LSB_old === 1'bX && MEBlatched !== 1'b0)
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    QB_local_tmp = 75'bx;
  end
  else
  begin
    if (^(ADRBlatched) === 1'bx && MEBlatched !== 1'b0)
    begin
      report_unknown("ADRB");
      if ( WEBlatched === 1'b1 )
      begin
        flagb_viol = `True;
      end // if of WEBlatched = 1
      else
      begin
        flagb_read_ok = `False;
      end
      `ifdef virage_ignore_read_addx
      if ((WEBlatched === 1'b1))
      begin
        flagb_adr_ok = `False;
        corrupt_all_loc(flagb_range_ok);
      end // if of write
      `else
        flagb_adr_ok = `False;
        corrupt_all_loc(flagb_range_ok);
      `endif // endif of virage_ignore_read_addx is true
      -> ev_RST_out_b_port;
    end // if of (^ADRBlatched) is 1'bx and MEBlatched != 0
    else if((ADRBlatched > 10'b1111111111) && (MEBlatched === 1'b1) && (WEBlatched === 1'b1) )
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
      begin
        $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE: 0 to 1023\n", $time);
      end
      flagb_range_ok = `False;
    end // if of ADRBlatched out of range with MEBlatched = 1
    if (!flagb_clk_valid) 
    begin
      QB_local_tmp = 75'bx;
    end // if of flagb_clk_valid is NOT true
    else if ( CLKB === 1'bx )
    begin
    #0.001; 
      if (diff_me_tchb === 1'b1 || MEB !== 1'b0)
      begin
      QB_local_tmp = 75'bx;
      corrupt_all_loc(flagb_range_ok);
      report_unknown("CLKB");
      end // end of if diff_me_tch
    end // if of CLKB = X
    else if ((BC1 === 1'bX || BC2 === 1'bX) && WEBlatched !== 1'b0)
    begin
      if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
      begin
        //$display("\n%m <<VIRL_MEM_WARNING: BC1 or BC2 is unknown>>(time %0t)\n\n", $time);
      end
    end
    else if (RSCRST === 1'b1)
    begin
      if (MEBlatched === 1'b1 && ((WEBlatched === 1'b0)))
      begin
        corrupt_qB;
      end // if of MEBlatched = 1 and read
      if (MEBlatched === 1'b1 && ((WEBlatched === 1'b1)))
      begin
        corrupt_all_loc(flagb_range_ok);
      end // if of MEBlatched = 1 and write
    end
    else
    begin
      -> ev_RST_out_b_port;
    end // else of if CLKB = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_1
// PORT B READ-OUT

always @(ev_read_out_b_port)
begin : blk_readout_1
  #0;                // let CLOCK and NOTIFIER module execute first
  if (^RMB === 1'bx)
  begin
    flagb_rm_ok = `False;
  end // if of RMB is not valid
  if (flagb_adr_ok && flagb_read_ok && flagb_rm_ok)
  begin : OUTPUT_b
    if (WEBlatched === 1'b0)
    begin
      if (ADRBlatched <= 10'b1111111111)
      begin
          
         if (RSCRST !== 1'b1)
         begin
         read_mem_red(memdata,ADRBlatched);
         QB_local_tmp = memdata;
        end // if RSCRST
      end // if of ADRBlatched <= 10'b1111111111
    end // if of WEBlatched = 0
  end //if of flagb_adr_ok is true and flagb_read_ok is true and flagb_rm_ok is true
  else
  begin
    if (flagb_viol)
    begin
      if ((WEBlatched === 1'b0))
      begin
        corrupt_qB;
        flagb_read_ok = `True;
      end  // if of read
    end // if of flagb_viol is true
    else
    begin
      corrupt_qB;
      flagb_read_ok = `True;
    end // else of if flagb_viol is true
  end // else of if flagb_adr_ok is true and flagb_read_ok is true and flagb_rm_ok is true
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
end // end of always block blk_readout_1

// Handle Read/Write
always @(ev_RST_out_b_port)
begin : blk_readwrite_1
  if ( RST_tri === 1'b0 )
  begin
    QB_local_tmp = 75'bx;
  end // if RST_tri = 0
  else 
  begin
    if (MEBlatched !== 1'b0 && !flagb_viol)
    begin
      if (WEBlatched === 1'bx)
      begin
        flagb_we_ok = `False;
        flagb_read_ok = `False;
        report_unknown("WEB");
      end // if of WEBlatched = X
      if ((^DBlatched === 1'bx))
      begin
        if (DBlatched === 75'bx)
        begin
          flagb_d_ok  = `False;
        end
        if (WEBlatched !== 1'b0)
        begin
          report_unknown("DB");
        end
      end
          if (TEST1Blatched === 1'bx)
          begin
            report_unknown("TEST1B");
            if ( WEBlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRBlatched);                             
            end // if of WEBlatched = 1
            else
            begin
              corrupt_qB;
            end // else of if WEBlatched = 1
          end // if TEST1Blatched = X
          else if (TEST_RNMBlatched === 1'bx)
          begin
            report_unknown("TEST_RNMB");
            if (WEBlatched !== 1'b1)
            begin
              corrupt_qB;
            end // if of WEBlatched != 1
            corrupt_all_loc(`True);
          end // else if TEST_RNMBlatched = X
          else
          begin
                if (^RMB === 1'bx)
                begin
                  if ( RMEB !== 1'bx )
                    report_unknown("RMB");
                  else
                    report_unknown("RMEB");
                  if ( WEBlatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRBlatched);
                  end // if of WEBlatched = 1
                  else
                  begin
                    corrupt_qB;
                  end // else of if WEBlatched = 1
                end // if of RMB = X 
                else
                begin
                  if (MEBlatched !== 1'b1)
                  begin
                    flagb_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MEBlatched != 1 

                  if(ADRBlatched > 10'b1111111111) 
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE:0 to 1023\n", $time);
                    end
                    flagb_range_ok = `False;
                    if (WEBlatched === 1'b0)
                    begin
                      flagb_read_ok = `False;
                    end // if of flagb_read_ok
                  end // if of ADRBlatched out of range with MEBlatched = 1
                  if ( MEBlatched === 1'bx )
                  begin
                    report_unknown("MEB");
                    `ifdef virage_ignore_read_addx
                    if (WEBlatched == 1'b1)
                    begin
                      corrupt_all_loc(flagb_range_ok);
                    end // if of WEBlatched = 1 
                    else
                    begin
                      corrupt_qB;
                    end // else of if WEBlatched = 1
                    `else
                    if (WEBlatched == 1'b1)
                    begin
                      corrupt_all_loc(flagb_range_ok);
                    end // if of WEBlatched = 1
                    else
                    begin
                      corrupt_qB;
                      corrupt_all_loc(flagb_range_ok);
                    end // else of if WEBlatched = 1
                    `endif
                  end // if of MEBlatched = X
                  else
                  begin
                    if (RSCRST !== 1'b1) 
                    begin
                      if (flagb_range_ok && flagb_we_ok && flagb_adr_ok && flagb_d_ok && (WEBlatched == 1'b1))
                      begin
                        
                        write_mem_red(ADRBlatched,DBlatched);
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnBport;
                      end // else of if write
                    end // if of RSCRST
                  if (TEST1Blatched === 1'b1)
                  begin
                     if (WEBlatched === 1'b0)
                     begin
                       flagb_read_ok = `False;
                       -> ev_read_out_b_port;
                       @(negedge CLKB);
                     end
                     if (TEST_RNMB === 1'b0)
                     -> ev_read_out_b_port;
                  end // if of TEST1Blatched = 1
                  else 
                  begin
                    -> ev_read_out_b_port;
                  end // else of if TEST1Blatched = 1
                  end // else of if MEBlatched = X
                end // else of if RMB = X
          end // else of if TEST1Blatched = X
    end // if of MEBlatched != 0 & flagb_viol = 0
  end // else of if RST_tri = 0
end // end of always block blk_readwrite_1




assign QB_temp = QB_local_tmp;

// Final Output Update 

always @( QB_temp )
begin : blk_output_1
  if ( RST_check == 1'b1 )
  begin
    `ifdef VIRAGE_FAST_VERILOG
    #(O_delay) QB <= QB_temp;
    `else
    QB <= 75'bx;
    #0.001;
    QB <= QB_temp;
    `endif // endif of VIRAGE_FAST_VERILOG
  end
  else
    QB <= 75'bx;
end // end of always block blk_output_1



// Display the warning when TEST1B is 1.
always @ (TEST1B)
begin : blk_test1_1
  if(($test$plusargs("cpf_sim"))) 
    #0.001; 
  if (CLKB === 1'b1 && MEBlatched === 1'b1)
  begin
    corrupt_qB;
    flagb_read_ok = `False;
  end
  if ( TEST1B == 1'b1 && (LS === 1'b0))
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0,but input value is TEST1B=1'b1>>(time %0t)\n\n", $time);
    end
  end // if TEST1B = 1 
end // end of always block blk_test1_1
always @ (TEST_RNMB)
begin : blk_test_rnm_1
  if (CLKB === 1'b1 && MEB_old === 1'b1 && TEST1Blatched === 1'b1)
  begin
    if (WEBlatched === 1'b0)
    begin
      flagb_read_ok = `False;
      corrupt_qB;
    end
    if (WEBlatched === 1'b1)
    begin
      flagb_d_ok = `False;
      checkSanityOnBport;
    end
  end
end // end of always block blk_test_rnm_1


endmodule
