//==================================================================================//
// Author: GWX Technology
// Attribution: Verilog-HDL
// Birthday: Sun Nov 12 15:24:08 CST 2023
// Organization: GWX Technology
// Copyright: GWX Technology Â©2023 GWX Technology Inc. All rights reserved.
//----------------------------------------------------------------------------------//
// Description:
// All the data in the file was generated by GWX Technology. This information was
// prepared only for EDA tools training. GWX Technology does not guarantee the
// accuracy or completeness of the information contained herein. GWX Technology
// shall not be liable for any loss or damage of any kind arising from the use of
// this document or the information contained herein.
//----------------------------------------------------------------------------------//
// Version: 0.9.0.0 Alpha
//==================================================================================//

//   --------------------------------------------------------------     
//                       Template Revision : 3.1.0                      
//   --------------------------------------------------------------     

//                      * Synchronous, 1-Port ROM *                   
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 1-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:ROM_16Kx40                                           
//   Memory Size:16384 words x 40 bits                                
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   Q[39:0]                          
//               Input Ports:                                         
//                                   ADR[13:0]                        
//                                   ME                               
//                                   CLK                              
//                                   LS                               
//                                   TEST1                            
//                                   RM[3:0]                          
//                                   RME                              
// -------------------------------------------------------------------- 
// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = LOW option.         
// -------------------------------------------------------------------- 

`resetall 

`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 
`delay_mode_path 


`define True    1'b1
`define False   1'b0


module ROM_16Kx40 ( Q, ADR, ME, CLK, LS, TEST1, RM, RME);

parameter PreloadFilename = "ROM_16Kx40.hex";

output  [39:0] Q;
input  [13:0] ADR;
input ME;
input CLK;
input LS;
input TEST1;
input  [3:0] RM;
input RME;


// Local registers, wires, etc
`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;

`ifdef VIRAGE_FAST_VERILOG
`else
reg notif_adr;
reg notif_me;
reg notif_clk;
reg notif_clkp;
reg notif_ls;
reg notif_test1;
reg notif_rm;
reg notif_rme;
`endif

reg ADRFLAGA;

`ifdef VIRAGE_FAST_VERILOG
wire [39:0] Q_buf;
assign Q[0] =  Q_buf[0];
assign Q[1] =  Q_buf[1];
assign Q[2] =  Q_buf[2];
assign Q[3] =  Q_buf[3];
assign Q[4] =  Q_buf[4];
assign Q[5] =  Q_buf[5];
assign Q[6] =  Q_buf[6];
assign Q[7] =  Q_buf[7];
assign Q[8] =  Q_buf[8];
assign Q[9] =  Q_buf[9];
assign Q[10] =  Q_buf[10];
assign Q[11] =  Q_buf[11];
assign Q[12] =  Q_buf[12];
assign Q[13] =  Q_buf[13];
assign Q[14] =  Q_buf[14];
assign Q[15] =  Q_buf[15];
assign Q[16] =  Q_buf[16];
assign Q[17] =  Q_buf[17];
assign Q[18] =  Q_buf[18];
assign Q[19] =  Q_buf[19];
assign Q[20] =  Q_buf[20];
assign Q[21] =  Q_buf[21];
assign Q[22] =  Q_buf[22];
assign Q[23] =  Q_buf[23];
assign Q[24] =  Q_buf[24];
assign Q[25] =  Q_buf[25];
assign Q[26] =  Q_buf[26];
assign Q[27] =  Q_buf[27];
assign Q[28] =  Q_buf[28];
assign Q[29] =  Q_buf[29];
assign Q[30] =  Q_buf[30];
assign Q[31] =  Q_buf[31];
assign Q[32] =  Q_buf[32];
assign Q[33] =  Q_buf[33];
assign Q[34] =  Q_buf[34];
assign Q[35] =  Q_buf[35];
assign Q[36] =  Q_buf[36];
assign Q[37] =  Q_buf[37];
assign Q[38] =  Q_buf[38];
assign Q[39] =  Q_buf[39];
wire [13:0] ADR_buf;
assign  ADR_buf[0] = (ADR[0] === 1'bZ) ? 1'bX : ( ADR[0]);
assign  ADR_buf[1] = (ADR[1] === 1'bZ) ? 1'bX : ( ADR[1]);
assign  ADR_buf[2] = (ADR[2] === 1'bZ) ? 1'bX : ( ADR[2]);
assign  ADR_buf[3] = (ADR[3] === 1'bZ) ? 1'bX : ( ADR[3]);
assign  ADR_buf[4] = (ADR[4] === 1'bZ) ? 1'bX : ( ADR[4]);
assign  ADR_buf[5] = (ADR[5] === 1'bZ) ? 1'bX : ( ADR[5]);
assign  ADR_buf[6] = (ADR[6] === 1'bZ) ? 1'bX : ( ADR[6]);
assign  ADR_buf[7] = (ADR[7] === 1'bZ) ? 1'bX : ( ADR[7]);
assign  ADR_buf[8] = (ADR[8] === 1'bZ) ? 1'bX : ( ADR[8]);
assign  ADR_buf[9] = (ADR[9] === 1'bZ) ? 1'bX : ( ADR[9]);
assign  ADR_buf[10] = (ADR[10] === 1'bZ) ? 1'bX : ( ADR[10]);
assign  ADR_buf[11] = (ADR[11] === 1'bZ) ? 1'bX : ( ADR[11]);
assign  ADR_buf[12] = (ADR[12] === 1'bZ) ? 1'bX : ( ADR[12]);
assign  ADR_buf[13] = (ADR[13] === 1'bZ) ? 1'bX : ( ADR[13]);
wire ME_buf;
assign  ME_buf = (ME === 1'bZ) ? 1'bX : ( ME);
wire CLK_buf;
assign  CLK_buf = (CLK === 1'bZ) ? 1'bX : ( CLK);
wire LS_buf;
assign  LS_buf = (LS === 1'bZ) ? 1'bX : ( LS);
wire TEST1_buf;
assign  TEST1_buf = (TEST1 === 1'bZ) ? 1'bX : ( TEST1);
wire [3:0] RM_int;
wire [3:0] RM_buf;
assign  RM_buf[0] = (RM[0] === 1'bZ) ? 1'bX : ( RM[0]);
assign  RM_buf[1] = (RM[1] === 1'bZ) ? 1'bX : ( RM[1]);
assign  RM_buf[2] = (RM[2] === 1'bZ) ? 1'bX : ( RM[2]);
assign  RM_buf[3] = (RM[3] === 1'bZ) ? 1'bX : ( RM[3]);
wire RME_buf;
assign  RME_buf = (RME === 1'bZ) ? 1'bX : ( RME);
`else
wire [39:0] Q_buf;
buf u_Q_0 (Q[0], Q_buf[0]);
buf u_Q_1 (Q[1], Q_buf[1]);
buf u_Q_2 (Q[2], Q_buf[2]);
buf u_Q_3 (Q[3], Q_buf[3]);
buf u_Q_4 (Q[4], Q_buf[4]);
buf u_Q_5 (Q[5], Q_buf[5]);
buf u_Q_6 (Q[6], Q_buf[6]);
buf u_Q_7 (Q[7], Q_buf[7]);
buf u_Q_8 (Q[8], Q_buf[8]);
buf u_Q_9 (Q[9], Q_buf[9]);
buf u_Q_10 (Q[10], Q_buf[10]);
buf u_Q_11 (Q[11], Q_buf[11]);
buf u_Q_12 (Q[12], Q_buf[12]);
buf u_Q_13 (Q[13], Q_buf[13]);
buf u_Q_14 (Q[14], Q_buf[14]);
buf u_Q_15 (Q[15], Q_buf[15]);
buf u_Q_16 (Q[16], Q_buf[16]);
buf u_Q_17 (Q[17], Q_buf[17]);
buf u_Q_18 (Q[18], Q_buf[18]);
buf u_Q_19 (Q[19], Q_buf[19]);
buf u_Q_20 (Q[20], Q_buf[20]);
buf u_Q_21 (Q[21], Q_buf[21]);
buf u_Q_22 (Q[22], Q_buf[22]);
buf u_Q_23 (Q[23], Q_buf[23]);
buf u_Q_24 (Q[24], Q_buf[24]);
buf u_Q_25 (Q[25], Q_buf[25]);
buf u_Q_26 (Q[26], Q_buf[26]);
buf u_Q_27 (Q[27], Q_buf[27]);
buf u_Q_28 (Q[28], Q_buf[28]);
buf u_Q_29 (Q[29], Q_buf[29]);
buf u_Q_30 (Q[30], Q_buf[30]);
buf u_Q_31 (Q[31], Q_buf[31]);
buf u_Q_32 (Q[32], Q_buf[32]);
buf u_Q_33 (Q[33], Q_buf[33]);
buf u_Q_34 (Q[34], Q_buf[34]);
buf u_Q_35 (Q[35], Q_buf[35]);
buf u_Q_36 (Q[36], Q_buf[36]);
buf u_Q_37 (Q[37], Q_buf[37]);
buf u_Q_38 (Q[38], Q_buf[38]);
buf u_Q_39 (Q[39], Q_buf[39]);
wire [13:0] ADR_buf;
wire [13:0] delayed_ADR;
buf (ADR_buf[0], delayed_ADR[0]);
buf (ADR_buf[1], delayed_ADR[1]);
buf (ADR_buf[2], delayed_ADR[2]);
buf (ADR_buf[3], delayed_ADR[3]);
buf (ADR_buf[4], delayed_ADR[4]);
buf (ADR_buf[5], delayed_ADR[5]);
buf (ADR_buf[6], delayed_ADR[6]);
buf (ADR_buf[7], delayed_ADR[7]);
buf (ADR_buf[8], delayed_ADR[8]);
buf (ADR_buf[9], delayed_ADR[9]);
buf (ADR_buf[10], delayed_ADR[10]);
buf (ADR_buf[11], delayed_ADR[11]);
buf (ADR_buf[12], delayed_ADR[12]);
buf (ADR_buf[13], delayed_ADR[13]);
wire delayed_ME;
buf (ME_buf, delayed_ME);
wire delayed_CLK;
buf (CLK_buf, delayed_CLK);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire delayed_TEST1;
buf (TEST1_buf, delayed_TEST1);
wire [3:0] RM_int;
wire [3:0] RM_buf;
wire [3:0] delayed_RM;
buf (RM_buf[0], delayed_RM[0]);
buf (RM_buf[1], delayed_RM[1]);
buf (RM_buf[2], delayed_RM[2]);
buf (RM_buf[3], delayed_RM[3]);
wire delayed_RME;
buf (RME_buf, delayed_RME);
`endif


real t0_pfirst, t1_pfirst, t2_pnow, t2_nnow, t3_me;

initial
begin
  t0_pfirst = 0.0;
  t1_pfirst = 0.0;
  t2_pnow = 0.0;
  t2_nnow = 0.0;
  t3_me = 0.0;
end


always @(posedge CLK_buf)
begin
  t0_pfirst = t1_pfirst;
  t1_pfirst = t2_pnow;
  t2_pnow = $realtime;
  if ((t1_pfirst < t3_me) && (t3_me < t2_pnow))
  begin   
    uut.diff_me_tch = 1'b1;
  end
  if ((t0_pfirst < t3_me) && (t3_me < t2_pnow))
  begin   
    uut.diff_me_tcc = 1'b1;
  end
    @(negedge CLK_buf)
    t2_nnow = $realtime;
    #0.001;
    uut.diff_me_tch = 1'b0;
    uut.diff_me_tcc = 1'b0;
end

always @(ME_buf)
begin
  t3_me = $realtime;
  if ((t2_pnow < t3_me) && (t2_nnow < t3_me))
  begin   
    uut.diff_me_tch = 1'b1;
  end
end

// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [13 : 0] address;
input [5:0] bit_pos;
input flt_type;
begin
  if (uut.faultinj_en == 0)
  begin
    if (flt_type == 1)
    begin
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b1 ;
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b1 ;
    end
    else
    begin
      uut.mem_fault_array_sa0[address][bit_pos] = 1'b0 ;
      uut.mem_fault_array_sa1[address][bit_pos] = 1'b0 ;
    end
  end
end
endtask
`endif

reg disp_LS_msg;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msg_old;
initial
begin : reinit_msg_blk
  disp_LS_msg_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    if ($realtime > 0 )
    begin
      if (msg_start_lmt > $realtime)
      begin
        en_msg_cntrl = 1'b0;
        en_msg_cntrl <= #(msg_start_lmt - $realtime) 1'b1;
      end
      if (msg_end_lmt > $realtime)
        en_msg_cntrl <= #(msg_end_lmt - $realtime) 1'b0;
      else
        en_msg_cntrl = 1'b0;
    end
    else
    begin
      mes_all_valid_old = 1'b0;
      en_msg_cntrl = 1'b0;
      en_msg_cntrl <= #msg_start_lmt 1'b1;
      en_msg_cntrl <= #msg_end_lmt 1'b0;
    end
  end
  else
  begin
    en_msg_cntrl = 1'b0;
    if ($realtime == 0)
      mes_all_valid_old = 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @( en_msg_cntrl )
begin
  if (en_msg_cntrl !== 1'b0 )
  begin
    if (!(en_msg_cntrl === 1'bx && mes_all_valid_old === 1'b1))
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msg_old = disp_LS_msg;
    assign disp_LS_msg = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msg;
    disp_LS_msg = disp_LS_msg_old;
    `ifdef SNPS_SUPPORT_UPF_SIM
    disp_LS_msg = 1'b1;
     `endif
  end
end


assign RM_int[2:0] = ((RME_buf===1'b1)?RM_buf[2:0]:((RME_buf===1'b0)?3'b010:3'bx));
assign RM_int[3] = RM_buf[3];

initial
begin   : initl_blk
    $readmemh( PreloadFilename, uut.mem_core_array);
`ifdef VIRAGE_FAST_VERILOG
`else
  ADRFLAGA = 1;
`endif
end     // end of initl_blk
reg  ME_pre;
always @(ME_buf or negedge CLK_buf)
begin
  #0;
  if ( CLK_buf == 1'b0)
    ME_pre = ME_buf;
end

reg [13:0] ADR_pre;
reg flag_ADR_x;
always @(ADR_buf or negedge CLK_buf)
begin
  #0;
  if ( CLK_buf == 1'b0)
  begin
    ADR_pre = ADR_buf;
    if ( (^ADR_buf) === 1'bx)
    begin
      flag_ADR_x = 1'b1;
    end
    else
    begin
      flag_ADR_x = 1'b0;
    end
  end
end
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for testwb Vector: TEST1 is : ENTEST1
wire ENTEST1;
assign ENTEST1 = ((ME_pre !== 1'b0 && ADRFLAGA  && (LS_buf === 1'b0) )?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RM is : ENRM
wire ENRM;
assign ENRM = ((RME_buf === 1'b1 && (ME_pre !== 1'b0 && ADRFLAGA  && (LS_buf === 1'b0) ))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector Enable: RME is : ENRME
wire ENRME;
assign ENRME = ((ME_pre !== 1'b0 && ADRFLAGA  && (LS_buf === 1'b0) )?1'b1:1'b0);
// Setup/hold condition for Address: ADR is : ENADR
wire ENADR;
assign ENADR = ((ME_pre !== 1'b0  && (LS_buf === 1'b0) )?1'b1:1'b0);

// Setup/hold condition for Memory Enable: ME is : ENME
wire ENME;
assign ENME = (((ADRFLAGA || flag_ADR_x) )?1'b1:1'b0);
// Setup/hold condition for Reset Vector: LS is : ENLS
wire ENLS;
assign ENLS = ((ME_pre !== 1'b0)?1'b1:1'b0);
wire ENCLK;
assign ENCLK = ((TEST1 === 1'b0)?1'b1:1'b0) ;
wire ENCLK_test1;
assign ENCLK_test1 = ((TEST1 === 1'b1)?1'b1:1'b0) ;


wire ENCLK_rmezo,ENCLK_vdm,ENCLK_slw,ENCLK_def,ENCLK_fst,ENCLK_fster;

assign ENCLK_rmezo = (( RME_buf !== 1'b1)?1'b1:1'b0);
assign ENCLK_vdm = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b1) && (RM_buf[1] !== 1'b1) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_slw = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b0) && (RM_buf[1] !== 1'b1) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_def = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b1) && (RM_buf[1] !== 1'b0) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_fst = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b0) && (RM_buf[1] !== 1'b0) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_fster = (( RME_buf === 1'b1  && ((RM_buf[2] !== 1'b0) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);


specify
specparam

  Tac = 0.106,
  Tcax = 0.056,
  Tmc = 0.050,
  Tcmx = 0.032,
  Tcl = 0.154,
  Tcltest1 = 0.171,
  Tch = 0.179,
  Tchtest1 = 0.790,
  Tcc = 0.785,
  Tccvddmin = 0.804,
  Tccslow = 0.793,
  Tccdef = 0.785,
  Tccfast = 0.778,
  Tccfaster = 0.770,
  Trlsc = 0.061,
  Tflsc = 0.078,
  Tlsx = 0.179,
  TT1C = 0.106,
  TCT1X = 0.631,
  Trmc = 0.148,
  Trm2c = 0.106,
  Trm3c = 0.159,
  Tcrmx = 0.329,
  Tcrm2x = 0.428,
  Tcrm3x = 0.785,
  Trmec = 0.148,
  Tcrmex = 0.329,
  Tcq = 0.704,
  Tcqx = 0.463,
  Tcqvddmin = 0.732,
  Tcqvddminx = 0.480,
  Tcqslow = 0.718,
  Tcqslowx = 0.468,
  Tcqdef = 0.704,
  Tcqdefx = 0.463,
  Tcqfast = 0.690,
  Tcqfastx = 0.459,
  Tcqfaster = 0.676,
  Tcqfasterx = 0.454,
  Tcqtest1x = 0.137,
  Tcqtest1 = 0.171;


     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if (  TEST1 & !LS )
       ( negedge CLK => (  Q[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );


// Timing Checks

  $width (negedge CLK &&& ENCLK, Tcl, 0, notif_clk);
  $width (negedge CLK &&& ENCLK_test1, Tcltest1, 0, notif_clk);
  $width (posedge CLK &&& ENCLK, Tch, 0, notif_clk);
  $width (posedge CLK &&& ENCLK_test1, Tchtest1, 0, notif_clk);
  $period (posedge CLK &&& ENCLK_rmezo, Tcc, notif_clkp);
  $period (negedge CLK &&& ENCLK_rmezo, Tcc, notif_clk);
  $period (posedge CLK &&& ENCLK_vdm, Tccvddmin, notif_clkp);
  $period (negedge CLK &&& ENCLK_vdm, Tccvddmin, notif_clk);
  $period (posedge CLK &&& ENCLK_slw, Tccslow, notif_clkp);
  $period (negedge CLK &&& ENCLK_slw, Tccslow, notif_clk);
  $period (posedge CLK &&& ENCLK_def, Tccdef, notif_clkp);
  $period (negedge CLK &&& ENCLK_def, Tccdef, notif_clk);
  $period (posedge CLK &&& ENCLK_fst, Tccfast, notif_clkp);
  $period (negedge CLK &&& ENCLK_fst, Tccfast, notif_clk);
  $period (posedge CLK &&& ENCLK_fster, Tccfaster, notif_clkp);
  $period (negedge CLK &&& ENCLK_fster, Tccfaster, notif_clk);
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[0], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[0] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[0], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[0] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[1], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[1] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[1], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[1] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[2], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[2] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[2], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[2] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[3], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[3] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[3], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[3] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[4], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[4] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[4], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[4] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[5], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[5] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[5], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[5] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[6], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[6] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[6], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[6] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[7], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[7] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[7], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[7] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[8], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[8] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[8], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[8] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[9], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[9] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[9], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[9] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[10], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[10] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[10], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[10] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[11], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[11] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[11], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[11] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[12], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[12] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[12], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[12] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[13], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[13] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[13], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[13] );
  $setuphold (posedge CLK  &&& ENME, posedge ME,Tmc, Tcmx, notif_me,,, delayed_CLK, delayed_ME );
  $setuphold (posedge CLK  &&& ENME, negedge ME,Tmc, Tcmx, notif_me,,, delayed_CLK, delayed_ME );
  $setuphold (posedge CLK  &&& ENLS, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_CLK, delayed_LS );
  $setuphold (posedge CLK  &&& ENLS, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_CLK, delayed_LS );
  $setuphold (posedge CLK  &&& ENTEST1, posedge TEST1,TT1C, 0, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (posedge CLK  &&& ENTEST1, negedge TEST1,TT1C, 0, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (negedge CLK  &&& ENTEST1, posedge TEST1,0, TCT1X, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (negedge CLK  &&& ENTEST1, negedge TEST1,0, TCT1X, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[0], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[0] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[0], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[0] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[1], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[1] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[1], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[1] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[2], Trm2c, Tcrm2x, notif_rm,,, delayed_CLK, delayed_RM[2] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[2], Trm2c, Tcrm2x, notif_rm,,, delayed_CLK, delayed_RM[2] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[3], Trm3c, Tcrm3x, notif_rm,,, delayed_CLK, delayed_RM[3] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[3], Trm3c, Tcrm3x, notif_rm,,, delayed_CLK, delayed_RM[3] );
  $setuphold (posedge CLK  &&& ENRME, posedge RME,Trmec, Tcrmex, notif_rme,,, delayed_CLK, delayed_RME );
  $setuphold (posedge CLK  &&& ENRME, negedge RME,Trmec, Tcrmex, notif_rme,,, delayed_CLK, delayed_RME );

endspecify
`endif
reg LS_old;



`ifdef VIRAGE_FAST_VERILOG
IntComp_ROM_16Kx40 #(MES_CNTRL, MemFault_Inj) uut (  .Q (Q_buf), .ADR (ADR_pre), .ME(ME_pre), .CLK(CLK_mem), .LS(LS_old), .TEST1(TEST1_buf), .RM (RM_int), .RME(RME_buf) );
`else
IntComp_ROM_16Kx40 #(MES_CNTRL, MemFault_Inj) uut (  .Q (Q_buf), .ADR (ADR_pre), .ME(ME_pre), .CLK(CLK_mem), .LS(LS_old), .TEST1(TEST1_buf), .RM (RM_int), .RME(RME_buf),.notif_adr(notif_adr), .notif_me(notif_me), .notif_clk(notif_clk), .notif_clkp(notif_clkp), .notif_ls(notif_ls), .notif_test1(notif_test1), .notif_rm(notif_rm), .notif_rme(notif_rme) );
`endif

    


`ifdef VIRAGE_FAST_VERILOG
`else
always @ ( ADR_buf )
begin :  ADR_buf_blk
  if ( $realtime != 0)
  begin // if  $realtime != 0
    if ( ADR_buf > 16383)
     ADRFLAGA = 1'b0;
    else if ( ^ADR_buf === 1'bX)
     ADRFLAGA = 1'bX;
    else
     ADRFLAGA = 1'b1;
  end    // end of if $realtime != 0
end     //  end of ADR_buf_blk
`endif



initial
begin
disp_LS_msg = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msg = 1'b1;
  disp_LS_msg_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLK_buf)
begin : blk_ls_0
  if (LS_buf === 1'b1 && ME_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msg === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING:  No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msg = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0


always @( negedge CLK_buf or LS_buf )
 begin
   if ( CLK_buf == 1'b0 )
   begin
     LS_old <= LS_buf;
   end
 end // end of always negedge CLK_buf or LS
assign CLK_mem = CLK_buf;



endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 



`ifdef VIRAGE_FAST_VERILOG
module IntComp_ROM_16Kx40 (  Q, ADR, ME, CLK, LS, TEST1, RM, RME );
`else
module IntComp_ROM_16Kx40 (  Q, ADR, ME, CLK, LS, TEST1, RM, RME,notif_adr, notif_me, notif_clk, notif_clkp, notif_ls, notif_test1, notif_rm, notif_rme );
`endif

parameter MES_CNTRL = "ON";
parameter MemFault_Inj = 0;

parameter words = 16384, bits = 40, addrbits = 14, timingmode = 1, rmbits=4;

output [bits-1:0] Q;
input [addrbits-1:0] ADR;
input ME;
input CLK;
input LS;
input TEST1;
input [rmbits-1:0] RM;
input RME;

`ifdef VIRAGE_FAST_VERILOG
`else
input notif_adr, notif_me, notif_clk, notif_clkp, notif_ls, notif_test1, notif_rm, notif_rme;

`endif

// Registers/Wires
reg    [39:0]  Q;
reg    [39:0]  Q_local_inj;
reg    [39:0]  Q_local_tmp;
reg    [39:0]  Q_local_prev;
reg    [39:0]  Q_local_tmp_test1;
reg diff_me_tch, diff_me_tcc;
integer i;
reg [bits-1:0] mem_core_array [0:words-1];
reg  [bits-1:0] mem_fault_array_XOR [0:words -1];
reg  [bits-1:0] mem_fault_array_sa0 [0:words -1];
reg  [bits-1:0] mem_fault_array_sa1 [0:words -1];
reg faultinj_en;

initial
  begin : reinit_fault_blk
    faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
    faultinj_en = 1'b1;
`else
    if (MemFault_Inj == 1)
      faultinj_en = 1'b1;
`endif
    for (i=0; i< words ; i=i+1)
    begin
      if (faultinj_en == 1)
        mem_fault_array_XOR[i]=0;
      else
      begin
        mem_fault_array_sa0[i]={bits{1'b1}};
        mem_fault_array_sa1[i]=0;
      end
    end
    if (faultinj_en == 1)
    begin
        if ($test$plusargs("asap_error"))
          mem_fault_array_XOR[1] = 1'b1 << (bits - 1);
    end
  end

reg
        flaga_read_ok,
        flaga_rm_ok,
        flaga_clk_ok,
        flaga_adr_ok;
reg     flaga_adr_x;
real    CLKA_T;
reg mes_all_valid;
real CLKB_T_neg;
event   ev_read_out_a_port;
reg [13:0] ADRlatched;
reg [13:0] ADR_old;
reg MElatched;
reg ME_old;
reg TEST1latched;
reg TEST1_old;


// TASK/FUNCTION DEFINITION

// Task to report unknown messages
task report_unknown;
input [8*5:1] signal;
begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (ROM)",signal,$realtime);
    end
end
endtask


function is_adr_Valid;  // 1-bit return value
input [13:0] addr_to_check;
integer addr_bit_count;
reg     ret_value;
  begin
    ret_value = `True;
      for (addr_bit_count = 0; addr_bit_count <= 13; addr_bit_count = addr_bit_count +1)
        if ((addr_to_check[addr_bit_count] !== 1'b0) && (addr_to_check[addr_bit_count] !== 1'b1))
        begin
          flaga_adr_x = `True;
          ret_value = `False;
        end
      if(addr_to_check > 16383)
      begin
        ret_value = `False;
      end
   is_adr_Valid = ret_value;
  end
endfunction


function is_rm_Valid;
input [3:0] rm_to_chk;
integer rm_bit_cnt;
reg ret_val;
  begin
    ret_val = `True;
    for (rm_bit_cnt = 0; rm_bit_cnt < 4; rm_bit_cnt = rm_bit_cnt + 1)
    if ( (rm_to_chk[rm_bit_cnt] !== 1'b0) && (rm_to_chk[rm_bit_cnt] !== 1'b1) )
      ret_val = `False;
      is_rm_Valid = ret_val;
  end
endfunction

// PORT A FUNCTIONALITY 
initial  
begin : reinit_uut_blk
  flaga_adr_ok  = `True; 
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
  flaga_clk_ok = `True;
  flaga_adr_x = `False;
end

initial  
begin
  mes_all_valid = 1'b0;
  diff_me_tch = 1'b0;
  diff_me_tcc = 1'b0;
end

// For Zerohold of ADR pin
always @( negedge CLK or ADR )
 begin
   if ( CLK == 1'b0 )
   begin
     ADR_old = ADR;
   end
 end // end of always negedge CLK or ADR or power-gating pin(s)

// For Zerohold of ME pin
always @( negedge CLK or ME or LS )
 begin
   if ( CLK == 1'b0 )
   begin
    if ( (LS === 1'b1 && ME !== 1'bX))
      ME_old = 1'b0;
    else
      ME_old = ME;
   end
 end // end of always negedge CLK or ME or power-gating pin(s)


// For Zerohold of TEST1 pin
always @( negedge CLK or TEST1 )
begin : blk_test1hold_0
  if ( CLK == 1'b0 )
  begin
    TEST1_old = TEST1;
  end // if of CLK = 0
end // end of always block blk_test1hold_0

`ifdef VIRAGE_FAST_VERILOG
`else
always @(notif_clk)
begin    //CLK violation
  if (diff_me_tch === 1'b1 || ME === 1'b1)
  begin
   flaga_read_ok = `False;    
   flaga_clk_ok  = `False;    
  -> ev_read_out_a_port; 
  end
end
always @(notif_clkp)       
begin
  if (diff_me_tcc === 1'b1 || ME === 1'b1)
  begin
   flaga_read_ok = `False;    
   flaga_clk_ok  = `False;    
  -> ev_read_out_a_port; 
  end 
end

always @(notif_me)      
begin     //ME violation	
  flaga_read_ok = `False;
   -> ev_read_out_a_port;
end

always @(notif_adr)           
begin    //ADR violation 
  flaga_adr_ok = `False;
  flaga_read_ok = `False; 
  -> ev_read_out_a_port;
end

always @(notif_rm) 
begin    // RM violation
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end

always @(notif_rme) 
begin    // RME violation
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end


always @(notif_ls)
begin    // LS violation
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end

 
 
always @(notif_test1)              
begin    // TEST1 violation
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end 
`endif

always @(negedge CLK)          // reset for next cycle
begin    // negedge CLK
  if ( CLK !== 1'bx )
  begin
    #0.001;
    flaga_adr_ok  = `True;
    flaga_read_ok = `True;
    flaga_rm_ok = `True;
    flaga_clk_ok = `True;
    flaga_adr_x = `False;
  end
  else
  begin
    if (MElatched === 1'b1)
    begin
      report_unknown("CLK");
      flaga_clk_ok = `False;
      Q_local_tmp = 40'bx;
    end
  end
  if ( TEST1latched == 1'b1) 
  begin
    CLKB_T_neg = $realtime;
    Q_local_tmp_test1 = Q_local_tmp;
    Q_local_tmp_test1 = 40'bx;
    #0;
    Q_local_tmp_test1 = Q_local_tmp;
    #0.001 TEST1latched = 1'b0;
  end  // end of if of TEST1latched == 1'b1
end // end of always negedge CLK

// PORT A FUNCTIONALITY 
always @(posedge CLK)
begin    // posedge CLK 
  #0;
  CLKA_T = $realtime;
  MElatched = ME_old;
  TEST1latched = TEST1_old;
  ADRlatched = ADR_old;
  if ((LS === 1'bX) && (MElatched !== 1'b0 ))
  begin
    report_unknown("LS");
    Q_local_tmp = 40'bx;
  end
  else
  begin
  if (!flaga_clk_ok)
    Q_local_tmp = 40'bx;
  else if ( CLK === 1'bx )
  begin
   #0.001;
   if (diff_me_tch === 1'b1 || ME !== 1'b0)
   begin
    flaga_clk_ok = `False;
    Q_local_tmp = 40'bx;
    report_unknown("CLK");
   end
  end
  else if ( TEST1latched === 1'bx && MElatched !== 1'b0  )
  begin
    report_unknown("TEST1");
    Q_local_tmp = 40'bx;
  end
  else
  begin
    if (MElatched !== 1'b0  )
    begin
        if (is_adr_Valid(ADRlatched) != `True )
        begin
          if ( flaga_adr_x )
          begin
            report_unknown("ADR");
          end
          flaga_adr_ok = `False;
        end
        if(ADRlatched > 16383)
        begin
          if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
          begin
            $display("\n%m VIRL_MEM_WARNING:address is out of range\n RANGE:0 to 16383 at time = %t\n",$time);
          end // if of message display is enabled
          flaga_read_ok = `False;
        end
          if ( MElatched === 1'bx ) 
          begin
            report_unknown("ME");
            Q_local_tmp = 40'bx;
          end
        else
        begin
        -> ev_read_out_a_port;
        end
    end
  end
  end // else of if power pin unknown
end // end of always posedge CLK

always @(ev_read_out_a_port)
begin    // PORT A READ-OUT
  #0;     // let CLOCK and NOTIFIER module execute first
  if (RME === 1'b1)
  begin
    if (RM > 4'b0111)
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
      begin
        $display("<<VIRL_MEM_WARNING: RM = %b is not recommended value>>, time=%t; instance=%m (ROM)",RM,$realtime);
      end
    end
  end
  if ( is_rm_Valid(RM) != `True )
  begin
    flaga_rm_ok = `False; 
    if (RME !== 1'bX)
    begin
      report_unknown("RM");
    end
    else
    begin
      report_unknown("RME");
    end
  end
  if (flaga_adr_ok && (ADRlatched <= 16383) && flaga_read_ok && flaga_rm_ok )
  begin : OUTPUT
    if ( Q_local_prev !== mem_core_array[ADRlatched])
`ifdef VIRAGE_FAST_VERILOG
  if ( TEST1latched === 1'b1)
  begin
    Q_local_tmp =  40'bx;
    Q_local_tmp_test1 =  40'bx;
  end
`else
    Q_local_tmp = 40'bx;
    #0.001;
`endif
   if (faultinj_en == 1)
   begin
    Q_local_tmp =  mem_core_array[ADRlatched] ^ mem_fault_array_XOR[ADRlatched];
   end
   else
   begin
     Q_local_inj =  mem_core_array[ADRlatched] & mem_fault_array_sa0[ADRlatched];
     Q_local_tmp =  Q_local_inj | mem_fault_array_sa1[ADRlatched];
   end
    if (!flaga_read_ok)
    begin
      Q_local_tmp = 40'bx;
    end
    if (!mes_all_valid )
        mes_all_valid = 1'b1;
  end
  else
  begin
    Q_local_tmp = 40'bx;
    flaga_read_ok = `True;
  end
   flaga_rm_ok = `True;
end



always @( Q_local_tmp or Q_local_tmp_test1 )
begin
  if ( TEST1latched !== 1'b1 )
  begin
    Q <= Q_local_tmp;
    Q_local_prev = Q_local_tmp;
  end
  else
  begin
    if ( $realtime != CLKB_T_neg )
    begin
      Q <= 40'bx;
      Q_local_prev = 40'bx;
    end
    else
    begin
      Q <=   Q_local_tmp_test1;
      Q_local_prev = Q_local_tmp_test1;
    end
  end  
end // end of always Q_local_tmp






always @ (TEST1)
begin
  if ( TEST1 == 1'b1)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
    begin
    $display("\n%m<<VIRL_MEM_WARNING: In TEST1 mode, Tch requirement is that Tch must be less than 4*Tcq. Tcl requirement is that Tcl >=Tcc. (time %0t)\n\n", $time);
    end
  end
end // end of always TEST1

endmodule
