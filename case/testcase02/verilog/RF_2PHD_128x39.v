//==================================================================================//
// Author: GWX Technology
// Attribution: Verilog-HDL
// Birthday: Sun Nov 12 15:24:08 CST 2023
// Organization: GWX Technology
// Copyright: GWX Technology Â©2023 GWX Technology Inc. All rights reserved.
//----------------------------------------------------------------------------------//
// Description:
// All the data in the file was generated by GWX Technology. This information was
// prepared only for EDA tools training. GWX Technology does not guarantee the
// accuracy or completeness of the information contained herein. GWX Technology
// shall not be liable for any loss or damage of any kind arising from the use of
// this document or the information contained herein.
//----------------------------------------------------------------------------------//
// Version: 0.9.0.0 Alpha
//==================================================================================//

//   --------------------------------------------------------------     
//                       Template Revision : 4.5.2                      
//   --------------------------------------------------------------     
//                 * Synchronous, 2-Port Register File *              
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:RF_2PHD_128x39                                       
//   Memory Size:128 words x 39 bits                                  
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   RSCOUT                           
//                                   QB[38:0]                         
//               Input Ports:                                         
//                                   ADRA[6:0]                        
//                                   DA[38:0]                         
//                                   WEA                              
//                                   MEA                              
//                                   RSCIN                            
//                                   RSCEN                            
//                                   RSCRST                           
//                                   RSCLK                            
//                                   FISO                             
//                                   CLKA                             
//                                   TEST1A                           
//                                   RMEA                             
//                                   RMA[3:0]                         
//                                   LS                               
//                                   ADRB[6:0]                        
//                                   MEB                              
//                                   CLKB                             
//                                   TEST1B                           
//                                   RMEB                             
//                                   RMB[3:0]                         

// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = LOW option.         
// -------------------------------------------------------------------- 
`resetall 


`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 
`define True    1'b1
`define False   1'b0




module RF_2PHD_128x39 ( RSCOUT, QB, ADRA, DA, WEA, MEA, RSCIN, RSCEN, RSCRST, RSCLK, FISO, CLKA, TEST1A, RMEA, RMA, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB);

output RSCOUT;
output  [38:0] QB;
input  [6:0] ADRA;
input  [38:0] DA;
input WEA;
input MEA;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input CLKA;
input TEST1A;
input RMEA;
input  [3:0] RMA;
input LS;
input  [6:0] ADRB;
input MEB;
input CLKB;
input TEST1B;
input RMEB;
input  [3:0] RMB;


// Local registers, wires, etc

parameter PreloadFilename = "init.file";
`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif // MEM_CHECK_OFF
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_IGNORE_SAME_ADDR_MSG
parameter debug_mode = 0;
`else
parameter debug_mode = 1;
`endif // VIRAGE_IGNORE_SAME_ADDR_MSG

`ifdef VIRAGE_FAST_VERILOG
`else
// Notifiers Declaration
reg notif_adra;
wire [38:0] notif_da;
reg notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0;
reg notif_wea;
reg notif_mea;
reg notif_rscin;
reg notif_rscen;
reg notif_rscen_CLKA_rise_fall_rec;
reg notif_rscen_CLKB_rise_fall_rec;
reg notif_rscrst;
reg notif_rscrst_RSCLK_rise_fall_rec;
reg notif_rscrst_CLKA_rise_fall_rec;
reg notif_rscrst_CLKB_rise_fall_rec;
reg notif_rsclk;
reg notif_rsclk_CLKA_rise_rise_rec;
reg notif_rsclk_CLKB_rise_rise_rec;
reg notif_fiso;
reg notif_clka;
reg notif_clkap;
reg notif_clka_CLKB_rise_rise_rec;
reg notif_test1a;
reg notif_rmea;
reg notif_rma;
reg notif_ls_a;
reg notif_ls_b;
reg notif_adrb;
reg notif_meb;
reg notif_clkb;
reg notif_clkbp;
reg notif_clkb_CLKA_rise_rise_rec;
reg notif_test1b;
reg notif_rmeb;
reg notif_rmb;
`endif // VIRAGE_FAST_VERILOG
reg  [6 : 0 ] ADRA_buf_L;
reg  [6 : 0 ] ADRA_pre;
reg flag_ADRA_x;
reg  MEA_pre;
reg [38:0] DA_pre;
reg  WEA_pre;
reg  CLKB_tcq;
reg  [6 : 0 ] ADRB_buf_L;
reg  [6 : 0 ] ADRB_pre;
reg flag_ADRB_x;
reg  MEB_pre;




wire [38:0] QB_final;

`ifdef VIRAGE_FAST_VERILOG
wire RSCOUT_buf;
assign  RSCOUT = RSCOUT_buf;
wire [38:0] QB_buf;
assign QB[0] = QB_buf[0];
assign QB[1] = QB_buf[1];
assign QB[2] = QB_buf[2];
assign QB[3] = QB_buf[3];
assign QB[4] = QB_buf[4];
assign QB[5] = QB_buf[5];
assign QB[6] = QB_buf[6];
assign QB[7] = QB_buf[7];
assign QB[8] = QB_buf[8];
assign QB[9] = QB_buf[9];
assign QB[10] = QB_buf[10];
assign QB[11] = QB_buf[11];
assign QB[12] = QB_buf[12];
assign QB[13] = QB_buf[13];
assign QB[14] = QB_buf[14];
assign QB[15] = QB_buf[15];
assign QB[16] = QB_buf[16];
assign QB[17] = QB_buf[17];
assign QB[18] = QB_buf[18];
assign QB[19] = QB_buf[19];
assign QB[20] = QB_buf[20];
assign QB[21] = QB_buf[21];
assign QB[22] = QB_buf[22];
assign QB[23] = QB_buf[23];
assign QB[24] = QB_buf[24];
assign QB[25] = QB_buf[25];
assign QB[26] = QB_buf[26];
assign QB[27] = QB_buf[27];
assign QB[28] = QB_buf[28];
assign QB[29] = QB_buf[29];
assign QB[30] = QB_buf[30];
assign QB[31] = QB_buf[31];
assign QB[32] = QB_buf[32];
assign QB[33] = QB_buf[33];
assign QB[34] = QB_buf[34];
assign QB[35] = QB_buf[35];
assign QB[36] = QB_buf[36];
assign QB[37] = QB_buf[37];
assign QB[38] = QB_buf[38];
wire [6:0] ADRA_buf;
assign  ADRA_buf[0] = (ADRA[0] === 1'bZ) ? 1'bX : ( ADRA[0]);
assign  ADRA_buf[1] = (ADRA[1] === 1'bZ) ? 1'bX : ( ADRA[1]);
assign  ADRA_buf[2] = (ADRA[2] === 1'bZ) ? 1'bX : ( ADRA[2]);
assign  ADRA_buf[3] = (ADRA[3] === 1'bZ) ? 1'bX : ( ADRA[3]);
assign  ADRA_buf[4] = (ADRA[4] === 1'bZ) ? 1'bX : ( ADRA[4]);
assign  ADRA_buf[5] = (ADRA[5] === 1'bZ) ? 1'bX : ( ADRA[5]);
assign  ADRA_buf[6] = (ADRA[6] === 1'bZ) ? 1'bX : ( ADRA[6]);
wire [38:0] DA_buf;
assign  DA_buf[0] = (DA[0] === 1'bZ) ? 1'bX : ( DA[0]);
assign  DA_buf[1] = (DA[1] === 1'bZ) ? 1'bX : ( DA[1]);
assign  DA_buf[2] = (DA[2] === 1'bZ) ? 1'bX : ( DA[2]);
assign  DA_buf[3] = (DA[3] === 1'bZ) ? 1'bX : ( DA[3]);
assign  DA_buf[4] = (DA[4] === 1'bZ) ? 1'bX : ( DA[4]);
assign  DA_buf[5] = (DA[5] === 1'bZ) ? 1'bX : ( DA[5]);
assign  DA_buf[6] = (DA[6] === 1'bZ) ? 1'bX : ( DA[6]);
assign  DA_buf[7] = (DA[7] === 1'bZ) ? 1'bX : ( DA[7]);
assign  DA_buf[8] = (DA[8] === 1'bZ) ? 1'bX : ( DA[8]);
assign  DA_buf[9] = (DA[9] === 1'bZ) ? 1'bX : ( DA[9]);
assign  DA_buf[10] = (DA[10] === 1'bZ) ? 1'bX : ( DA[10]);
assign  DA_buf[11] = (DA[11] === 1'bZ) ? 1'bX : ( DA[11]);
assign  DA_buf[12] = (DA[12] === 1'bZ) ? 1'bX : ( DA[12]);
assign  DA_buf[13] = (DA[13] === 1'bZ) ? 1'bX : ( DA[13]);
assign  DA_buf[14] = (DA[14] === 1'bZ) ? 1'bX : ( DA[14]);
assign  DA_buf[15] = (DA[15] === 1'bZ) ? 1'bX : ( DA[15]);
assign  DA_buf[16] = (DA[16] === 1'bZ) ? 1'bX : ( DA[16]);
assign  DA_buf[17] = (DA[17] === 1'bZ) ? 1'bX : ( DA[17]);
assign  DA_buf[18] = (DA[18] === 1'bZ) ? 1'bX : ( DA[18]);
assign  DA_buf[19] = (DA[19] === 1'bZ) ? 1'bX : ( DA[19]);
assign  DA_buf[20] = (DA[20] === 1'bZ) ? 1'bX : ( DA[20]);
assign  DA_buf[21] = (DA[21] === 1'bZ) ? 1'bX : ( DA[21]);
assign  DA_buf[22] = (DA[22] === 1'bZ) ? 1'bX : ( DA[22]);
assign  DA_buf[23] = (DA[23] === 1'bZ) ? 1'bX : ( DA[23]);
assign  DA_buf[24] = (DA[24] === 1'bZ) ? 1'bX : ( DA[24]);
assign  DA_buf[25] = (DA[25] === 1'bZ) ? 1'bX : ( DA[25]);
assign  DA_buf[26] = (DA[26] === 1'bZ) ? 1'bX : ( DA[26]);
assign  DA_buf[27] = (DA[27] === 1'bZ) ? 1'bX : ( DA[27]);
assign  DA_buf[28] = (DA[28] === 1'bZ) ? 1'bX : ( DA[28]);
assign  DA_buf[29] = (DA[29] === 1'bZ) ? 1'bX : ( DA[29]);
assign  DA_buf[30] = (DA[30] === 1'bZ) ? 1'bX : ( DA[30]);
assign  DA_buf[31] = (DA[31] === 1'bZ) ? 1'bX : ( DA[31]);
assign  DA_buf[32] = (DA[32] === 1'bZ) ? 1'bX : ( DA[32]);
assign  DA_buf[33] = (DA[33] === 1'bZ) ? 1'bX : ( DA[33]);
assign  DA_buf[34] = (DA[34] === 1'bZ) ? 1'bX : ( DA[34]);
assign  DA_buf[35] = (DA[35] === 1'bZ) ? 1'bX : ( DA[35]);
assign  DA_buf[36] = (DA[36] === 1'bZ) ? 1'bX : ( DA[36]);
assign  DA_buf[37] = (DA[37] === 1'bZ) ? 1'bX : ( DA[37]);
assign  DA_buf[38] = (DA[38] === 1'bZ) ? 1'bX : ( DA[38]);
wire WEA_buf;
assign  WEA_buf = (WEA === 1'bZ) ? 1'bX : ( WEA);
wire MEA_buf;
assign  MEA_buf = (MEA === 1'bZ) ? 1'bX : ( MEA);
wire RSCIN_buf;
assign  RSCIN_buf = (RSCIN === 1'bZ) ? 1'bX : ( RSCIN);
wire RSCEN_buf;
assign  RSCEN_buf = (RSCEN === 1'bZ) ? 1'bX : ( RSCEN);
wire RSCRST_buf;
assign  RSCRST_buf = (RSCRST === 1'bZ) ? 1'bX : ( RSCRST);
wire RSCLK_buf;
assign  RSCLK_buf = (RSCLK === 1'bZ) ? 1'bX : ( RSCLK);
wire FISO_buf;
assign  FISO_buf = (FISO === 1'bZ) ? 1'bX : ( FISO);
wire CLKA_buf;
assign  CLKA_buf = (CLKA === 1'bZ) ? 1'bX : ( CLKA);
wire TEST1A_buf;
assign  TEST1A_buf = (TEST1A === 1'bZ) ? 1'bX : ( TEST1A);
wire RMEA_buf;
assign  RMEA_buf = (RMEA === 1'bZ) ? 1'bX : ( RMEA);
wire [3:0] RMA_buf;
wire [2:0] RMA_int;
assign  RMA_buf[0] = (RMA[0] === 1'bZ) ? 1'bX : ( RMA[0]);
assign  RMA_buf[1] = (RMA[1] === 1'bZ) ? 1'bX : ( RMA[1]);
assign  RMA_buf[2] = (RMA[2] === 1'bZ) ? 1'bX : ( RMA[2]);
assign  RMA_buf[3] = (RMA[3] === 1'bZ) ? 1'bX : ( RMA[3]);
wire LS_buf;
assign  LS_buf = (LS === 1'bZ) ? 1'bX : ( LS);
wire [6:0] ADRB_buf;
assign  ADRB_buf[0] = (ADRB[0] === 1'bZ) ? 1'bX : ( ADRB[0]);
assign  ADRB_buf[1] = (ADRB[1] === 1'bZ) ? 1'bX : ( ADRB[1]);
assign  ADRB_buf[2] = (ADRB[2] === 1'bZ) ? 1'bX : ( ADRB[2]);
assign  ADRB_buf[3] = (ADRB[3] === 1'bZ) ? 1'bX : ( ADRB[3]);
assign  ADRB_buf[4] = (ADRB[4] === 1'bZ) ? 1'bX : ( ADRB[4]);
assign  ADRB_buf[5] = (ADRB[5] === 1'bZ) ? 1'bX : ( ADRB[5]);
assign  ADRB_buf[6] = (ADRB[6] === 1'bZ) ? 1'bX : ( ADRB[6]);
wire MEB_buf;
assign  MEB_buf = (MEB === 1'bZ) ? 1'bX : ( MEB);
wire CLKB_buf;
assign  CLKB_buf = (CLKB === 1'bZ) ? 1'bX : ( CLKB);
wire TEST1B_buf;
assign  TEST1B_buf = (TEST1B === 1'bZ) ? 1'bX : ( TEST1B);
wire RMEB_buf;
assign  RMEB_buf = (RMEB === 1'bZ) ? 1'bX : ( RMEB);
wire [3:0] RMB_buf;
wire [2:0] RMB_int;
assign  RMB_buf[0] = (RMB[0] === 1'bZ) ? 1'bX : ( RMB[0]);
assign  RMB_buf[1] = (RMB[1] === 1'bZ) ? 1'bX : ( RMB[1]);
assign  RMB_buf[2] = (RMB[2] === 1'bZ) ? 1'bX : ( RMB[2]);
assign  RMB_buf[3] = (RMB[3] === 1'bZ) ? 1'bX : ( RMB[3]);
`else
wire RSCOUT_buf;
buf (RSCOUT, RSCOUT_buf);
wire [38:0] QB_buf;
buf (QB[0], QB_buf[0]);
buf (QB_final[0],QB[0]);
buf (QB[1], QB_buf[1]);
buf (QB_final[1],QB[1]);
buf (QB[2], QB_buf[2]);
buf (QB_final[2],QB[2]);
buf (QB[3], QB_buf[3]);
buf (QB_final[3],QB[3]);
buf (QB[4], QB_buf[4]);
buf (QB_final[4],QB[4]);
buf (QB[5], QB_buf[5]);
buf (QB_final[5],QB[5]);
buf (QB[6], QB_buf[6]);
buf (QB_final[6],QB[6]);
buf (QB[7], QB_buf[7]);
buf (QB_final[7],QB[7]);
buf (QB[8], QB_buf[8]);
buf (QB_final[8],QB[8]);
buf (QB[9], QB_buf[9]);
buf (QB_final[9],QB[9]);
buf (QB[10], QB_buf[10]);
buf (QB_final[10],QB[10]);
buf (QB[11], QB_buf[11]);
buf (QB_final[11],QB[11]);
buf (QB[12], QB_buf[12]);
buf (QB_final[12],QB[12]);
buf (QB[13], QB_buf[13]);
buf (QB_final[13],QB[13]);
buf (QB[14], QB_buf[14]);
buf (QB_final[14],QB[14]);
buf (QB[15], QB_buf[15]);
buf (QB_final[15],QB[15]);
buf (QB[16], QB_buf[16]);
buf (QB_final[16],QB[16]);
buf (QB[17], QB_buf[17]);
buf (QB_final[17],QB[17]);
buf (QB[18], QB_buf[18]);
buf (QB_final[18],QB[18]);
buf (QB[19], QB_buf[19]);
buf (QB_final[19],QB[19]);
buf (QB[20], QB_buf[20]);
buf (QB_final[20],QB[20]);
buf (QB[21], QB_buf[21]);
buf (QB_final[21],QB[21]);
buf (QB[22], QB_buf[22]);
buf (QB_final[22],QB[22]);
buf (QB[23], QB_buf[23]);
buf (QB_final[23],QB[23]);
buf (QB[24], QB_buf[24]);
buf (QB_final[24],QB[24]);
buf (QB[25], QB_buf[25]);
buf (QB_final[25],QB[25]);
buf (QB[26], QB_buf[26]);
buf (QB_final[26],QB[26]);
buf (QB[27], QB_buf[27]);
buf (QB_final[27],QB[27]);
buf (QB[28], QB_buf[28]);
buf (QB_final[28],QB[28]);
buf (QB[29], QB_buf[29]);
buf (QB_final[29],QB[29]);
buf (QB[30], QB_buf[30]);
buf (QB_final[30],QB[30]);
buf (QB[31], QB_buf[31]);
buf (QB_final[31],QB[31]);
buf (QB[32], QB_buf[32]);
buf (QB_final[32],QB[32]);
buf (QB[33], QB_buf[33]);
buf (QB_final[33],QB[33]);
buf (QB[34], QB_buf[34]);
buf (QB_final[34],QB[34]);
buf (QB[35], QB_buf[35]);
buf (QB_final[35],QB[35]);
buf (QB[36], QB_buf[36]);
buf (QB_final[36],QB[36]);
buf (QB[37], QB_buf[37]);
buf (QB_final[37],QB[37]);
buf (QB[38], QB_buf[38]);
buf (QB_final[38],QB[38]);
wire [6:0] ADRA_buf;
wire [6:0] delayed_ADRA;
buf (ADRA_buf[0], delayed_ADRA[0]);
buf (ADRA_buf[1], delayed_ADRA[1]);
buf (ADRA_buf[2], delayed_ADRA[2]);
buf (ADRA_buf[3], delayed_ADRA[3]);
buf (ADRA_buf[4], delayed_ADRA[4]);
buf (ADRA_buf[5], delayed_ADRA[5]);
buf (ADRA_buf[6], delayed_ADRA[6]);
wire [38:0] DA_buf;
wire [38:0] delayed_DA;
buf (DA_buf[0], delayed_DA[0]);
buf (DA_buf[1], delayed_DA[1]);
buf (DA_buf[2], delayed_DA[2]);
buf (DA_buf[3], delayed_DA[3]);
buf (DA_buf[4], delayed_DA[4]);
buf (DA_buf[5], delayed_DA[5]);
buf (DA_buf[6], delayed_DA[6]);
buf (DA_buf[7], delayed_DA[7]);
buf (DA_buf[8], delayed_DA[8]);
buf (DA_buf[9], delayed_DA[9]);
buf (DA_buf[10], delayed_DA[10]);
buf (DA_buf[11], delayed_DA[11]);
buf (DA_buf[12], delayed_DA[12]);
buf (DA_buf[13], delayed_DA[13]);
buf (DA_buf[14], delayed_DA[14]);
buf (DA_buf[15], delayed_DA[15]);
buf (DA_buf[16], delayed_DA[16]);
buf (DA_buf[17], delayed_DA[17]);
buf (DA_buf[18], delayed_DA[18]);
buf (DA_buf[19], delayed_DA[19]);
buf (DA_buf[20], delayed_DA[20]);
buf (DA_buf[21], delayed_DA[21]);
buf (DA_buf[22], delayed_DA[22]);
buf (DA_buf[23], delayed_DA[23]);
buf (DA_buf[24], delayed_DA[24]);
buf (DA_buf[25], delayed_DA[25]);
buf (DA_buf[26], delayed_DA[26]);
buf (DA_buf[27], delayed_DA[27]);
buf (DA_buf[28], delayed_DA[28]);
buf (DA_buf[29], delayed_DA[29]);
buf (DA_buf[30], delayed_DA[30]);
buf (DA_buf[31], delayed_DA[31]);
buf (DA_buf[32], delayed_DA[32]);
buf (DA_buf[33], delayed_DA[33]);
buf (DA_buf[34], delayed_DA[34]);
buf (DA_buf[35], delayed_DA[35]);
buf (DA_buf[36], delayed_DA[36]);
buf (DA_buf[37], delayed_DA[37]);
buf (DA_buf[38], delayed_DA[38]);
wire delayed_WEA;
buf (WEA_buf, delayed_WEA);
wire delayed_MEA;
buf (MEA_buf, delayed_MEA);
wire delayed_RSCIN;
buf (RSCIN_buf, delayed_RSCIN);
wire delayed_RSCEN;
buf (RSCEN_buf, delayed_RSCEN);
wire delayed_RSCRST;
buf (RSCRST_buf, delayed_RSCRST);
wire delayed_RSCLK;
buf (RSCLK_buf, delayed_RSCLK);
wire delayed_FISO;
buf (FISO_buf, delayed_FISO);
wire delayed_CLKA;
buf (CLKA_buf, delayed_CLKA);
wire delayed_TEST1A;
buf (TEST1A_buf, delayed_TEST1A);
wire delayed_RMEA;
buf (RMEA_buf, delayed_RMEA);
wire [2:0] RMA_int;
wire [3:0] RMA_buf;
wire [3:0] delayed_RMA;
buf (RMA_buf[0], delayed_RMA[0]);
buf (RMA_buf[1], delayed_RMA[1]);
buf (RMA_buf[2], delayed_RMA[2]);
buf (RMA_buf[3], delayed_RMA[3]);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire [6:0] ADRB_buf;
wire [6:0] delayed_ADRB;
buf (ADRB_buf[0], delayed_ADRB[0]);
buf (ADRB_buf[1], delayed_ADRB[1]);
buf (ADRB_buf[2], delayed_ADRB[2]);
buf (ADRB_buf[3], delayed_ADRB[3]);
buf (ADRB_buf[4], delayed_ADRB[4]);
buf (ADRB_buf[5], delayed_ADRB[5]);
buf (ADRB_buf[6], delayed_ADRB[6]);
wire delayed_MEB;
buf (MEB_buf, delayed_MEB);
wire delayed_CLKB;
buf (CLKB_buf, delayed_CLKB);
wire delayed_TEST1B;
buf (TEST1B_buf, delayed_TEST1B);
wire delayed_RMEB;
buf (RMEB_buf, delayed_RMEB);
wire [2:0] RMB_int;
wire [3:0] RMB_buf;
wire [3:0] delayed_RMB;
buf (RMB_buf[0], delayed_RMB[0]);
buf (RMB_buf[1], delayed_RMB[1]);
buf (RMB_buf[2], delayed_RMB[2]);
buf (RMB_buf[3], delayed_RMB[3]);
`endif // VIRAGE_FAST_VERILOG

// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [6 : 0] address;
input [5:0] bit_pos;
input flt_type;
reg [4:0] X_adr;
reg [1:0] Y_adr;
reg [7:0] col_address;
reg [163:0] memrow;
begin
  if (address < 128)
  begin
  if (uut.faultinj_en == 0)
  begin
    X_adr = address[6:2];
    Y_adr = address[1:0];
    uut.get_column_position (col_address, Y_adr, bit_pos);
    if (flt_type == 1)
    begin
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa1[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa0[X_adr] = memrow;
    end
    else
    begin
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa0[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa1[X_adr] = memrow;
    end
  end
  end
  else
  begin
    $display("\n%m<<VIRL_MEM_ERR: No fault injection for address out of range.>>(time %0t)", $time);
  end
end
endtask
`endif

reg disp_LS_msgA;
reg disp_LS_msgB;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msgA_old;
reg disp_LS_msgB_old;
initial
begin : reinit_msg_blk
  disp_LS_msgA_old = 1'b1;
  disp_LS_msgB_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    if ($realtime > 0 )
    begin
      if (msg_start_lmt > $realtime)
      begin
        en_msg_cntrl = 1'b0;
        en_msg_cntrl <= #(msg_start_lmt - $realtime) 1'b1;
      end
      if (msg_end_lmt > $realtime)
        en_msg_cntrl <= #(msg_end_lmt - $realtime) 1'b0;
      else
        en_msg_cntrl = 1'b0;
    end
    else
    begin
      mes_all_valid_old = 1'b0;
      en_msg_cntrl = 1'b0;
      en_msg_cntrl <= #msg_start_lmt 1'b1;
      en_msg_cntrl <= #msg_end_lmt 1'b0;
    end
  end
  else
  begin
    en_msg_cntrl = 1'b0;
    if ($realtime == 0)
      mes_all_valid_old = 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @( en_msg_cntrl )
begin
  if (en_msg_cntrl !== 1'b0 )
  begin
    if (!(en_msg_cntrl === 1'bx && mes_all_valid_old === 1'b1))
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msgA_old = disp_LS_msgA;
    assign disp_LS_msgA = 0;
    disp_LS_msgB_old = disp_LS_msgB;
    assign disp_LS_msgB = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msgA;
    disp_LS_msgA = disp_LS_msgA_old;
    deassign disp_LS_msgB;
    disp_LS_msgB = disp_LS_msgB_old;
    `ifdef SNPS_SUPPORT_UPF_SIM
    disp_LS_msgA = 1'b1;
    disp_LS_msgB = 1'b1;
     `endif
  end
end


`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for CLK: ENCLK
wire ENCLKA;

assign ENCLKA = (( (TEST1A_buf === 1'b0))?1'b1:1'b0) ;
wire ENCLKA_test1;
assign ENCLKA_test1 = ((  (TEST1A_buf === 1'b1))?1'b1:1'b0) ;
wire ENCLKA_rmezo,ENCLKA_vdm,ENCLKA_slw,ENCLKA_def,ENCLKA_fst,ENCLKA_fster;
assign ENCLKA_rmezo = (( RMEA_buf !== 1'b1)?1'b1:1'b0);
assign ENCLKA_vdm = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_slw = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b1) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_def = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b1) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_fst = (( RMEA_buf === 1'b1  && (RMA_buf[0] !== 1'b0) && (RMA_buf[1] !== 1'b0) && (RMA_buf[2] !== 1'b1) && (RMA_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKA_fster = (( RMEA_buf === 1'b1  && ((RMA_buf[2] !== 1'b0) && (RMA_buf[3] !== 1'b1)) )?1'b1:1'b0);
wire ENRSCIN;
assign ENRSCIN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCEN;
assign ENRSCEN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0)?1'b1:1'b0);
wire ENRSCRST;
assign ENRSCRST = ((FISO_buf === 1'b0)?1'b1:1'b0);
wire ENRSCLK;
assign ENRSCLK = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCRSTRSCLKrec;
assign ENRSCRSTRSCLKrec = ((FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCRSTCLKArec;
assign ENRSCRSTCLKArec = ((FISO_buf === 1'b0 && MEA_pre !== 1'b0  && WEA_pre !== 1'b0)?1'b1:1'b0);


wire ENRSCLKCLKArec;
assign ENRSCLKCLKArec = ((FISO_buf === 1'b0 && MEA_pre !== 1'b0  && WEA_pre !== 1'b0 && RSCRST_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);


wire ENRSCENCLKArec;
assign ENRSCENCLKArec = ((FISO_buf === 1'b0 && MEA_pre !== 1'b0  && WEA_pre !== 1'b0 && RSCRST_buf === 1'b0)?1'b1:1'b0);

// Setup/hold condition for CLK: ENCLK
wire ENCLKB;

assign ENCLKB = (( (TEST1B_buf === 1'b0))?1'b1:1'b0) ;
wire ENCLKB_test1;
assign ENCLKB_test1 = ((  (TEST1B_buf === 1'b1))?1'b1:1'b0) ;
wire ENCLKB_rmezo,ENCLKB_vdm,ENCLKB_slw,ENCLKB_def,ENCLKB_fst,ENCLKB_fster;
assign ENCLKB_rmezo = (( RMEB_buf !== 1'b1)?1'b1:1'b0);
assign ENCLKB_vdm = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_slw = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b1) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_def = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b1) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_fst = (( RMEB_buf === 1'b1  && (RMB_buf[0] !== 1'b0) && (RMB_buf[1] !== 1'b0) && (RMB_buf[2] !== 1'b1) && (RMB_buf[3] !== 1'b1) )?1'b1:1'b0);
assign ENCLKB_fster = (( RMEB_buf === 1'b1  && ((RMB_buf[2] !== 1'b0) && (RMB_buf[3] !== 1'b1)) )?1'b1:1'b0);
wire ENRSCRSTCLKBrec;
assign ENRSCRSTCLKBrec = ((FISO_buf === 1'b0 && MEB_pre !== 1'b0 )?1'b1:1'b0);


wire ENRSCLKCLKBrec;
assign ENRSCLKCLKBrec = ((FISO_buf === 1'b0 && MEB_pre !== 1'b0  && RSCRST_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);


wire ENRSCENCLKBrec;
assign ENRSCENCLKBrec = ((FISO_buf === 1'b0 && MEB_pre !== 1'b0  && RSCRST_buf === 1'b0)?1'b1:1'b0);

`endif // VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
 
 
always @ (QB_final)
 begin   
  if (QB_final !== 39'bx )
       CLKB_tcq = 1'b0;
 end
always @ (negedge CLKB_buf)
 begin
   CLKB_tcq = 1'b0;
 end
wire ADRA_valid;
assign ADRA_valid = ( ( ADRA_pre < 128 )?1'b1:1'b0);


wire ADRB_valid;
assign ADRB_valid = ( ( ADRB_pre < 128 )?1'b1:1'b0);


`endif // VIRAGE_FAST_VERILOG

wire RSCLK_fiso_buf, RSCIN_fiso_buf,RSCEN_fiso_buf,RSCRST_fiso_buf;
reg RSCEN_fiso_pre;
assign RSCIN_fiso_buf  =  (RSCIN_buf && !FISO_buf);
assign RSCEN_fiso_buf  =  (RSCEN_buf && !FISO_buf);
assign RSCRST_fiso_buf =  (RSCRST_buf && !FISO_buf);
assign RSCLK_fiso_buf =  (RSCLK_buf && !FISO_buf);

real t0a_pfirst, t1a_pfirst, t2a_pnow, t2a_nnow, t3a_me;
real t0b_pfirst, t1b_pfirst, t2b_pnow, t2b_nnow, t3b_me;
initial
begin
  t0a_pfirst = 0.0;
  t1a_pfirst = 0.0;
  t2a_pnow = 0.0;
  t2a_nnow = 0.0;
  t3a_me = 0.0;
  t0b_pfirst = 0.0;
  t1b_pfirst = 0.0;
  t2b_pnow = 0.0;
  t2b_nnow = 0.0;
  t3b_me = 0.0;
end

always @(posedge CLKA_buf)
begin
  t0a_pfirst = t1a_pfirst;
  t1a_pfirst = t2a_pnow;
  t2a_pnow = $realtime;
  if ((t1a_pfirst < t3a_me) && (t3a_me < t2a_pnow))
  begin   
    uut.diff_me_tcha = 1'b1;
  end
  if ((t0a_pfirst < t3a_me) && (t3a_me < t2a_pnow))
  begin   
    uut.diff_me_tcca = 1'b1;
  end
    @(negedge CLKA_buf)
    t2a_nnow = $realtime;
    #0.001;
    uut.diff_me_tcha = 1'b0;
    uut.diff_me_tcca = 1'b0;
end

always @(MEA_buf)
begin
  t3a_me = $realtime;
  if ((t2a_pnow < t3a_me) && (t2a_nnow < t3a_me))
  begin   
    uut.diff_me_tcha = 1'b1;
  end
end
always @(posedge CLKB_buf)
begin
  t0b_pfirst = t1b_pfirst;
  t1b_pfirst = t2b_pnow;
  t2b_pnow = $realtime;
  if ((t1b_pfirst < t3b_me) && (t3b_me < t2b_pnow))
  begin   
    uut.diff_me_tchb = 1'b1;
  end
  if ((t0b_pfirst < t3b_me) && (t3b_me < t2b_pnow))
  begin   
    uut.diff_me_tccb = 1'b1;
  end
    @(negedge CLKB_buf)
    t2b_nnow = $realtime;
    #0.001;
    uut.diff_me_tchb = 1'b0;
    uut.diff_me_tccb = 1'b0;
end

always @(MEB_buf)
begin
  t3b_me = $realtime;
  if ((t2b_pnow < t3b_me) && (t2b_nnow < t3b_me))
  begin   
    uut.diff_me_tchb = 1'b1;
  end
end

// Setup/hold conditions for syncronous signals
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRA is : ENADRA
wire ENADRA;
assign ENADRA = (((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0)))    && (LS_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEA is : ENMEA
wire ENMEA;
assign ENMEA = (((((WEA_pre !== 1'b0 && (ADRA_valid || flag_ADRA_x))))   ) ?1'b1:1'b0);

// Setup/hold condition for Write Enable: WEA is : ENWEA
wire ENWEA;
assign ENWEA = (((((MEA_pre !== 1'b0 && (ADRA_valid || flag_ADRA_x) )))    && (LS_buf === 1'b0)) ?1'b1:1'b0);

// Setup/hold condition for Data In: DA is : ENDA
wire ENDA;
assign ENDA = (( ADRA_valid && ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0))    && (LS_buf === 1'b0))?1'b1:1'b0) ;

// Setup/hold condition for test1 Vector: TEST1A is : ENTEST1A
wire ENTEST1A;
assign ENTEST1A = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
 

// Setup/hold condition for Read Margin Vector: RMA is : ENRMA
wire ENRMA;
assign ENRMA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid && RMEA_buf !== 1'b0  && (LS_buf === 1'b0) )?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMEA is : ENRMEA
wire ENRMEA;
assign ENRMEA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for Light Sleep:  ENLS_A 
wire ENLS_A;
assign ENLS_A  = (( MEA_pre !== 1'b0 && WEA_pre !== 1'b0) ?1'b1:1'b0);
// Setup/hold condition for Address: ADRB is : ENADRB
wire ENADRB;
assign ENADRB = (((((MEB_pre !== 1'b0)))  && (LS_buf === 1'b0) ) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEB is : ENMEB
wire ENMEB;
assign ENMEB = (( (ADRB_valid || flag_ADRB_x)  ) ?1'b1:1'b0);


// Setup/hold condition for test1 Vector: TEST1B is : ENTEST1B
wire ENTEST1B;
assign ENTEST1B = ((MEB_pre !== 1'b0 && ADRB_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
 

// Setup/hold condition for Read Margin Vector: RMB is : ENRMB
wire ENRMB;
assign ENRMB = ((MEB_pre !== 1'b0 && ADRB_valid && RMEB_buf !== 1'b0  && (LS_buf === 1'b0) )?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RMEB is : ENRMEB
wire ENRMEB;
assign ENRMEB = ((MEB_pre !== 1'b0 && ADRB_valid   && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for Light Sleep:  ENLS_B 
wire ENLS_B;
assign ENLS_B  = (( MEB_pre !== 1'b0) ?1'b1:1'b0);

`endif // VIRAGE_FAST_VERILOG

reg MEA_buf_L;
reg WEA_buf_L;
reg MEB_buf_L;

`ifdef VIRAGE_FAST_VERILOG
`else

// Recovery conditions for clock signals



wire ADRA_same;
wire  [6 : 0 ] ADRB_chk;
real CLKA_UTIME;
real CLKB_UTIME;
assign ADRB_chk = ((CLKA_UTIME == CLKB_UTIME)? ADRB_pre : ADRB_buf_L);

assign ADRA_same = (((ADRA_pre == ADRB_chk) && ADRA_valid) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || ((ADRA_pre^ADRA_pre) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0)) ? 1'b1:1'b0;


wire WEA_active;
assign WEA_active = ( ( WEA_pre === 1'b0 ) )?1'b0:1'b1;

wire MEA_active;
wire MEB_chk;
assign MEB_chk = ((CLKA_UTIME == CLKB_UTIME)? MEB_pre : MEB_buf_L);
assign MEA_active = ( ( MEA_pre !== 1'b0 ) && ( MEB_chk !== 1'b0 ))?1'b1:1'b0;

wire   ENCLKBCLKArec;
assign ENCLKBCLKArec = ( ( ADRA_same  && MEA_active && WEA_active  && (LS_buf === 1'b0)  ) ? 1'b1:1'b0);

wire ADRB_same;
wire  [6 : 0 ] ADRA_chk;
assign ADRA_chk = ((CLKA_UTIME == CLKB_UTIME)? ADRA_pre : ADRA_buf_L);

assign ADRB_same = (((ADRB_pre == ADRA_chk) && ADRB_valid) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || ((ADRB_pre^ADRB_pre) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0)) ? 1'b1:1'b0;


wire _active;
wire WEA_chk;
assign WEA_chk = ((CLKA_UTIME == CLKB_UTIME)? WEA_pre : WEA_buf_L);
assign _active = ( ( WEA_chk === 1'b0 ) )?1'b0:1'b1;

wire MEB_active;
wire MEA_chk;
assign MEA_chk = ((CLKA_UTIME == CLKB_UTIME)? MEA_pre : MEA_buf_L);
assign MEB_active = ( ( MEB_pre !== 1'b0 ) && ( MEA_chk !== 1'b0 ))?1'b1:1'b0;

wire   ENCLKACLKBrec;
assign ENCLKACLKBrec = ( ( ADRB_same  && MEB_active && _active  && (LS_buf === 1'b0)  ) ? 1'b1:1'b0);

wire recovery_ab;
assign recovery_ab = ( WEA_buf_L !== 1'b0 );
`endif // VIRAGE_FAST_VERILOG

wire LS_old;
reg tmp_LS_buf;

`ifdef VIRAGE_FAST_VERILOG
`else
specify
 

    specparam

        Tac = 0.050,
        Tcax = 0.084,
        Tdc = 0.007,
        Tcdx = 0.119,
        Twc = 0.050,
        Tcwx = 0.025,
        Tmc = 0.050,
        Tcmx = 0.022,
        Trinc = 0.062,
        Tcrinx = 0.071,
        Trenc = 0.062,
        Tcrenx = 0.071,
        Trenclkrec = 6.263,
        Trrstrclkrec = 6.158,
        Trrstclkrec = 6.212,
        Trrst = 0.073,
        Trclkclkrec = 6.263,
        Trclkl = 0.340,
        Trclkh = 0.136,
        Trclkc = 0.477,
        Tcsep = 0.428,
        Tcl = 0.076,
        Tcltest1 = 0.239,
        Tch = 0.059,
        Tchtest1 = 0.276,
        Tcc = 0.421,
        Tccvddmin = 0.584,
        Tccslow = 0.533,
        Tccdef = 0.421,
        Tccfast = 0.406,
        Tccfaster = 0.398,
        Tt1c = 0.050,
        Tct1x = 0.407,
        Trmec = 0.142,
        Tcrmex = 0.084,
        Trmc = 0.142,
        Trm2c = 0.052,
        Trm3c = 0.092,
        Tcrmx = 0.084,
        Tcrm2x = 0.428,
        Tcrm3x = 0.428,
        Trlsc = 0.036,
        Tflsc = 0.052,
        Tlsx = 0.067,
        Trclkrout = 0.133,
        Tcq = 0.239,
        Tcqx = 0.144,
        Tcqvddmin = 0.251,
        Tcqvddminx = 0.144,
        Tcqslow = 0.251,
        Tcqslowx = 0.144,
        Tcqdef = 0.239,
        Tcqdefx = 0.144,
        Tcqfast = 0.237,
        Tcqfastx = 0.144,
        Tcqfaster = 0.234,
        Tcqfasterx = 0.144,
        Tcqtest1x = 0.144,
        Tcqtest1 = 0.239;
     if ( !FISO & RSCEN )
       ( posedge RSCLK => (  RSCOUT  : 1'bx )) = (  Trclkrout, Trclkrout );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RMEB & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & !RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & RMB[0] & !RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & !RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[0] & RMB[1] & !RMB[2] & !RMB[3] & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RMEB & RMB[2] & !RMB[3]  & !LS & !TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( posedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1B )
       ( negedge CLKB => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );



// Timing Checks

  $width (posedge RSCRST &&& ENRSCRST, Trrst, 0, notif_rscrst);
  $width (negedge RSCLK &&& ENRSCLK, Trclkl, 0, notif_rsclk);
  $width (posedge RSCLK &&& ENRSCLK, Trclkh, 0, notif_rsclk);
  $period (posedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $period (negedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $width (negedge CLKA &&& ENCLKA, Tcl, 0, notif_clka);
  $width (negedge CLKA &&& ENCLKA_test1, Tcltest1, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA, Tch, 0, notif_clka);
  $width (posedge CLKA &&& ENCLKA_test1, Tchtest1, 0, notif_clka);
  $period (posedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_rmezo, Tcc, notif_clka);
  $period (posedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_vdm, Tccvddmin, notif_clka);
  $period (posedge CLKA &&& ENCLKA_slw, Tccslow, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_slw, Tccslow, notif_clka);
  $period (posedge CLKA &&& ENCLKA_def, Tccdef, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_def, Tccdef, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fst, Tccfast, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_fst, Tccfast, notif_clka);
  $period (posedge CLKA &&& ENCLKA_fster, Tccfaster, notif_clkap);
  $period (negedge CLKA &&& ENCLKA_fster, Tccfaster, notif_clka);
  $width (negedge CLKB &&& ENCLKB, Tcl, 0, notif_clkb);
  $width (negedge CLKB &&& ENCLKB_test1, Tcltest1, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB, Tch, 0, notif_clkb);
  $width (posedge CLKB &&& ENCLKB_test1, Tchtest1, 0, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_rmezo, Tcc, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_vdm, Tccvddmin, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_slw, Tccslow, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_def, Tccdef, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_def, Tccdef, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_fst, Tccfast, notif_clkb);
  $period (posedge CLKB &&& ENCLKB_fster, Tccfaster, notif_clkbp);
  $period (negedge CLKB &&& ENCLKB_fster, Tccfaster, notif_clkb);

  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[0] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[1] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[2] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[3] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[4] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[5] );
  $setuphold (posedge CLKA  &&& ENADRA, posedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENADRA, negedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLKA, delayed_ADRA[6] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLKA, delayed_DA[0] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLKA, delayed_DA[1] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLKA, delayed_DA[2] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLKA, delayed_DA[3] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLKA, delayed_DA[4] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLKA, delayed_DA[5] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLKA, delayed_DA[6] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLKA, delayed_DA[7] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLKA, delayed_DA[8] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLKA, delayed_DA[9] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLKA, delayed_DA[10] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLKA, delayed_DA[11] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLKA, delayed_DA[12] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLKA, delayed_DA[13] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLKA, delayed_DA[14] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLKA, delayed_DA[15] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLKA, delayed_DA[16] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLKA, delayed_DA[17] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLKA, delayed_DA[18] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLKA, delayed_DA[19] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLKA, delayed_DA[20] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLKA, delayed_DA[21] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLKA, delayed_DA[22] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLKA, delayed_DA[23] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLKA, delayed_DA[24] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLKA, delayed_DA[25] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLKA, delayed_DA[26] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLKA, delayed_DA[27] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLKA, delayed_DA[28] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLKA, delayed_DA[29] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLKA, delayed_DA[30] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLKA, delayed_DA[31] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLKA, delayed_DA[32] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLKA, delayed_DA[33] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLKA, delayed_DA[34] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLKA, delayed_DA[35] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLKA, delayed_DA[36] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLKA, delayed_DA[37] );
  $setuphold (posedge CLKA  &&& ENDA, posedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENDA, negedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLKA, delayed_DA[38] );
  $setuphold (posedge CLKA  &&& ENWEA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENWEA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLKA, delayed_WEA );
  $setuphold (posedge CLKA  &&& ENMEA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge CLKA  &&& ENMEA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLKA, delayed_MEA );
  $setuphold (posedge RSCLK  &&& ENRSCIN, posedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCIN, negedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, posedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, negedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK , posedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge RSCLK , negedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge CLKA  &&& ENTEST1A, posedge TEST1A,Tt1c, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENTEST1A, negedge TEST1A,Tt1c, 0, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, posedge TEST1A,0, Tct1x, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (negedge CLKA  &&& ENTEST1A, negedge TEST1A,0, Tct1x, notif_test1a,,, delayed_CLKA, delayed_TEST1A );
  $setuphold (posedge CLKA  &&& ENRMEA, posedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMEA, negedge RMEA,Trmec, Tcrmex, notif_rmea,,, delayed_CLKA, delayed_RMEA );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[0], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[0] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[1], Trmc, Tcrmx, notif_rma,,, delayed_CLKA, delayed_RMA[1] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[2], Trm2c, Tcrm2x, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[2], Trm2c, Tcrm2x, notif_rma,,, delayed_CLKA, delayed_RMA[2] );
  $setuphold (posedge CLKA  &&& ENRMA, posedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENRMA, negedge RMA[3], Trm3c, Tcrm3x, notif_rma,,, delayed_CLKA, delayed_RMA[3] );
  $setuphold (posedge CLKA  &&& ENLS_A, posedge LS,Trlsc, Tlsx, notif_ls_a,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKA  &&& ENLS_A, negedge LS,Tflsc, Tlsx, notif_ls_a,,, delayed_CLKA, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, posedge LS,Trlsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENLS_B, negedge LS,Tflsc, Tlsx, notif_ls_b,,, delayed_CLKB, delayed_LS );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[0] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[1] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[2] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[3] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[4] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[5] );
  $setuphold (posedge CLKB  &&& ENADRB, posedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENADRB, negedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLKB, delayed_ADRB[6] );
  $setuphold (posedge CLKB  &&& ENMEB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENMEB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLKB, delayed_MEB );
  $setuphold (posedge CLKB  &&& ENTEST1B, posedge TEST1B,Tt1c, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENTEST1B, negedge TEST1B,Tt1c, 0, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, posedge TEST1B,0, Tct1x, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (negedge CLKB  &&& ENTEST1B, negedge TEST1B,0, Tct1x, notif_test1b,,, delayed_CLKB, delayed_TEST1B );
  $setuphold (posedge CLKB  &&& ENRMEB, posedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMEB, negedge RMEB,Trmec, Tcrmex, notif_rmeb,,, delayed_CLKB, delayed_RMEB );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[0], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[0] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[1], Trmc, Tcrmx, notif_rmb,,, delayed_CLKB, delayed_RMB[1] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[2], Trm2c, Tcrm2x, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[2], Trm2c, Tcrm2x, notif_rmb,,, delayed_CLKB, delayed_RMB[2] );
  $setuphold (posedge CLKB  &&& ENRMB, posedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $setuphold (posedge CLKB  &&& ENRMB, negedge RMB[3], Trm3c, Tcrm3x, notif_rmb,,, delayed_CLKB, delayed_RMB[3] );
  $recrem ( negedge RSCEN,posedge CLKA  &&& ENRSCENCLKArec, Trenclkrec, Trenclkrec, notif_rscen_CLKA_rise_fall_rec,,, delayed_RSCEN, delayed_CLKA);
  $recrem ( negedge RSCEN,posedge CLKB  &&& ENRSCENCLKBrec, Trenclkrec, Trenclkrec, notif_rscen_CLKB_rise_fall_rec,,, delayed_RSCEN, delayed_CLKB);
  $recrem ( negedge RSCRST,posedge RSCLK  &&& ENRSCRSTRSCLKrec, Trrstrclkrec, Trrstrclkrec, notif_rscrst_RSCLK_rise_fall_rec,,, delayed_RSCRST, delayed_RSCLK);
  $recrem ( negedge RSCRST,posedge CLKA  &&& ENRSCRSTCLKArec, Trrstclkrec, Trrstclkrec, notif_rscrst_CLKA_rise_fall_rec,,, delayed_RSCRST, delayed_CLKA);
  $recrem ( negedge RSCRST,posedge CLKB  &&& ENRSCRSTCLKBrec, Trrstclkrec, Trrstclkrec, notif_rscrst_CLKB_rise_fall_rec,,, delayed_RSCRST, delayed_CLKB);
  $recrem ( posedge RSCLK,posedge CLKA  &&& ENRSCLKCLKArec, Trclkclkrec, Trclkclkrec, notif_rsclk_CLKA_rise_rise_rec,,, delayed_RSCLK, delayed_CLKA);
  $recrem ( posedge RSCLK,posedge CLKB  &&& ENRSCLKCLKBrec, Trclkclkrec, Trclkclkrec, notif_rsclk_CLKB_rise_rise_rec,,, delayed_RSCLK, delayed_CLKB);
  $recrem ( posedge CLKA ,posedge CLKB  &&& ENCLKACLKBrec, Tcsep, Tcsep, notif_clka_CLKB_rise_rise_rec,,, delayed_CLKA, delayed_CLKB);
  $recrem ( posedge CLKB ,posedge CLKA  &&& ENCLKBCLKArec, Tcsep, Tcsep, notif_clkb_CLKA_rise_rise_rec,,, delayed_CLKB, delayed_CLKA);

endspecify
`endif // VIRAGE_FAST_VERILOG
wire CLKA_mem;
wire CLKB_mem;
wire test1_ls_pwr, mux_ls;

assign test1_ls_pwr = ((uut.TEST1Alatched === 1'b1 && uut.MEAlatched === 1'b1 && uut.WEAlatched === 1'b1 ) || (uut.TEST1Blatched === 1'b1 && uut.MEBlatched === 1'b1 )) && LS_buf;

assign mux_ls = (test1_ls_pwr === 1'b1) ? LS_old : ((test1_ls_pwr === 1'b0) ? LS_buf : 1'bX);









`ifdef VIRAGE_FAST_VERILOG

generic_behav_RF_2PHD_128x39 #(MES_CNTRL, PreloadFilename, debug_mode, MemFault_Inj) uut (  .RSCOUT(RSCOUT_buf), .QB(QB_buf), .ADRA(ADRA_pre), .DA(DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .CLKA(CLKA_mem), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA(RMA_int), .LS(LS_buf), .ADRB(ADRB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB(RMB_int) );

`else

generic_behav_RF_2PHD_128x39 #(MES_CNTRL, PreloadFilename, debug_mode, MemFault_Inj) uut (  .RSCOUT(RSCOUT_buf), .QB(QB_buf), .ADRA(ADRA_pre), .DA(DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .CLKA(CLKA_mem), .TEST1A(TEST1A_buf), .RMEA(RMEA_buf), .RMA(RMA_int), .LS(LS_buf), .ADRB(ADRB_pre), .MEB(MEB_pre), .CLKB(CLKB_mem), .TEST1B(TEST1B_buf), .RMEB(RMEB_buf), .RMB(RMB_int), .CLKB_tcq (CLKB_tcq),.notif_adra(notif_adra), .notif_da(notif_da), .notif_wea(notif_wea), .notif_mea(notif_mea), .notif_rscin(notif_rscin), .notif_rscen(notif_rscen), .notif_rscen_CLKA_rise_fall_rec(notif_rscen_CLKA_rise_fall_rec), .notif_rscen_CLKB_rise_fall_rec(notif_rscen_CLKB_rise_fall_rec), .notif_rscrst(notif_rscrst), .notif_rscrst_RSCLK_rise_fall_rec(notif_rscrst_RSCLK_rise_fall_rec), .notif_rscrst_CLKA_rise_fall_rec(notif_rscrst_CLKA_rise_fall_rec), .notif_rscrst_CLKB_rise_fall_rec(notif_rscrst_CLKB_rise_fall_rec), 
.notif_rsclk(notif_rsclk), .notif_rsclk_CLKA_rise_rise_rec(notif_rsclk_CLKA_rise_rise_rec), .notif_rsclk_CLKB_rise_rise_rec(notif_rsclk_CLKB_rise_rise_rec), .notif_fiso(notif_fiso), .notif_clka(notif_clka), .notif_clkap(notif_clkap), .notif_clka_CLKB_rise_rise_rec(notif_clka_CLKB_rise_rise_rec), .notif_test1a(notif_test1a), .notif_rmea(notif_rmea), .notif_rma(notif_rma), .notif_ls_a(notif_ls_a), .notif_ls_b(notif_ls_b), .notif_adrb(notif_adrb), .notif_meb(notif_meb), .notif_clkb(notif_clkb), .notif_clkbp(notif_clkbp), .notif_clkb_CLKA_rise_rise_rec(notif_clkb_CLKA_rise_rise_rec), .notif_test1b(notif_test1b), .notif_rmeb(notif_rmeb), .notif_rmb(notif_rmb) );

`endif // VIRAGE_FAST_VERILOG


always @( ADRA_buf or negedge CLKA_buf)
 begin
  #0;
   if ( CLKA_buf == 1'b0)
   begin
     ADRA_pre = ADRA_buf;
   end
   if ( ^ADRA_buf === 1'bx )
   begin
     flag_ADRA_x = 1'b1;
   end
   else
   begin
     flag_ADRA_x = 1'b0;
   end
 end

always @( MEA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) MEA_pre = MEA_buf;
  end

always @( DA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) DA_pre = DA_buf;
  end

always @( WEA_buf or negedge CLKA_buf)
  begin
  #0;
    if ( CLKA_buf == 1'b0) WEA_pre = WEA_buf;
  end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO_buf or negedge RSCLK_fiso_buf or RSCEN_fiso_buf)
begin : blk_rscenbuf_0
  if (FISO_buf == 1'b1)
    RSCEN_fiso_pre = 1'b0;
  else
  if ( RSCLK_fiso_buf == 1'b0)
    RSCEN_fiso_pre = RSCEN_fiso_buf;
end // end of always block blk_rscenbuf_0

assign RMA_int = ((RMEA_buf===1'b1)?RMA_buf[2:0]:((RMEA_buf===1'b0)?3'b010:3'bx));


always @( posedge CLKA_buf)
begin
    MEA_buf_L = MEA_pre;
    WEA_buf_L = WEA_pre;
  `ifdef VIRAGE_FAST_VERILOG
  `else

    CLKA_UTIME = $realtime;
  if (LS_buf ===  1'b1  )
  begin
    MEA_buf_L = 1'b0;
  end
  ADRA_buf_L = ADRA_pre;
    #0;

    if (CLKA_UTIME == CLKB_UTIME)
    begin
    #0;
      if (((ADRA_buf_L === ADRB_buf_L) && ADRA_valid) || (CLKA_buf === 1'bx || CLKB_buf === 1'bx) || ((ADRA_buf_L^ADRA_buf_L) !== 0) || ((ADRB_buf_L^ADRB_buf_L) !== 0))
      begin
         if ((MEA_buf_L !== 1'b0 && MEB_buf_L !== 1'b0) && (recovery_ab == 1'b1))
         begin

           if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid == 1'b1)
           begin
             $display("\n VIRL_MEM_ERR:Entered recovery block (posedge CLKA,posedge CLKB) (time %t), instance=%m", $time);
           end // end of if(MES_CNTRL=="ON" && $realtime != 0 

           if(notif_clkb_CLKA_rise_rise_rec === 1'bx)
             notif_clkb_CLKA_rise_rise_rec = 1'b0;
           else
             notif_clkb_CLKA_rise_rise_rec = !notif_clkb_CLKA_rise_rise_rec;
         end 
      end
    end //end of if (uut.CLKA_UTIME == uut.CLKB_UTIME)

  `endif // VIRAGE_FAST_VERILOG

end  // end of always @( posedge CLKA_buf)

always @( ADRB_buf or negedge CLKB_buf)
 begin
  #0;
   if ( CLKB_buf == 1'b0)
   begin
     ADRB_pre = ADRB_buf;
   end
   if ( ^ADRB_buf === 1'bx )
   begin
     flag_ADRB_x = 1'b1;
   end
   else
   begin
     flag_ADRB_x = 1'b0;
   end
 end

always @( MEB_buf or negedge CLKB_buf)
  begin
  #0;
    if ( CLKB_buf == 1'b0) MEB_pre = MEB_buf;
  end



assign RMB_int = ((RMEB_buf===1'b1)?RMB_buf[2:0]:((RMEB_buf===1'b0)?3'b010:3'bx));

always @( posedge CLKB_buf)
begin
    MEB_buf_L = MEB_pre;
  `ifdef VIRAGE_FAST_VERILOG
  `else

    CLKB_tcq = 1'b1;
    CLKB_UTIME = $realtime;
  if (LS_buf ===  1'b1  )
  begin
    MEB_buf_L = 1'b0;
  end
  ADRB_buf_L = ADRB_pre;
    #0;

    if (CLKB_UTIME == CLKA_UTIME)
    begin
    #0;
      if (((ADRB_buf_L === ADRA_buf_L) && ADRB_valid) || (CLKB_buf === 1'bx || CLKA_buf === 1'bx) || ((ADRB_buf_L^ADRB_buf_L) !== 0) || ((ADRA_buf_L^ADRA_buf_L) !== 0))
      begin
         if ((MEB_buf_L !== 1'b0 && MEA_buf_L !== 1'b0) && (recovery_ab == 1'b1))
         begin

           if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && uut.mes_all_valid == 1'b1)
           begin
             $display("\n VIRL_MEM_ERR:Entered recovery block (posedge CLKB,posedge CLKA) (time %t), instance=%m", $time);
           end // end of if(MES_CNTRL=="ON" && $realtime != 0 

           if(notif_clka_CLKB_rise_rise_rec === 1'bx)
             notif_clka_CLKB_rise_rise_rec = 1'b0;
           else
             notif_clka_CLKB_rise_rise_rec = !notif_clka_CLKB_rise_rise_rec;
         end 
      end
    end //end of if (uut.CLKB_UTIME == uut.CLKA_UTIME)

  `endif // VIRAGE_FAST_VERILOG

end  // end of always @( posedge CLKB_buf)



`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_da = {notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0};

`endif // endif of VIRAGE_FAST_VERILOG

initial
begin
disp_LS_msgA = 1'b1;
disp_LS_msgB = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgA = 1'b1;
  disp_LS_msgA_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLKA_buf)
begin : blk_ls_0
  if (LS_buf === 1'b1 && MEA_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgA === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port A : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgA = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgB = 1'b1;
  disp_LS_msgB_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLKB_buf)
begin : blk_ls_1
  if (LS_buf === 1'b1 && MEB_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgB === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING: Port B : No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgB = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_1


reg del_CLKA_buf, del_CLKB_buf;
always @(CLKA_mem)
begin
  if (CLKA_mem === 1'b1)
  begin
    del_CLKA_buf = CLKA_mem && MEA_pre && WEA_pre;
    if (TEST1A_buf === 1'b0)
      #0.251 del_CLKA_buf = 1'b0;
  end
  else
  begin
    del_CLKA_buf = CLKA_mem;
  end
end
always @(CLKB_mem)
begin
  if (CLKB_mem === 1'b1)
  begin
    del_CLKB_buf = CLKB_mem && MEB_pre;
    if (TEST1B_buf === 1'b0)
      #0.251 del_CLKB_buf = 1'b0;
  end
  else
  begin
    del_CLKB_buf = CLKB_mem;
  end
end
always @(LS_buf)
begin
  tmp_LS_buf <= LS_buf;
end
assign LS_old = ((del_CLKA_buf === 1'b0 && del_CLKB_buf === 1'b0) || (LS_buf === 1'b0)) ? tmp_LS_buf : LS_old;
assign CLKA_mem = CLKA_buf;
assign CLKB_mem = CLKB_buf;

always @(RMA_buf[3])
begin
  if(RMA_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL=="ON"|| MES_CNTRL=="WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING: RMA[3] is unknown>> at time=%t; instance=%m (RF_2PHD_128x39_core)",$realtime);
    end
  end
end
always @(RMB_buf[3])
begin
  if(RMB_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL=="ON"|| MES_CNTRL=="WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING: RMB[3] is unknown>> at time=%t; instance=%m (RF_2PHD_128x39_core)",$realtime);
    end
  end
end

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG

module generic_behav_RF_2PHD_128x39 (  RSCOUT, QB, ADRA, DA, WEA, MEA, RSCIN, RSCEN, RSCRST, RSCLK, FISO, CLKA, TEST1A, RMEA, RMA, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB );

`else

module generic_behav_RF_2PHD_128x39 (  RSCOUT, QB, ADRA, DA, WEA, MEA, RSCIN, RSCEN, RSCRST, RSCLK, FISO, CLKA, TEST1A, RMEA, RMA, LS, ADRB, MEB, CLKB, TEST1B, RMEB, RMB, CLKB_tcq,notif_adra, notif_da, notif_wea, notif_mea, notif_rscin, notif_rscen, notif_rscen_CLKA_rise_fall_rec, notif_rscen_CLKB_rise_fall_rec, notif_rscrst, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLKA_rise_fall_rec, notif_rscrst_CLKB_rise_fall_rec, notif_rsclk, notif_rsclk_CLKA_rise_rise_rec, notif_rsclk_CLKB_rise_rise_rec, notif_fiso, notif_clka, notif_clkap, notif_clka_CLKB_rise_rise_rec, notif_test1a, notif_rmea, notif_rma, notif_ls_a, notif_ls_b, notif_adrb, notif_meb, notif_clkb, notif_clkbp, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_rmeb, notif_rmb );

`endif //VIRAGE_FAST_VERILOG

parameter MES_CNTRL = "ON";
parameter PreloadFilename = "init.file";
parameter debug_mode = 1;
parameter MemFault_Inj = 0;

parameter words = 128, bits = 39, addrbits = 7, timingmode = 1, rmbits=3;

output RSCOUT;
output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input WEA;
input MEA;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input CLKA;
input TEST1A;
input RMEA;
input [rmbits-1:0] RMA;
input LS;
input [addrbits-1:0] ADRB;
input MEB;
input CLKB;
input TEST1B;
input RMEB;
input [rmbits-1:0] RMB;


`ifdef VIRAGE_FAST_VERILOG
`else
input CLKB_tcq;
input [38:0] notif_da;
input notif_adra, notif_wea, notif_mea, notif_rscin, notif_rscen, notif_rscen_CLKA_rise_fall_rec, notif_rscen_CLKB_rise_fall_rec, notif_rscrst, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLKA_rise_fall_rec, notif_rscrst_CLKB_rise_fall_rec, notif_rsclk, notif_rsclk_CLKA_rise_rise_rec, notif_rsclk_CLKB_rise_rise_rec, notif_fiso, notif_clka, notif_clkap, notif_clka_CLKB_rise_rise_rec, notif_test1a, notif_rmea, notif_rma, notif_ls_a, notif_ls_b, notif_adrb, notif_meb, notif_clkb, notif_clkbp, notif_clkb_CLKA_rise_rise_rec, notif_test1b, notif_rmeb, notif_rmb;

`endif // VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };


reg RSCOUT;
wire RSCOUT_tmp;
reg mes_all_valid;
reg [163:0] mem_core_array [0:31];
reg [38:0] mem_core_array_read [0:127];
wire  [bits-1:0]  QB_temp;
reg  [bits-1:0]  QB;
reg  [bits-1:0]  QB_local;
reg    [38:0]  memdata;

reg  left_col_out_range;
reg  right_col_out_range;
integer bit_cnt;
reg disp_RSCLK_msg;
reg flaga_clear_scan_reg;
reg flaga_shift_ok;
reg RST_check ;
reg RST_tri ;
reg [17:0] scan_reg;
reg RSCOUT_local;
reg
        flaga_we_ok,
        flaga_d_ok,
        flaga_adr_ok,
        flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_adr_x;

reg  [addrbits-1:0] ADRAlatched;
reg  [addrbits-1:0] ADRA_old;
reg  [bits-1:0] DAlatched;
reg  [bits-1:0] DA_old;
reg WEAlatched;
reg WEA_old;
reg  TEST1Alatched;
reg  TEST1A_old;
reg  LSlatchedA;
reg  LS_oldA;
reg diff_me_tcha, diff_me_tcca;
reg  RSCENlatched;
reg  MEAlatched;
reg  MEA_old;
reg  MEA_chk;
real CLKA_TIME;
reg
        flagb_read_ok,
        flagb_rm_ok,
        flagb_adr_ok,
        flagb_range_ok;
reg     flagb_clk_valid;
reg     flagb_adr_x;

event   event_on_B_port;

reg  [addrbits-1:0] ADRBlatched;
reg  [addrbits-1:0] ADRB_old;
reg  TEST1Blatched;
reg  TEST1B_old;
reg  LSlatchedB;
reg  LS_oldB;
reg diff_me_tchb, diff_me_tccb;
reg  MEBlatched;
reg  MEB_old;
reg  MEB_chk;
reg [bits-1:0] bit_corrupt;
reg [bits-1:0] memdata_bef_wrt;
reg flag_simul_clk;
real CLKB_TIME;

`ifdef VIRAGE_FAST_VERILOG
`else

real CLKB_tcqtime;

always @(negedge CLKB_tcq) begin
   CLKB_tcqtime = $realtime;
end
`endif // VIRAGE_FAST_VERILOG

integer i;
parameter MaxCol =164;
parameter MaxRow = 32 ;
integer tempcnt;
reg [MaxCol-1:0]mem_fault_array_XOR[0:MaxRow-1];
reg [MaxCol-1:0]mem_fault_array_sa0[0:MaxRow-1];
reg [MaxCol-1:0]mem_fault_array_sa1[0:MaxRow-1];
reg faultinj_en;
initial
begin : reinit_fault_blk
  faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
  faultinj_en = 1'b1;
`else
  if (MemFault_Inj == 1)
    faultinj_en = 1'b1;
`endif
  for (tempcnt=0; tempcnt<MaxRow; tempcnt=tempcnt+1)
  begin
    if (faultinj_en == 1)
      mem_fault_array_XOR[tempcnt] = 0;
    else
    begin
      mem_fault_array_sa0[tempcnt] = {MaxCol{1'b1}};
      mem_fault_array_sa1[tempcnt] = 0;
    end
  end
  if (faultinj_en == 1)
  begin
 if ($test$plusargs("star_error_fail")) 
   begin
    mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4) | (1'b1 << 8);
  end // if of +star_error_fail is used
       else if ($test$plusargs("star_error_a")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 4) | (1'b1 << 88); 
       end // if of +star_error_a is used 
       else if ($test$plusargs("star_error_b")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 44) | (1'b1 << 124); 
       end // if of +star_error_b is used 
       else if ($test$plusargs("star_error_c")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 83) | (1'b1 << 163); 
       end // if of +star_error_c is used 

     else if ($test$plusargs("star_error")) 
  begin
    mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4);
  end // if of +star_error is used
  end
end // end of initial block


initial
begin
  mes_all_valid = 0;
  MEA_chk = 1'b0;
  MEB_chk = 1'b0;
  diff_me_tcha = 1'b0;
  diff_me_tcca = 1'b0;
  diff_me_tchb = 1'b0;
  diff_me_tccb = 1'b0;
end

function is_adr_Valid;  // 1-bit return value
 input [addrbits-1:0] addr_to_check;
 reg     ret_value;
 begin
  ret_value = `True;
   if ((^addr_to_check) === 1'bx ) begin
    flaga_adr_x = `True;
    flagb_adr_x = `True;
    ret_value = `False;
   end
   is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*6:1] signal;
begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask


// Calculate Column position
task get_column_position;
output [7:0] column_position;
input [1:0] Y_adr;
input [5:0] bit_index;
reg [4:0] blk_right;
reg [4:0] blk_left;
begin
  if ( ^scan_reg === 1'bX )
  begin
    left_col_out_range = 1'bx;
    right_col_out_range = 1'bx;
    if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m<<VIRL_MEM_ERR: INVALID RECONFIG REGISTER COLUMN>>(time %0t)", $time);
    end
  end
  if ( bit_index > 19)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      if (scan_reg[11:9] === 3'b0)
      begin
        if ({scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 5'b10010 )
        begin
          if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
          begin
           $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
          end
          right_col_out_range = 1'b1;
        end // if of {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 5'b10010
        else
        begin
          blk_right = ((bit_index - 20) * 1) + (Y_adr/4);
          if (blk_right <= {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]})
          begin
            column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
          end // if of blk_right <= {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
          else
          begin
            column_position = (Y_adr + (((bit_index * 1) + 2) * 4));
            //$display("\n%m column_position=%b,Y_adr=%b,bit_index=%b,scan_reg=%b at %0t\n\n", column_position, Y_adr, bit_index, scan_reg, $time);
          end // else of if blk_right <= {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
        end // else of if {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 5'b10010
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR: INVALID ADDRESS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        right_col_out_range = 1'b1;
      end // else of if unused scan register bits are zero
    end // if of Scan register enable bit is 1
    else
    begin
      column_position = (Y_adr + (((bit_index * 1) + 2) * 4));
    end // else of if enable bit is 1
  end // if of bit is on right side
  else
  begin
    if (scan_reg[8] === 1'b1)
    begin
      if (scan_reg[2:0] === 3'b0)
      begin
      if ({scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 5'b10011)
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
          left_col_out_range = 1'b1;
        end // if of {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 5'b10011
        else
        begin
          blk_left = (bit_index * 1) + (Y_adr/4);
          if (blk_left > {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]})
          begin
            column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
          end // if of blk_left > {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
          else
          begin
            column_position = (Y_adr + ((bit_index * 1) * 4));
          end // else of if blk_left > {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
        end // else of if {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 5'b10011
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR:INVALID ADDRESS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        left_col_out_range = 1'b1;
      end // else of is unused scan register bits are zero
    end // if of enable bit is enabled
    else
    begin
      column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
    end // else of if enable bit is enabled
  end // else of if bit is on left side
end
endtask
task write_mem_red ;
input [6 : 0] address;
input [38 : 0] data;
reg [4:0] X_adr;
reg [1:0] Y_adr;
reg [7:0] col_address;
reg [163:0] memrow;
reg [163:0] tmp_memrow;
begin
  X_adr = address[6:2];
  Y_adr = address[1:0];
  if (address < 128)
  begin
    tmp_memrow = mem_core_array[X_adr];
    get_column_position (col_address, Y_adr, 0);
    get_column_position (col_address, Y_adr, 38);
    if (left_col_out_range !== 1'bx && right_col_out_range !== 1'bx)
    begin
//Left
      memrow[83:0] = tmp_memrow[83:0];
      if (!left_col_out_range)
      begin
        for (bit_cnt = 0; bit_cnt < 20; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = data[bit_cnt]; 
        end
      end
      else if (left_col_out_range)
      begin
        memrow[83:0] = {84{1'bx}};
      end
//Right
      memrow[163:84] = tmp_memrow[163:84];
      if (!right_col_out_range)
      begin
        for (bit_cnt = 20; bit_cnt < 39; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = data[bit_cnt]; 
        end
      end
      else if (right_col_out_range)
      begin
        memrow[163:84] = {80{1'bx}};
      end
    end
    else
    begin
      corrupt_all_loc(`True);
      memrow = 164'bX;
    end
    mem_core_array[X_adr] = memrow;
    corrupt_red(address);
  end // end of if address with in range
end
endtask

// Corrupt Redundant/Unused columns
task corrupt_red;
input [6 : 0] address;
reg[7:0] column_to_corrupt;
reg[163:0] memrow;
reg[5:0] bit_index;
reg [4:0] X_adr;
reg [1:0] Y_adr;
reg [4:0] faulty_blk_right;
reg [4:0] faulty_blk_left;
integer j;
begin
  X_adr = address[6:2];
  Y_adr = address[1:0];
  memrow = mem_core_array[X_adr];
  faulty_blk_right =  ({scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]});
  faulty_blk_left  =  ({scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]});
  if (right_col_out_range === 1'b0)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_right+22)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of enable bit is 1
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(21)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if enable bit is 1
  end
  else
  begin
    memrow[163:84] = {80{1'bx}};
  end
  if (left_col_out_range === 1'b0)
  begin
    if ( scan_reg[8] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_left+1)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of enable bit is 1 
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = j;
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if enable bit is 1 
  end
  else
  begin
    memrow[83:0] = {84{1'bx}};
  end
  mem_core_array[X_adr] = memrow;
end
endtask

//Calculate Row Address
task get_X_Y_adr;
output [4:0] X_adr;
output [1:0] Y_adr;
input [6:0] Adr;
begin
  X_adr = Adr[6:2];
  Y_adr = Adr[1:0];
end
endtask
task read_mem_red ;
output [38 : 0] memdata;
input [6 : 0] address;
reg [4:0] X_adr;
reg [1:0] Y_adr;
reg [7:0] col_address;
reg [163:0] memrow;
begin
  X_adr = address[6:2];
  Y_adr = address[1:0];
   if (faultinj_en == 1)
     memrow = mem_core_array[X_adr]^mem_fault_array_XOR[X_adr];
   else
   begin
     memrow = mem_core_array[X_adr] & mem_fault_array_sa0[X_adr];
     memrow = memrow | mem_fault_array_sa1[X_adr];
   end
   get_column_position (col_address, Y_adr, 0);
   if ( left_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 0; bit_cnt < 20; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[19:0] = {20{1'bx}};
   end
   get_column_position (col_address, Y_adr, 20);
   if ( right_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 20; bit_cnt < 39; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[38:20] = {19{1'bx}};
   end
end
endtask



task corrupt_all_loc;
 input flag_range_ok;
 integer row_index;
 begin
                                     // do not corrupt entire memory if write to
                                    // out of range address, for all other cases
                                    // flag_range_ok is true, therefore corruption
                                    // will occur as before
  if( flag_range_ok == `True)
   begin
    for( row_index = 0; row_index < 32 ; row_index = row_index + 1)
    begin
      mem_core_array[row_index] = 164'bx;
    end // end of for row_index loop
  end // if of flag_range_ok is true
 end
endtask

task corrupt_cur_loc;
 input[addrbits-1:0] loc_to_corrupt;
begin
  if (is_adr_Valid (loc_to_corrupt))
  begin
      write_mem_red(loc_to_corrupt,DataX);
  end // if of is_adr_Valid (Adr_to_corrupt)
  else
  begin
      corrupt_all_loc(`True);
  end // else of if is_adr_Valid (loc_to_corrupt)
end
endtask

// Load memory with Data from a file(PreloadFilename)
task load_mem;
reg[ 38:0] mem_array [0:127];
reg[ 38:0] mem_word;
reg[4:0] X_adr;
reg[1:0] Y_adr;
integer adr_cnt;
integer start_adr_cnt;
integer num_adr_cnt;
integer i, status, status1;
reg [38:0] init_value;
begin
  if ($test$plusargs("init_mem_data"))
  begin
    status = $value$plusargs("init_mem_data=%d",init_value);
    if ($value$plusargs("init_mem_start_adr=%d",start_adr_cnt))
    begin
      num_adr_cnt = 1;
      if (init_value === 39'b1) begin
        init_value = {39{1'b1}};
      end
      status1 = $value$plusargs("num_of_locations=%d",num_adr_cnt);
      if (num_adr_cnt < 1) begin
        $display("<<VIRL_MEM_WARNING>> \"num_of_locations=%d\" is wrong, setting it to 1 instance=%m ",num_adr_cnt);
        num_adr_cnt = 1;
      end
      if ((start_adr_cnt + num_adr_cnt -1) > 127) begin
        $display("<<VIRL_MEM_WARNING>> \"init_mem_start_adr=%d + num_of_locations=%d\" exceed maximum address (NW-1)=127 instance=%m ",start_adr_cnt,num_adr_cnt);
      end
      if (^init_value === 1'bX)
      begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = adr_cnt;
        end
      end
      else begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = init_value;
        end
      end
    end
    else begin
      if (init_value === 39'b0 || init_value === 39'b1)
      begin
        for( adr_cnt = 0; adr_cnt < 128 ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = {39{init_value[0]}};
        end
      end
      else
      begin
        if (^init_value !== 1'bX)
        begin
          for( adr_cnt = 0; adr_cnt < 128 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = init_value;
          end
        end
        else
        begin
          i = 0;
          for( adr_cnt = 0; adr_cnt < 128 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = i;
            i = i + 1;
            if (i > 39'b111111111111111111111111111111111111111) i = 0;
          end
        end
      end
    end
  end
  else
  begin
    $readmemh(PreloadFilename, mem_array);
  end
  for( adr_cnt = 0; adr_cnt < 128 ; adr_cnt = adr_cnt + 1)
  begin
    mem_word = mem_array[adr_cnt];
    write_mem_red(adr_cnt,mem_word);
    if (!mes_all_valid )
    begin
      mes_all_valid = 1'b1;
    end // if of mes_all_valid is not true
  end // end of for adr_cnt loop
end
endtask

// Store the memory contents into array mem_core_array_read (NWxNB)
task store_mem;
reg[ 38:0] mem_word;
integer adr_cnt;
begin
  for( adr_cnt = 0; adr_cnt < 128 ; adr_cnt = adr_cnt + 1)
  begin
    read_mem_red(mem_word,adr_cnt);
    mem_core_array_read[adr_cnt] = mem_word;
  end // end of for adr_cnt loop
end
endtask

always @( negedge CLKA or WEA )
begin
  if ( CLKA == 1'b0 )
  begin
    WEA_old <= WEA;
  end
end
always @( negedge CLKA or ADRA )
begin
  if ( CLKA == 1'b0 )
  begin
    ADRA_old <= ADRA;
  end
end
always @( negedge CLKA or DA )
begin
  if ( CLKA == 1'b0 )
  begin
    DA_old <= DA;
  end
end
always @( negedge CLKA or MEA or LS_oldA )
begin
  if ( CLKA == 1'b0 )
  begin
    if ( LS_oldA === 1'b1 && MEA !== 1'bx)
      MEA_old <= 1'b0;
    else
      MEA_old <= MEA;
  end
end
always @( negedge CLKA or TEST1A )
begin
  if ( CLKA == 1'b0 )
  begin
    TEST1A_old <= TEST1A;
  end
end
always @( negedge CLKA or LS )
begin
  if ( CLKA == 1'b0 )
  begin
    LS_oldA <= LS;
  end
end



// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
begin

 #0;                // let CLOCK and NOTIFIER stuff execute first
 case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok} ) // only 1 and 0

  3'b111   : ;                                                // everything ok!!!

  3'b101,
  3'b100   : corrupt_cur_loc(ADRAlatched);          // WE is unstable

  3'b110   : if (WEAlatched !== 1'b0)
              corrupt_cur_loc(ADRAlatched);         // Data is unstable
  3'b000,
  3'b001   : corrupt_all_loc(flaga_range_ok);            // ADR and WE unstable
  3'b010,
  3'b011   : if (WEAlatched !== 1'b0)    // ADR unstable, WE stable
              corrupt_all_loc(flaga_range_ok);
 endcase
end
endtask

// PORT A FUNCTIONALITY (Handle violation behavior)

reg INTERNAL_RESET; // For Internally resetting the memory(negedge of rscrst)

initial
 begin : reinit_uut_blkA
  disp_RSCLK_msg = 1'b1;
  left_col_out_range = 1'b0;
  right_col_out_range = 1'b0;
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_clk_valid = `True;
  flaga_adr_x = `False;
  flaga_shift_ok = `True;
  flaga_clear_scan_reg = `False;
 end
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_dont_reinit *)
`endif
initial
begin
  mes_all_valid = 1'b0;
  QB_local <= 39'bx;
  RST_tri = 1'b0;
  RST_check = 1'b0;
  `ifdef VIRAGE_IGNORE_RESET
    #1 INTERNAL_RESET = 1'b1;
  `endif // endif of VIRAGE_IGNORE_RESET
end


`ifdef VIRAGE_FAST_VERILOG
`else

always @(notif_wea)            // PORT A WE violation
 begin
 
  if (RSCRST === 1'b0)
  begin
    flaga_we_ok = `False;
    checkSanityOnAport;
  end // if of rscrst = 0
 end
always @(notif_clka)            // PORT A CLK violation
 begin

if (RSCRST === 1'b0 && (diff_me_tcha === 1'b1 || MEA !== 1'b0))
begin
  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;

  if ( CLKB_tcq == 1'b1 && MEB_chk === 1'b1 )
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
   corrupt_all_loc(`True);
  end // if of rscrst = 0
 end

always @(notif_clkap)            // PORT A CLK violation
 begin

if (RSCRST === 1'b0 && (diff_me_tcca === 1'b1 || MEA !== 1'b0))
begin
  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;

  if ( CLKB_tcq == 1'b1 && MEB_chk === 1'b1 )
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
  corrupt_all_loc(`True);
  end // if of rscrst = 0
 end


always @(notif_mea)            // PORT A ME violation
 begin
 
 if (RSCRST === 1'b0)
 begin
  if ( $realtime == CLKB_TIME )
   MEB_chk = MEB_old;
  else
   MEB_chk = MEBlatched;
  if (MEB_chk === 1'b1 && (CLKB_tcq == 1'b1 || (CLKB_tcqtime == $realtime)))
   begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
   end
  flaga_adr_ok = `False;
  corrupt_all_loc(`True);
 end // if of RSCRST = 0
end


always @(notif_adra)     // PORT A ADR violation
 begin

 if (RSCRST === 1'b0)
 begin
    if (MEBlatched === 1'b1 && WEAlatched === 1'b1 && (CLKB_tcq == 1'b1 || (CLKB_tcqtime == $realtime)))
     begin
      disable OUTPUT_1;
      flagb_read_ok = `False;
      -> event_on_B_port;
     end
    flaga_adr_ok = `False;
    corrupt_all_loc(`True);
 end // if of RSCRST = 0 
 end // end of always block blk_notif_addr_0

genvar nk;
generate for (nk=0; nk<39; nk=nk+1)
begin : ENDA_blk

reg [38:0]  tmp_DA;

always @(notif_da[nk])
begin
  if (RSCRST === 1'b0)
  begin
    read_mem_red(memdata,ADRA_old);
    tmp_DA = memdata;
    tmp_DA[nk] = 1'bX;
    write_mem_red(ADRA_old,tmp_DA);
  end // if of RSCRST = 0 
end // end of always block blk_notif_di_0
end
endgenerate

always @(notif_test1a)               //PORT A TEST1 violation
 begin
  if (RSCRST === 1'b0)
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end // if of RSCRST = 0
 end // end of always block blk_notif_test1_0

always @(notif_ls_a)           
begin
  corrupt_all_loc(`True);
end


always @(notif_rma)               //PORT A RM violation
 begin
  if (RSCRST === 1'b0)
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end // if of RSCRST = 0
 end
always @(notif_rmea)               //PORT A RME violation
 begin
  if (RSCRST === 1'b0)
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end // if of RSCRST = 0
 end



always @(notif_clka_CLKB_rise_rise_rec)
 begin

      flag_simul_clk = 1'b1;
      -> event_on_B_port;
 end

`endif // VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
always @(notif_rscrst_CLKA_rise_fall_rec)
begin : rscrst_CLKA_rise_fall_rec
  if (WEA_old == 1'b1 && MEA_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WEA_old = 1
end // end of always block rscrst_CLKA_rise_fall_rec 

always @(notif_rsclk_CLKA_rise_rise_rec)
begin : rsclk_CLKA_rise_rise_rec
  flagb_read_ok = `False;
  -> event_on_B_port;
  flaga_adr_ok = `False;
  flaga_we_ok = `False;
  checkSanityOnAport;
end // end of always block rscrst_CLKA_rise_fall_rec 

always @(notif_rscen_CLKA_rise_fall_rec)
begin : rscen_CLKA_rise_fall_rec
  if (WEA_old == 1'b1 && MEA_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WEA_old = 1
end // end of always block rscen_CLKA_rise_rise_rec 

always @(notif_rscrst_RSCLK_rise_fall_rec)
begin : rscrst_RSCLK_rise_fall_rec
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_rsclk_rise_fall_rec

always @(notif_rsclk or notif_rscen or notif_fiso)
begin : blk_notif_rsclk_0
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rsclk_0

always @(notif_rscrst)
begin : blk_notif_rscrst_0
  flaga_clear_scan_reg = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_0

// RSCIN violation
always @(notif_rscin)
begin : blk_notif_rscin_0
  flaga_shift_ok = `False;
  scan_reg[0] = 1'bx;
end // end of always block blk_notif_rscen_0
`endif // endif of VIRAGE_FAST_VERILOG

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCEN)
begin : blk_rscen_0
  flaga_shift_ok = `True;
  disp_RSCLK_msg = 1'b1;
end // end of always block blk_rscen_0


`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCRST or posedge INTERNAL_RESET)
begin : blk_posrscrst_0
  if ( RSCRST === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
   #0.0;
   `ifdef VIRAGE_IGNORE_RESET
   if (INTERNAL_RESET === 1'b1 || RSCRST === 1'b1)
   `else 
   if (RSCRST === 1'b1)
   `endif
   begin
    scan_reg = 18'b0;
    RSCOUT_local = scan_reg[17];
    flaga_clear_scan_reg = `True;
    RST_check = 1'b0;
    if (INTERNAL_RESET === 1'b1)
    begin
      #1 INTERNAL_RESET = 1'b0;
    end
   end
  end // else of if RSCRST = X
end // end of always block blk_posrscrst_0

// Functionality of RSCRST
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCRST or negedge INTERNAL_RESET)
begin : blk_negrscrst_0
  #0;
  if ( RSCRST === 1'bx)
  begin
    flaga_clear_scan_reg = `False;
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
    if ( RST_check == 1'b0 && $realtime != 0)
    begin
      RST_check = 1'b1;
      RST_tri = 1'b1;
      #0;
      if ( flaga_clear_scan_reg )
      begin:clear_scan_reg
        scan_reg = 18'b0 ;
        RSCOUT_local = scan_reg[17];
      end // if of flaga_clear_scan_reg is true
      `ifdef INITIALIZE_MEM
      // to read initialization files, add to verilog model `define INITIALIZE_MEM
      // or use command line option +define+INITIALIZE_MEM
        load_mem;        // Read initial data for memory if any preload file exists.
      `endif
    end // if of RST_check = 0 and $realtime != 0
    flaga_clear_scan_reg = `False;
  end // else of if RSCRST = X
end // end of always block blk_negrscrst_0

always @(negedge CLKA)          // reset for next cycle
 begin
  if ( CLKA !== 1'bx ) begin
   #0.001;
   flaga_range_ok  = `True;
   flaga_clk_valid = `True;
   flaga_adr_x = `False;
   flaga_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
    left_col_out_range = 1'b0;
    right_col_out_range = 1'b0;
  end
  else
  begin
    if (MEA !== 1'b0)
    begin
    report_unknown("CLKA");
    flaga_clk_valid = `False;
    corrupt_all_loc(`True);
    end
  end
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO)
begin : blk_fiso_0
  if (FISO === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("FISO");
  end // else if of FISO = X 
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCLK)
begin : blk_negtestrsclock_0
  if (RSCLK !== 1'bx)
  begin
    flaga_shift_ok = `True;
  end
  else
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCLK)
begin : blk_postestrsclock_0
  RSCENlatched = RSCEN;
  #0;
  if (RSCLK === 1'bx && RSCENlatched)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
  if ( RSCENlatched === 1'b1 && RSCRST === 1'b0)
  begin:do_shift
    #0;
    if ( RSCLK !== 1'bx )
    begin
      if ( flaga_shift_ok )
      begin
        scan_reg = scan_reg << 1;
        RSCOUT_local = scan_reg[17];
        scan_reg[0] = RSCIN;
        flaga_shift_ok = `False;
        if ( RSCIN === 1'bx )
        begin
          report_unknown("RSCIN");
        end // if of RSCIN = X
      end // if of flaga_shift_ok is true
    end // if of RSCLK != X
  end // if of RSCEN = 1 and RSCRST = 0 
  else if ( RSCEN === 1'bx || RSCRST === 1'bx )
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    if ( RSCEN === 1'bx )
    begin
      report_unknown("RSCEN");
    end // if of RSCEN = X
  end // else if of RSCEN = X or RSCRST = X

end
// PORT A FUNCTIONALITY (Handle normal read/write)



always @(posedge CLKA)
begin
  memdata_bef_wrt = DataX;
  if (CLKA === 1'bx)
  begin
    #0;
    if (diff_me_tcha === 1'b1 || MEA !== 1'b0)
    begin
      report_unknown("CLKA");
      flaga_clk_valid = `False;
      corrupt_all_loc(`True);
    end // end of if diff_me_tch
  end // end of if (CLKA === 1'bx)

 `ifdef VIRAGE_FAST_VERILOG
    if((MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid && RSCEN === 1'b1 && RSCRST === 1'b0 && disp_RSCLK_msg)
    begin
      $display("<<VIRL_MEM_WARNING:For proper memory write/read operation ensure RSCLK is not running>> at time = %0t; instance = %m\n",$time);
      disp_RSCLK_msg = 1'b0;
    end
 `endif // endif of VIRAGE_FAST_VERILOG
  CLKA_TIME = $realtime;
  MEAlatched = MEA_old;
  WEAlatched = WEA_old;
  TEST1Alatched = TEST1A_old;
  ADRAlatched = ADRA_old;
  DAlatched = DA_old;
  LSlatchedA = LS_oldA;
  if ((LSlatchedA === 1'b1 && MEAlatched !== 1'bx))
  begin
    MEAlatched = 1'b0;
  end
  if ((LSlatchedA === 1'bX) && (MEAlatched !== 1'b0 && WEAlatched !== 1'b0 ))
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    QB_local = 39'bx;
  end
  else
  begin

    if ((^DAlatched === 1'bx) && MEAlatched == 1'b1)
    begin
      if (DAlatched === 39'bx)
      begin
        flaga_d_ok  = `False;
      end
      if (WEAlatched !== 1'b0)
      begin
        report_unknown("DA");
      end  
    end

  if (CLKA === 1'bx && (diff_me_tcha === 1'b1 || MEA !== 1'b0))
  begin
    report_unknown("CLKA");
    corrupt_all_loc(flaga_range_ok);
  end
  else if (flaga_clk_valid)
  begin
    if (RSCRST === 1'b1)
    begin
      if (MEAlatched === 1'b1 && WEAlatched === 1'b1)
      begin
        corrupt_all_loc(flaga_range_ok);
      end // if of MEAlatched = 1 and write
    end
    else if (MEAlatched !== 1'b0)
    begin
      if (TEST1Alatched === 1'bx)
      begin
        report_unknown("TEST1A");
        if (WEAlatched === 1'b1)
        begin
          flaga_d_ok = `False;
        end
      end
      if (WEAlatched === 1'bx)
      begin
        report_unknown("WEA");
        flaga_we_ok  = `False;
      end
      if (MEAlatched !== 1'b1)
        flaga_we_ok = `False;       // don't know if cycle is On or Off
      if (is_adr_Valid(ADRAlatched) != `True ) 
      begin
        if ( flaga_adr_x ) 
        begin
          report_unknown("ADRA");
        end
        flaga_adr_ok = `False;
        if( !(flaga_adr_x) )
        begin
          if(( MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
            $display("<<VIRL_MEM_WARNING:address ADRA is out of range>>, RANGE:0 to 127 time=%0t instance=%m\n",$time);
          flaga_range_ok = `False;
        end
      end
      if ( MEAlatched === 1'bx )
      begin
        report_unknown("MEA");
        corrupt_all_loc(flaga_range_ok);
      end
      else
      begin
        if (WEAlatched == 1'b1)
        begin
          if (RMEA === 1'bX)
          begin
            flaga_d_ok = `False;
            report_unknown("RMEA");
          end
           if (^RMA === 1'bx)
           begin
             flaga_d_ok = `False;
             if (RMEA !== 1'bx)
             begin
               report_unknown("RMA");
             end
           end
        end
         if (flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
         begin
           read_mem_red(memdata_bef_wrt, ADRAlatched);
         end
         if (flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
         begin
           if (CLKB === 1'b1 && TEST1Blatched === 1'b1 )
           begin
             if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched))
             begin
               if(CLKA_TIME!=CLKB_TIME)
                 flagb_read_ok <= #0.001 `False;
             end
           end
           
           write_mem_red(ADRAlatched,DAlatched);
           if (mes_all_valid == 0) mes_all_valid = 1;
	 end
         else
         begin
           checkSanityOnAport;
         end
  `ifdef VIRAGE_FAST_VERILOG
//-- Simultaneous Contention case
        #0.0;
        if(CLKA_TIME==CLKB_TIME)
        begin
          if((ADRAlatched===ADRBlatched) && ((MEAlatched && MEBlatched) || (WEAlatched && ((MEAlatched===1'bx && MEBlatched) || (MEAlatched && MEBlatched===1'bx)))))
          begin
            if(WEAlatched!==1'b0)
            begin
              if(MEBlatched)
              begin
                if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& debug_mode == 1 && mes_all_valid == 1) 
                begin
                  $display("<<VIRL_MEM_ERR: Simultaneous access to the same address on B-port(READ) and A-port(WRITE)>> time = %t, instance = %m (RAMS1H)",$realtime);
                end // end of if(MES_CNTRL=="ON")
                flag_simul_clk = 1'b1;
                if (flagb_read_ok && !TEST1Blatched)
                begin
                  -> event_on_B_port;
                end
              end
            end
      end
    end
  `endif // VIRAGE_FAST_VERILOG 

       end
     end
   end
 end
end


assign RSCOUT_tmp = RSCOUT_local;

always @ ( RSCOUT_tmp )
begin
  RSCOUT <= RSCOUT_tmp;
end



always @ (TEST1A)
begin
  if ( CLKA === 1'b1 && MEA_old === 1'b1 && (LSlatchedA === 1'b0)  )
  begin
    if (WEA_old === 1'b1 )
    begin
      flaga_we_ok = 1'b0;
      corrupt_cur_loc(ADRAlatched);
    end
    QB_local = 39'bx;
    flagb_read_ok = `False;
    flagb_read_ok <= #0.002 `True;
  end
  if ( TEST1A == 1'b1)
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
    begin
   $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0,but input value is TEST1A=1'b1>> (time %0t) instance=%m\n\n", $time);
    end
end


always @ (TEST1A)
begin
  if ( TEST1A == 1'b1)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid == 1'b1)
    begin
    $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1A=1'b0, but input value is TEST1A=1'b1 >>(time %0t) instance=%m", $time);
    end
  end
end // end of TEST1A


always @(negedge CLKB)
begin
 flag_simul_clk <= #0.002 1'b0;
end
always @(negedge CLKA)
begin
  if(CLKB != 1'b1)
  flag_simul_clk <= #0.002 1'b0;
end


always @( negedge CLKB or ADRB )
begin
  if ( CLKB == 1'b0 )
  begin
    ADRB_old <= ADRB;
  end
end
always @( negedge CLKB or MEB or LS_oldB )
begin
  if ( CLKB == 1'b0 )
  begin
    if ( LS_oldB === 1'b1 && MEB !== 1'bx)
      MEB_old <= 1'b0;
    else
      MEB_old <= MEB;
  end
end
always @( negedge CLKB or TEST1B )
begin
  if ( CLKB == 1'b0 )
  begin
    TEST1B_old <= TEST1B;
  end
end
always @( negedge CLKB or LS )
begin
  if ( CLKB == 1'b0 )
  begin
    LS_oldB <= LS;
  end
end

// PORT B FUNCTIONALITY (Handle violation behavior)


initial
 begin : reinit_uut_blkB
  disp_RSCLK_msg = 1'b1;
  flagb_adr_ok  = `True;
  flagb_range_ok = `True;
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
  flagb_clk_valid = `True;
  flagb_adr_x = `False;
 end


`ifdef VIRAGE_FAST_VERILOG
`else

always @(notif_clkb)            // PORT B CLK violation
 begin

if (RSCRST === 1'b0 && (diff_me_tchb === 1'b1 || MEB !== 1'b0))
begin
  if ( $realtime == CLKA_TIME )
   MEA_chk = MEA_old;
  else
   MEA_chk = MEAlatched;
  disable OUTPUT_1;
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  -> event_on_B_port;
  end // if of rscrst = 0
 end

always @(notif_clkbp)            // PORT B CLK violation
 begin

if (RSCRST === 1'b0 && (diff_me_tccb === 1'b1 || MEB !== 1'b0))
begin
  if ( $realtime == CLKA_TIME )
   MEA_chk = MEA_old;
  else
   MEA_chk = MEAlatched;
  disable OUTPUT_1;
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  -> event_on_B_port;
  end // if of rscrst = 0
 end


always @(notif_meb)            // PORT B ME violation
 begin
 
 if (RSCRST === 1'b0)
 begin
  flagb_adr_ok = `False;
  flagb_read_ok = `False;     // irrespective of WE
  disable OUTPUT_1;
  -> event_on_B_port;
 end // if of RSCRST = 0
end


always @(notif_adrb)     // PORT B ADR violation
 begin

 if (RSCRST === 1'b0)
 begin
    flagb_adr_ok = `False;
    flagb_read_ok = `False; // irrespective of WE
    disable OUTPUT_1;
    -> event_on_B_port;
 end // if of RSCRST = 0 
 end // end of always block blk_notif_addr_1


always @(notif_test1b)               //PORT B TEST1 violation
 begin
  if (RSCRST === 1'b0)
  begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
  end // if of RSCRST = 0
 end // end of always block blk_notif_test1_1

always @(notif_ls_b)           
begin
    disable OUTPUT_1;
  flagb_read_ok = `False;
  -> event_on_B_port;
end
always @(notif_rmb)               //PORT B RM violation
 begin
  if (RSCRST === 1'b0)
  begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
  end // if of pin_name(rscrst,0) = 0
 end // end of always block blk_notif_rm_1
always @(notif_rmeb)               //PORT B RME violation
 begin
  if (RSCRST === 1'b0)
  begin
    disable OUTPUT_1;
    flagb_read_ok = `False;
    -> event_on_B_port;
  end // if of RSCRST = 0
 end // end of always block blk_notif_rmen_1





always @(notif_clkb_CLKA_rise_rise_rec)
 begin

      flag_simul_clk = 1'b1;
      -> event_on_B_port;
 end

`endif // VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
always @(notif_rscrst_CLKB_rise_fall_rec)
begin : rscrst_CLKB_rise_fall_rec
  if (MEB_old == 1'b1)
  begin
    flagb_read_ok = `False;
    disable OUTPUT_1;
    -> event_on_B_port;
  end
end // end of always block rscrst_CLKB_rise_fall_rec 

always @(notif_rsclk_CLKB_rise_rise_rec)
begin : rsclk_CLKB_rise_rise_rec
  flagb_read_ok = `False;
  -> event_on_B_port;
  flaga_adr_ok = `False;
  flaga_we_ok = `False;
  checkSanityOnAport;
end // end of always block rscrst_CLKB_rise_fall_rec 

always @(notif_rscen_CLKB_rise_fall_rec)
begin : rscen_CLKB_rise_fall_rec
  if (MEB_old == 1'b1)
  begin
    flagb_read_ok = `False;
    disable OUTPUT_1;
    -> event_on_B_port;
  end
end // end of always block rscen_CLKB_rise_rise_rec 

`endif // endif of VIRAGE_FAST_VERILOG


always @(negedge CLKB)          // reset for next cycle
 begin
 #0.001;
  if ( CLKB !== 1'bx ) begin
   #0.001;
   flagb_range_ok  = `True;
   flagb_read_ok = `True;
   flagb_rm_ok = `True;
   flagb_clk_valid = `True;
   flagb_adr_x = `False;
   flagb_adr_ok  = `True;
   TEST1Blatched = 1'b0;
    left_col_out_range = 1'b0;
    right_col_out_range = 1'b0;
  end
  else
  begin
    if (MEB !== 1'b0)
    begin
    report_unknown("CLKB");
    flagb_clk_valid = `False;
    QB_local =  DataX;
    end
  end
end

// PORT B FUNCTIONALITY (Handle normal read/write)



always @(posedge CLKB)
begin
  if (CLKB === 1'bx)
  begin
    #0;
    if (diff_me_tchb === 1'b1 || MEB !== 1'b0)
    begin
      report_unknown("CLKB");
      flagb_clk_valid = `False;
      QB_local =  DataX;
    end // end of if diff_me_tch
  end // end of if (CLKB === 1'bx)

 `ifdef VIRAGE_FAST_VERILOG
    if((MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid && RSCEN === 1'b1 && RSCRST === 1'b0 && disp_RSCLK_msg)
    begin
      $display("<<VIRL_MEM_WARNING:For proper memory write/read operation ensure RSCLK is not running>> at time = %0t; instance = %m\n",$time);
      disp_RSCLK_msg = 1'b0;
    end
 `endif // endif of VIRAGE_FAST_VERILOG
  CLKB_TIME = $realtime;
  MEBlatched = MEB_old;
  TEST1Blatched = TEST1B_old;
  ADRBlatched = ADRB_old;
  LSlatchedB = LS_oldB;
  if (LSlatchedB === 1'b1 && MEBlatched !== 1'bx)
  begin
    MEBlatched = 1'b0;
  end
  if ((LSlatchedB === 1'bX) && (MEBlatched !== 1'b0))
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    QB_local = 39'bx;
  end
  else
  begin

  if (!flagb_clk_valid) begin
    QB_local =  DataX;
  end 
  else
  begin
    if (RSCRST === 1'b1)
    begin
      if (MEBlatched === 1'b1)
      begin
        QB_local = 39'bx;
      end // if of MEBlatched = 1 and read
    end
    else if (MEBlatched !== 1'b0)
    begin
      if (TEST1Blatched === 1'bx)
      begin
        report_unknown("TEST1B");
        QB_local = 39'bx;
        flagb_read_ok = `False;
      end
      if (is_adr_Valid(ADRBlatched) != `True ) 
      begin
        if ( flagb_adr_x ) 
        begin
          report_unknown("ADRB");
        end
        flagb_adr_ok = `False;
        if( !(flagb_adr_x) )
        begin
          if(( MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
            $display("<<VIRL_MEM_WARNING:address ADRB is out of range>>, RANGE:0 to 127 time=%0t instance=%m\n",$time);
          flagb_range_ok = `False;
        end
      end
      if ( MEBlatched === 1'bx )
      begin
        report_unknown("MEB");
          QB_local =  DataX;
      end
      else
      begin
  `ifdef VIRAGE_FAST_VERILOG
//-- Simultaneous Contention case
        #0.0;
        if(CLKB_TIME==CLKA_TIME)
        begin
          if((ADRBlatched===ADRAlatched) && ((MEBlatched && MEAlatched) || (WEAlatched && ((MEBlatched===1'bx && MEAlatched) || (MEBlatched && MEAlatched===1'bx)))))
          begin
            if(WEAlatched!==1'b0)
            begin
              if(MEBlatched)
              begin
                if((MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& debug_mode == 1 && mes_all_valid == 1) 
                begin
                  $display("<<VIRL_MEM_ERR: Simultaneous access to the same address on B-port(READ) and A-port(WRITE)>> time = %t, instance = %m (RAMS1H)",$realtime);
                end // end of if(MES_CNTRL=="ON")
                flag_simul_clk = 1'b1;
                if (flagb_read_ok && !TEST1Blatched)
                begin
                  -> event_on_B_port;
                end
              end
            end
            else if(WEAlatched != 1)
            begin
              -> event_on_B_port;
            end 
      end
    end
  `endif // VIRAGE_FAST_VERILOG 

        if (TEST1Blatched == 1 )
        begin
          #0.001;
          flagb_read_ok = `False;
          -> event_on_B_port;
          @(negedge CLKB)
          if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched) && WEAlatched === 1'b1 && CLKA_TIME == $realtime)
          begin
          flagb_read_ok = `False;
          QB_local <= DataX;
          end
        begin
         #0; -> event_on_B_port;
        end
	  flag_simul_clk <= #0.002 1'b0;
        end
        else
// Read
    `ifdef VIRAGE_FAST_VERILOG
       if(!(((CLKB_TIME==CLKA_TIME)) && ((ADRBlatched===ADRAlatched) && ((MEBlatched && MEAlatched) || (WEAlatched && ((MEBlatched===1'bx && MEAlatched) || (MEBlatched && MEAlatched===1'bx)))))))
         -> event_on_B_port;
    `else
        -> event_on_B_port;
    `endif
       end
     end
   end
 end
end


// START OF PORT B READ-OUT BLOCK 

always @(event_on_B_port)
begin
  #0; // let CLOCK and NOTIFIER module execute first
  if (^RMB === 1'bx) begin
    flagb_rm_ok = `False;
    if (RMEB !== 1'bx)
      report_unknown("RMB");
    else
      report_unknown("RMEB");
  end
  `ifdef VIRAGE_FAST_VERILOG
  `else
     QB_local = DataX;
     #0.001
  `endif // VIRAGE_FAST_VERILOG
  if (flagb_adr_ok && (ADRBlatched <= words -1) && flagb_read_ok && flagb_rm_ok) 
  begin : OUTPUT_1
    if ((MEAlatched === MEBlatched) && (ADRAlatched === ADRBlatched) && WEAlatched === 1'b1 && (flag_simul_clk === 1'b1))
    begin
      bit_corrupt = memdata_bef_wrt ^ DAlatched;
      if (TEST1Blatched === 1'b1 )
      begin 
        QB_local = (DataX & bit_corrupt)^memdata_bef_wrt;
        if ( CLKB === 1'b1)
        begin
          QB_local =   DataX;
        end
        flag_simul_clk <= @(negedge CLKB) 1'b0;
      end
      else
      begin
        QB_local = (DataX & bit_corrupt)^memdata_bef_wrt;
        flag_simul_clk <= 1'b0;
      end 
    end
    else
    begin
    if (flagb_read_ok)
    begin
      read_mem_red(memdata,ADRBlatched);
      QB_local = memdata;
    end
    if (mes_all_valid == 0) mes_all_valid = 1;
    end // end of else of Simul block
  end // end of if (flagb_adr_ok && (ADRBlatched))
  else
  begin
    if (flag_simul_clk === 1'b0 || TEST1Blatched === 1'b1 || (ADRBlatched > words -1))
      QB_local <=   DataX;
      flagb_read_ok = `True;
        if (TEST1Blatched === 1'b0 )
          flag_simul_clk <= #0.002 1'b0;
  end
  flagb_rm_ok = `True;
end // end of always @(event_on_B_port

// END OF PORT B READ-OUT BLOCK



assign QB_temp = QB_local;

// Final Output Update
always @ ( QB_temp )
begin : blk_output_1
   if (RST_check == 1'b1)
     QB <= QB_temp;
   else
     QB <= 39'bx;
end // end of always block blk_output_1


// START OF PORT B OUTPUT ENABLE BLOCK



always @ (TEST1B)
begin
  if ( CLKB === 1'b1 && MEB_old === 1'b1 && (LSlatchedB === 1'b0)  )
  begin
    QB_local = 39'bx;
    flagb_read_ok = `False;
  end
  if ( TEST1B == 1'b1)
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid == 1'b1)
    begin
   $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0,but input value is TEST1B=1'b1>> (time %0t) instance=%m\n\n", $time);
    end
end


always @ (TEST1B)
begin
  if ( TEST1B == 1'b1)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid == 1'b1)
    begin
    $display("<<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1B=1'b0, but input value is TEST1B=1'b1 >>(time %0t) instance=%m", $time);
    end
  end
end // end of TEST1B


endmodule
