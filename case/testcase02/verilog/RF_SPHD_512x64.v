//==================================================================================//
// Author: GWX Technology
// Attribution: Verilog-HDL
// Birthday: Sun Nov 12 15:24:08 CST 2023
// Organization: GWX Technology
// Copyright: GWX Technology Â©2023 GWX Technology Inc. All rights reserved.
//----------------------------------------------------------------------------------//
// Description:
// All the data in the file was generated by GWX Technology. This information was
// prepared only for EDA tools training. GWX Technology does not guarantee the
// accuracy or completeness of the information contained herein. GWX Technology
// shall not be liable for any loss or damage of any kind arising from the use of
// this document or the information contained herein.
//----------------------------------------------------------------------------------//
// Version: 0.9.0.0 Alpha
//==================================================================================//

//   --------------------------------------------------------------     
//                       Template Revision : 6.2.8                      
//   --------------------------------------------------------------     
//                 * Synchronous, 1-Port Register File *              
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 1-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:RF_SPHD_512x64                                       
//   Memory Size:512 words x 64 bits                                  
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   Q[63:0]                          
//                                   RSCOUT                           
//               Input Ports:                                         
//                                   ADR[8:0]                         
//                                   D[63:0]                          
//                                   WEM[63:0]                        
//                                   WE                               
//                                   ME                               
//                                   CLK                              
//                                   RSCIN                            
//                                   RSCEN                            
//                                   RSCRST                           
//                                   RSCLK                            
//                                   FISO                             
//                                   TEST1                            
//                                   TEST_RNM                         
//                                   RME                              
//                                   RM[3:0]                          
//                                   LS                               
//                                   BC1                              
//                                   BC2                              
// -------------------------------------------------------------------- 
// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = LOW option.         
// -------------------------------------------------------------------- 


`resetall 
`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 

`define True    1'b1
`define False   1'b0

module RF_SPHD_512x64 ( Q, RSCOUT, ADR, D, WEM, WE, ME, CLK, RSCIN, RSCEN, RSCRST, RSCLK, FISO, TEST1, TEST_RNM, RME, RM, LS, BC1, BC2);

// Input/Output Ports Declaration
output  [63:0] Q;
output RSCOUT;
input  [8:0] ADR;
input  [63:0] D;
input  [63:0] WEM;
input WE;
input ME;
input CLK;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input TEST1;
input TEST_RNM;
input RME;
input  [3:0] RM;
input LS;
input BC1;
input BC2;

// Local registers, wires, etc
parameter PreloadFilename = "init.file";
`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_FAST_VERILOG
`else
// Notifiers Declaration
reg notif_adr;
wire [63:0] notif_d;
reg notif_d_63, notif_d_62, notif_d_61, notif_d_60, notif_d_59, notif_d_58, notif_d_57, notif_d_56, notif_d_55, notif_d_54, notif_d_53, notif_d_52, notif_d_51, notif_d_50, notif_d_49, notif_d_48, notif_d_47, notif_d_46, notif_d_45, notif_d_44, notif_d_43, notif_d_42, notif_d_41, notif_d_40, notif_d_39, notif_d_38, notif_d_37, notif_d_36, notif_d_35, notif_d_34, notif_d_33, notif_d_32, notif_d_31, notif_d_30, notif_d_29, notif_d_28, notif_d_27, notif_d_26, notif_d_25, notif_d_24, notif_d_23, notif_d_22, notif_d_21, notif_d_20, notif_d_19, notif_d_18, notif_d_17, notif_d_16, notif_d_15, notif_d_14, notif_d_13, notif_d_12, notif_d_11, notif_d_10, notif_d_9, notif_d_8, notif_d_7, notif_d_6, notif_d_5, notif_d_4, notif_d_3, notif_d_2, notif_d_1, notif_d_0;
wire [63:0] notif_wem;
reg notif_wem_63, notif_wem_62, notif_wem_61, notif_wem_60, notif_wem_59, notif_wem_58, notif_wem_57, notif_wem_56, notif_wem_55, notif_wem_54, notif_wem_53, notif_wem_52, notif_wem_51, notif_wem_50, notif_wem_49, notif_wem_48, notif_wem_47, notif_wem_46, notif_wem_45, notif_wem_44, notif_wem_43, notif_wem_42, notif_wem_41, notif_wem_40, notif_wem_39, notif_wem_38, notif_wem_37, notif_wem_36, notif_wem_35, notif_wem_34, notif_wem_33, notif_wem_32, notif_wem_31, notif_wem_30, notif_wem_29, notif_wem_28, notif_wem_27, notif_wem_26, notif_wem_25, notif_wem_24, notif_wem_23, notif_wem_22, notif_wem_21, notif_wem_20, notif_wem_19, notif_wem_18, notif_wem_17, notif_wem_16, notif_wem_15, notif_wem_14, notif_wem_13, notif_wem_12, notif_wem_11, notif_wem_10, notif_wem_9, notif_wem_8, notif_wem_7, notif_wem_6, notif_wem_5, notif_wem_4, notif_wem_3, notif_wem_2, notif_wem_1, notif_wem_0;
reg notif_we;
reg notif_me;
reg notif_clk;
reg notif_clkp;
reg notif_rscin;
reg notif_rscen;
reg notif_rscen_CLK_rise_fall_rec;
reg notif_rscrst;
reg notif_rscrst_setup;
reg notif_rscrst_RSCLK_rise_fall_rec;
reg notif_rscrst_CLK_rise_fall_rec;
reg notif_rsclk;
reg notif_rsclk_CLK_rise_rise_rec;
reg notif_fiso;
reg notif_test1;
reg notif_test_rnm;
reg notif_rme;
reg notif_rm;
reg notif_ls;
reg notif_bc1;
reg notif_bc2;
`endif
reg ADRFLAGA;
`ifdef VIRAGE_FAST_VERILOG
wire [63:0] Q_buf;
assign Q[0] = Q_buf[0];
assign Q[1] = Q_buf[1];
assign Q[2] = Q_buf[2];
assign Q[3] = Q_buf[3];
assign Q[4] = Q_buf[4];
assign Q[5] = Q_buf[5];
assign Q[6] = Q_buf[6];
assign Q[7] = Q_buf[7];
assign Q[8] = Q_buf[8];
assign Q[9] = Q_buf[9];
assign Q[10] = Q_buf[10];
assign Q[11] = Q_buf[11];
assign Q[12] = Q_buf[12];
assign Q[13] = Q_buf[13];
assign Q[14] = Q_buf[14];
assign Q[15] = Q_buf[15];
assign Q[16] = Q_buf[16];
assign Q[17] = Q_buf[17];
assign Q[18] = Q_buf[18];
assign Q[19] = Q_buf[19];
assign Q[20] = Q_buf[20];
assign Q[21] = Q_buf[21];
assign Q[22] = Q_buf[22];
assign Q[23] = Q_buf[23];
assign Q[24] = Q_buf[24];
assign Q[25] = Q_buf[25];
assign Q[26] = Q_buf[26];
assign Q[27] = Q_buf[27];
assign Q[28] = Q_buf[28];
assign Q[29] = Q_buf[29];
assign Q[30] = Q_buf[30];
assign Q[31] = Q_buf[31];
assign Q[32] = Q_buf[32];
assign Q[33] = Q_buf[33];
assign Q[34] = Q_buf[34];
assign Q[35] = Q_buf[35];
assign Q[36] = Q_buf[36];
assign Q[37] = Q_buf[37];
assign Q[38] = Q_buf[38];
assign Q[39] = Q_buf[39];
assign Q[40] = Q_buf[40];
assign Q[41] = Q_buf[41];
assign Q[42] = Q_buf[42];
assign Q[43] = Q_buf[43];
assign Q[44] = Q_buf[44];
assign Q[45] = Q_buf[45];
assign Q[46] = Q_buf[46];
assign Q[47] = Q_buf[47];
assign Q[48] = Q_buf[48];
assign Q[49] = Q_buf[49];
assign Q[50] = Q_buf[50];
assign Q[51] = Q_buf[51];
assign Q[52] = Q_buf[52];
assign Q[53] = Q_buf[53];
assign Q[54] = Q_buf[54];
assign Q[55] = Q_buf[55];
assign Q[56] = Q_buf[56];
assign Q[57] = Q_buf[57];
assign Q[58] = Q_buf[58];
assign Q[59] = Q_buf[59];
assign Q[60] = Q_buf[60];
assign Q[61] = Q_buf[61];
assign Q[62] = Q_buf[62];
assign Q[63] = Q_buf[63];
wire RSCOUT_buf;
assign  RSCOUT = RSCOUT_buf;
wire [8:0] ADR_buf;
assign  ADR_buf[0] = (ADR[0] === 1'bZ) ? 1'bX : ( ADR[0]);
assign  ADR_buf[1] = (ADR[1] === 1'bZ) ? 1'bX : ( ADR[1]);
assign  ADR_buf[2] = (ADR[2] === 1'bZ) ? 1'bX : ( ADR[2]);
assign  ADR_buf[3] = (ADR[3] === 1'bZ) ? 1'bX : ( ADR[3]);
assign  ADR_buf[4] = (ADR[4] === 1'bZ) ? 1'bX : ( ADR[4]);
assign  ADR_buf[5] = (ADR[5] === 1'bZ) ? 1'bX : ( ADR[5]);
assign  ADR_buf[6] = (ADR[6] === 1'bZ) ? 1'bX : ( ADR[6]);
assign  ADR_buf[7] = (ADR[7] === 1'bZ) ? 1'bX : ( ADR[7]);
assign  ADR_buf[8] = (ADR[8] === 1'bZ) ? 1'bX : ( ADR[8]);
wire [63:0] D_buf;
assign  D_buf[0] = (D[0] === 1'bZ) ? 1'bX : ( D[0]);
assign  D_buf[1] = (D[1] === 1'bZ) ? 1'bX : ( D[1]);
assign  D_buf[2] = (D[2] === 1'bZ) ? 1'bX : ( D[2]);
assign  D_buf[3] = (D[3] === 1'bZ) ? 1'bX : ( D[3]);
assign  D_buf[4] = (D[4] === 1'bZ) ? 1'bX : ( D[4]);
assign  D_buf[5] = (D[5] === 1'bZ) ? 1'bX : ( D[5]);
assign  D_buf[6] = (D[6] === 1'bZ) ? 1'bX : ( D[6]);
assign  D_buf[7] = (D[7] === 1'bZ) ? 1'bX : ( D[7]);
assign  D_buf[8] = (D[8] === 1'bZ) ? 1'bX : ( D[8]);
assign  D_buf[9] = (D[9] === 1'bZ) ? 1'bX : ( D[9]);
assign  D_buf[10] = (D[10] === 1'bZ) ? 1'bX : ( D[10]);
assign  D_buf[11] = (D[11] === 1'bZ) ? 1'bX : ( D[11]);
assign  D_buf[12] = (D[12] === 1'bZ) ? 1'bX : ( D[12]);
assign  D_buf[13] = (D[13] === 1'bZ) ? 1'bX : ( D[13]);
assign  D_buf[14] = (D[14] === 1'bZ) ? 1'bX : ( D[14]);
assign  D_buf[15] = (D[15] === 1'bZ) ? 1'bX : ( D[15]);
assign  D_buf[16] = (D[16] === 1'bZ) ? 1'bX : ( D[16]);
assign  D_buf[17] = (D[17] === 1'bZ) ? 1'bX : ( D[17]);
assign  D_buf[18] = (D[18] === 1'bZ) ? 1'bX : ( D[18]);
assign  D_buf[19] = (D[19] === 1'bZ) ? 1'bX : ( D[19]);
assign  D_buf[20] = (D[20] === 1'bZ) ? 1'bX : ( D[20]);
assign  D_buf[21] = (D[21] === 1'bZ) ? 1'bX : ( D[21]);
assign  D_buf[22] = (D[22] === 1'bZ) ? 1'bX : ( D[22]);
assign  D_buf[23] = (D[23] === 1'bZ) ? 1'bX : ( D[23]);
assign  D_buf[24] = (D[24] === 1'bZ) ? 1'bX : ( D[24]);
assign  D_buf[25] = (D[25] === 1'bZ) ? 1'bX : ( D[25]);
assign  D_buf[26] = (D[26] === 1'bZ) ? 1'bX : ( D[26]);
assign  D_buf[27] = (D[27] === 1'bZ) ? 1'bX : ( D[27]);
assign  D_buf[28] = (D[28] === 1'bZ) ? 1'bX : ( D[28]);
assign  D_buf[29] = (D[29] === 1'bZ) ? 1'bX : ( D[29]);
assign  D_buf[30] = (D[30] === 1'bZ) ? 1'bX : ( D[30]);
assign  D_buf[31] = (D[31] === 1'bZ) ? 1'bX : ( D[31]);
assign  D_buf[32] = (D[32] === 1'bZ) ? 1'bX : ( D[32]);
assign  D_buf[33] = (D[33] === 1'bZ) ? 1'bX : ( D[33]);
assign  D_buf[34] = (D[34] === 1'bZ) ? 1'bX : ( D[34]);
assign  D_buf[35] = (D[35] === 1'bZ) ? 1'bX : ( D[35]);
assign  D_buf[36] = (D[36] === 1'bZ) ? 1'bX : ( D[36]);
assign  D_buf[37] = (D[37] === 1'bZ) ? 1'bX : ( D[37]);
assign  D_buf[38] = (D[38] === 1'bZ) ? 1'bX : ( D[38]);
assign  D_buf[39] = (D[39] === 1'bZ) ? 1'bX : ( D[39]);
assign  D_buf[40] = (D[40] === 1'bZ) ? 1'bX : ( D[40]);
assign  D_buf[41] = (D[41] === 1'bZ) ? 1'bX : ( D[41]);
assign  D_buf[42] = (D[42] === 1'bZ) ? 1'bX : ( D[42]);
assign  D_buf[43] = (D[43] === 1'bZ) ? 1'bX : ( D[43]);
assign  D_buf[44] = (D[44] === 1'bZ) ? 1'bX : ( D[44]);
assign  D_buf[45] = (D[45] === 1'bZ) ? 1'bX : ( D[45]);
assign  D_buf[46] = (D[46] === 1'bZ) ? 1'bX : ( D[46]);
assign  D_buf[47] = (D[47] === 1'bZ) ? 1'bX : ( D[47]);
assign  D_buf[48] = (D[48] === 1'bZ) ? 1'bX : ( D[48]);
assign  D_buf[49] = (D[49] === 1'bZ) ? 1'bX : ( D[49]);
assign  D_buf[50] = (D[50] === 1'bZ) ? 1'bX : ( D[50]);
assign  D_buf[51] = (D[51] === 1'bZ) ? 1'bX : ( D[51]);
assign  D_buf[52] = (D[52] === 1'bZ) ? 1'bX : ( D[52]);
assign  D_buf[53] = (D[53] === 1'bZ) ? 1'bX : ( D[53]);
assign  D_buf[54] = (D[54] === 1'bZ) ? 1'bX : ( D[54]);
assign  D_buf[55] = (D[55] === 1'bZ) ? 1'bX : ( D[55]);
assign  D_buf[56] = (D[56] === 1'bZ) ? 1'bX : ( D[56]);
assign  D_buf[57] = (D[57] === 1'bZ) ? 1'bX : ( D[57]);
assign  D_buf[58] = (D[58] === 1'bZ) ? 1'bX : ( D[58]);
assign  D_buf[59] = (D[59] === 1'bZ) ? 1'bX : ( D[59]);
assign  D_buf[60] = (D[60] === 1'bZ) ? 1'bX : ( D[60]);
assign  D_buf[61] = (D[61] === 1'bZ) ? 1'bX : ( D[61]);
assign  D_buf[62] = (D[62] === 1'bZ) ? 1'bX : ( D[62]);
assign  D_buf[63] = (D[63] === 1'bZ) ? 1'bX : ( D[63]);
wire [63:0] WEM_buf;
assign  WEM_buf[0] = (WEM[0] === 1'bZ) ? 1'bX : ( WEM[0]);
assign  WEM_buf[1] = (WEM[1] === 1'bZ) ? 1'bX : ( WEM[1]);
assign  WEM_buf[2] = (WEM[2] === 1'bZ) ? 1'bX : ( WEM[2]);
assign  WEM_buf[3] = (WEM[3] === 1'bZ) ? 1'bX : ( WEM[3]);
assign  WEM_buf[4] = (WEM[4] === 1'bZ) ? 1'bX : ( WEM[4]);
assign  WEM_buf[5] = (WEM[5] === 1'bZ) ? 1'bX : ( WEM[5]);
assign  WEM_buf[6] = (WEM[6] === 1'bZ) ? 1'bX : ( WEM[6]);
assign  WEM_buf[7] = (WEM[7] === 1'bZ) ? 1'bX : ( WEM[7]);
assign  WEM_buf[8] = (WEM[8] === 1'bZ) ? 1'bX : ( WEM[8]);
assign  WEM_buf[9] = (WEM[9] === 1'bZ) ? 1'bX : ( WEM[9]);
assign  WEM_buf[10] = (WEM[10] === 1'bZ) ? 1'bX : ( WEM[10]);
assign  WEM_buf[11] = (WEM[11] === 1'bZ) ? 1'bX : ( WEM[11]);
assign  WEM_buf[12] = (WEM[12] === 1'bZ) ? 1'bX : ( WEM[12]);
assign  WEM_buf[13] = (WEM[13] === 1'bZ) ? 1'bX : ( WEM[13]);
assign  WEM_buf[14] = (WEM[14] === 1'bZ) ? 1'bX : ( WEM[14]);
assign  WEM_buf[15] = (WEM[15] === 1'bZ) ? 1'bX : ( WEM[15]);
assign  WEM_buf[16] = (WEM[16] === 1'bZ) ? 1'bX : ( WEM[16]);
assign  WEM_buf[17] = (WEM[17] === 1'bZ) ? 1'bX : ( WEM[17]);
assign  WEM_buf[18] = (WEM[18] === 1'bZ) ? 1'bX : ( WEM[18]);
assign  WEM_buf[19] = (WEM[19] === 1'bZ) ? 1'bX : ( WEM[19]);
assign  WEM_buf[20] = (WEM[20] === 1'bZ) ? 1'bX : ( WEM[20]);
assign  WEM_buf[21] = (WEM[21] === 1'bZ) ? 1'bX : ( WEM[21]);
assign  WEM_buf[22] = (WEM[22] === 1'bZ) ? 1'bX : ( WEM[22]);
assign  WEM_buf[23] = (WEM[23] === 1'bZ) ? 1'bX : ( WEM[23]);
assign  WEM_buf[24] = (WEM[24] === 1'bZ) ? 1'bX : ( WEM[24]);
assign  WEM_buf[25] = (WEM[25] === 1'bZ) ? 1'bX : ( WEM[25]);
assign  WEM_buf[26] = (WEM[26] === 1'bZ) ? 1'bX : ( WEM[26]);
assign  WEM_buf[27] = (WEM[27] === 1'bZ) ? 1'bX : ( WEM[27]);
assign  WEM_buf[28] = (WEM[28] === 1'bZ) ? 1'bX : ( WEM[28]);
assign  WEM_buf[29] = (WEM[29] === 1'bZ) ? 1'bX : ( WEM[29]);
assign  WEM_buf[30] = (WEM[30] === 1'bZ) ? 1'bX : ( WEM[30]);
assign  WEM_buf[31] = (WEM[31] === 1'bZ) ? 1'bX : ( WEM[31]);
assign  WEM_buf[32] = (WEM[32] === 1'bZ) ? 1'bX : ( WEM[32]);
assign  WEM_buf[33] = (WEM[33] === 1'bZ) ? 1'bX : ( WEM[33]);
assign  WEM_buf[34] = (WEM[34] === 1'bZ) ? 1'bX : ( WEM[34]);
assign  WEM_buf[35] = (WEM[35] === 1'bZ) ? 1'bX : ( WEM[35]);
assign  WEM_buf[36] = (WEM[36] === 1'bZ) ? 1'bX : ( WEM[36]);
assign  WEM_buf[37] = (WEM[37] === 1'bZ) ? 1'bX : ( WEM[37]);
assign  WEM_buf[38] = (WEM[38] === 1'bZ) ? 1'bX : ( WEM[38]);
assign  WEM_buf[39] = (WEM[39] === 1'bZ) ? 1'bX : ( WEM[39]);
assign  WEM_buf[40] = (WEM[40] === 1'bZ) ? 1'bX : ( WEM[40]);
assign  WEM_buf[41] = (WEM[41] === 1'bZ) ? 1'bX : ( WEM[41]);
assign  WEM_buf[42] = (WEM[42] === 1'bZ) ? 1'bX : ( WEM[42]);
assign  WEM_buf[43] = (WEM[43] === 1'bZ) ? 1'bX : ( WEM[43]);
assign  WEM_buf[44] = (WEM[44] === 1'bZ) ? 1'bX : ( WEM[44]);
assign  WEM_buf[45] = (WEM[45] === 1'bZ) ? 1'bX : ( WEM[45]);
assign  WEM_buf[46] = (WEM[46] === 1'bZ) ? 1'bX : ( WEM[46]);
assign  WEM_buf[47] = (WEM[47] === 1'bZ) ? 1'bX : ( WEM[47]);
assign  WEM_buf[48] = (WEM[48] === 1'bZ) ? 1'bX : ( WEM[48]);
assign  WEM_buf[49] = (WEM[49] === 1'bZ) ? 1'bX : ( WEM[49]);
assign  WEM_buf[50] = (WEM[50] === 1'bZ) ? 1'bX : ( WEM[50]);
assign  WEM_buf[51] = (WEM[51] === 1'bZ) ? 1'bX : ( WEM[51]);
assign  WEM_buf[52] = (WEM[52] === 1'bZ) ? 1'bX : ( WEM[52]);
assign  WEM_buf[53] = (WEM[53] === 1'bZ) ? 1'bX : ( WEM[53]);
assign  WEM_buf[54] = (WEM[54] === 1'bZ) ? 1'bX : ( WEM[54]);
assign  WEM_buf[55] = (WEM[55] === 1'bZ) ? 1'bX : ( WEM[55]);
assign  WEM_buf[56] = (WEM[56] === 1'bZ) ? 1'bX : ( WEM[56]);
assign  WEM_buf[57] = (WEM[57] === 1'bZ) ? 1'bX : ( WEM[57]);
assign  WEM_buf[58] = (WEM[58] === 1'bZ) ? 1'bX : ( WEM[58]);
assign  WEM_buf[59] = (WEM[59] === 1'bZ) ? 1'bX : ( WEM[59]);
assign  WEM_buf[60] = (WEM[60] === 1'bZ) ? 1'bX : ( WEM[60]);
assign  WEM_buf[61] = (WEM[61] === 1'bZ) ? 1'bX : ( WEM[61]);
assign  WEM_buf[62] = (WEM[62] === 1'bZ) ? 1'bX : ( WEM[62]);
assign  WEM_buf[63] = (WEM[63] === 1'bZ) ? 1'bX : ( WEM[63]);
wire WE_buf;
assign  WE_buf = (WE === 1'bZ) ? 1'bX : ( WE);
wire ME_buf;
assign  ME_buf = (ME === 1'bZ) ? 1'bX : ( ME);
wire CLK_buf;
assign  CLK_buf = (CLK === 1'bZ) ? 1'bX : ( CLK);
wire RSCIN_buf;
assign  RSCIN_buf = (RSCIN === 1'bZ) ? 1'bX : ( RSCIN);
wire RSCEN_buf;
assign  RSCEN_buf = (RSCEN === 1'bZ) ? 1'bX : ( RSCEN);
wire RSCRST_buf;
assign  RSCRST_buf = (RSCRST === 1'bZ) ? 1'bX : ( RSCRST);
wire RSCLK_buf;
assign  RSCLK_buf = (RSCLK === 1'bZ) ? 1'bX : ( RSCLK);
wire FISO_buf;
assign  FISO_buf = (FISO === 1'bZ) ? 1'bX : ( FISO);
wire TEST1_buf;
assign  TEST1_buf = (TEST1 === 1'bZ) ? 1'bX : ( TEST1);
wire TEST_RNM_buf;
assign  TEST_RNM_buf = (TEST_RNM === 1'bZ) ? 1'bX : ( TEST_RNM);
wire RME_buf;
assign  RME_buf = (RME === 1'bZ) ? 1'bX : ( RME);
wire [2:0] RM_int;
wire [3:0] RM_buf;
assign  RM_buf[0] = (RM[0] === 1'bZ) ? 1'bX : ( RM[0]);
assign  RM_buf[1] = (RM[1] === 1'bZ) ? 1'bX : ( RM[1]);
assign  RM_buf[2] = (RM[2] === 1'bZ) ? 1'bX : ( RM[2]);
assign  RM_buf[3] = (RM[3] === 1'bZ) ? 1'bX : ( RM[3]);
wire LS_buf;
assign  LS_buf = (LS === 1'bZ) ? 1'bX : ( LS);
wire BC1_buf;
assign  BC1_buf = (BC1 === 1'bZ) ? 1'bX : ( BC1);
wire BC2_buf;
assign  BC2_buf = (BC2 === 1'bZ) ? 1'bX : ( BC2);
`else
wire [63:0] Q_buf;
buf (Q[0], Q_buf[0]);
buf (Q[1], Q_buf[1]);
buf (Q[2], Q_buf[2]);
buf (Q[3], Q_buf[3]);
buf (Q[4], Q_buf[4]);
buf (Q[5], Q_buf[5]);
buf (Q[6], Q_buf[6]);
buf (Q[7], Q_buf[7]);
buf (Q[8], Q_buf[8]);
buf (Q[9], Q_buf[9]);
buf (Q[10], Q_buf[10]);
buf (Q[11], Q_buf[11]);
buf (Q[12], Q_buf[12]);
buf (Q[13], Q_buf[13]);
buf (Q[14], Q_buf[14]);
buf (Q[15], Q_buf[15]);
buf (Q[16], Q_buf[16]);
buf (Q[17], Q_buf[17]);
buf (Q[18], Q_buf[18]);
buf (Q[19], Q_buf[19]);
buf (Q[20], Q_buf[20]);
buf (Q[21], Q_buf[21]);
buf (Q[22], Q_buf[22]);
buf (Q[23], Q_buf[23]);
buf (Q[24], Q_buf[24]);
buf (Q[25], Q_buf[25]);
buf (Q[26], Q_buf[26]);
buf (Q[27], Q_buf[27]);
buf (Q[28], Q_buf[28]);
buf (Q[29], Q_buf[29]);
buf (Q[30], Q_buf[30]);
buf (Q[31], Q_buf[31]);
buf (Q[32], Q_buf[32]);
buf (Q[33], Q_buf[33]);
buf (Q[34], Q_buf[34]);
buf (Q[35], Q_buf[35]);
buf (Q[36], Q_buf[36]);
buf (Q[37], Q_buf[37]);
buf (Q[38], Q_buf[38]);
buf (Q[39], Q_buf[39]);
buf (Q[40], Q_buf[40]);
buf (Q[41], Q_buf[41]);
buf (Q[42], Q_buf[42]);
buf (Q[43], Q_buf[43]);
buf (Q[44], Q_buf[44]);
buf (Q[45], Q_buf[45]);
buf (Q[46], Q_buf[46]);
buf (Q[47], Q_buf[47]);
buf (Q[48], Q_buf[48]);
buf (Q[49], Q_buf[49]);
buf (Q[50], Q_buf[50]);
buf (Q[51], Q_buf[51]);
buf (Q[52], Q_buf[52]);
buf (Q[53], Q_buf[53]);
buf (Q[54], Q_buf[54]);
buf (Q[55], Q_buf[55]);
buf (Q[56], Q_buf[56]);
buf (Q[57], Q_buf[57]);
buf (Q[58], Q_buf[58]);
buf (Q[59], Q_buf[59]);
buf (Q[60], Q_buf[60]);
buf (Q[61], Q_buf[61]);
buf (Q[62], Q_buf[62]);
buf (Q[63], Q_buf[63]);
wire RSCOUT_buf;
buf (RSCOUT, RSCOUT_buf);
wire [8:0] ADR_buf;
wire [8:0] delayed_ADR;
buf (ADR_buf[0], delayed_ADR[0]);
buf (ADR_buf[1], delayed_ADR[1]);
buf (ADR_buf[2], delayed_ADR[2]);
buf (ADR_buf[3], delayed_ADR[3]);
buf (ADR_buf[4], delayed_ADR[4]);
buf (ADR_buf[5], delayed_ADR[5]);
buf (ADR_buf[6], delayed_ADR[6]);
buf (ADR_buf[7], delayed_ADR[7]);
buf (ADR_buf[8], delayed_ADR[8]);
wire [63:0] D_buf;
wire [63:0] delayed_D;
buf (D_buf[0], delayed_D[0]);
buf (D_buf[1], delayed_D[1]);
buf (D_buf[2], delayed_D[2]);
buf (D_buf[3], delayed_D[3]);
buf (D_buf[4], delayed_D[4]);
buf (D_buf[5], delayed_D[5]);
buf (D_buf[6], delayed_D[6]);
buf (D_buf[7], delayed_D[7]);
buf (D_buf[8], delayed_D[8]);
buf (D_buf[9], delayed_D[9]);
buf (D_buf[10], delayed_D[10]);
buf (D_buf[11], delayed_D[11]);
buf (D_buf[12], delayed_D[12]);
buf (D_buf[13], delayed_D[13]);
buf (D_buf[14], delayed_D[14]);
buf (D_buf[15], delayed_D[15]);
buf (D_buf[16], delayed_D[16]);
buf (D_buf[17], delayed_D[17]);
buf (D_buf[18], delayed_D[18]);
buf (D_buf[19], delayed_D[19]);
buf (D_buf[20], delayed_D[20]);
buf (D_buf[21], delayed_D[21]);
buf (D_buf[22], delayed_D[22]);
buf (D_buf[23], delayed_D[23]);
buf (D_buf[24], delayed_D[24]);
buf (D_buf[25], delayed_D[25]);
buf (D_buf[26], delayed_D[26]);
buf (D_buf[27], delayed_D[27]);
buf (D_buf[28], delayed_D[28]);
buf (D_buf[29], delayed_D[29]);
buf (D_buf[30], delayed_D[30]);
buf (D_buf[31], delayed_D[31]);
buf (D_buf[32], delayed_D[32]);
buf (D_buf[33], delayed_D[33]);
buf (D_buf[34], delayed_D[34]);
buf (D_buf[35], delayed_D[35]);
buf (D_buf[36], delayed_D[36]);
buf (D_buf[37], delayed_D[37]);
buf (D_buf[38], delayed_D[38]);
buf (D_buf[39], delayed_D[39]);
buf (D_buf[40], delayed_D[40]);
buf (D_buf[41], delayed_D[41]);
buf (D_buf[42], delayed_D[42]);
buf (D_buf[43], delayed_D[43]);
buf (D_buf[44], delayed_D[44]);
buf (D_buf[45], delayed_D[45]);
buf (D_buf[46], delayed_D[46]);
buf (D_buf[47], delayed_D[47]);
buf (D_buf[48], delayed_D[48]);
buf (D_buf[49], delayed_D[49]);
buf (D_buf[50], delayed_D[50]);
buf (D_buf[51], delayed_D[51]);
buf (D_buf[52], delayed_D[52]);
buf (D_buf[53], delayed_D[53]);
buf (D_buf[54], delayed_D[54]);
buf (D_buf[55], delayed_D[55]);
buf (D_buf[56], delayed_D[56]);
buf (D_buf[57], delayed_D[57]);
buf (D_buf[58], delayed_D[58]);
buf (D_buf[59], delayed_D[59]);
buf (D_buf[60], delayed_D[60]);
buf (D_buf[61], delayed_D[61]);
buf (D_buf[62], delayed_D[62]);
buf (D_buf[63], delayed_D[63]);
wire [63:0] WEM_buf;
wire [63:0] delayed_WEM;
buf (WEM_buf[0], delayed_WEM[0]);
buf (WEM_buf[1], delayed_WEM[1]);
buf (WEM_buf[2], delayed_WEM[2]);
buf (WEM_buf[3], delayed_WEM[3]);
buf (WEM_buf[4], delayed_WEM[4]);
buf (WEM_buf[5], delayed_WEM[5]);
buf (WEM_buf[6], delayed_WEM[6]);
buf (WEM_buf[7], delayed_WEM[7]);
buf (WEM_buf[8], delayed_WEM[8]);
buf (WEM_buf[9], delayed_WEM[9]);
buf (WEM_buf[10], delayed_WEM[10]);
buf (WEM_buf[11], delayed_WEM[11]);
buf (WEM_buf[12], delayed_WEM[12]);
buf (WEM_buf[13], delayed_WEM[13]);
buf (WEM_buf[14], delayed_WEM[14]);
buf (WEM_buf[15], delayed_WEM[15]);
buf (WEM_buf[16], delayed_WEM[16]);
buf (WEM_buf[17], delayed_WEM[17]);
buf (WEM_buf[18], delayed_WEM[18]);
buf (WEM_buf[19], delayed_WEM[19]);
buf (WEM_buf[20], delayed_WEM[20]);
buf (WEM_buf[21], delayed_WEM[21]);
buf (WEM_buf[22], delayed_WEM[22]);
buf (WEM_buf[23], delayed_WEM[23]);
buf (WEM_buf[24], delayed_WEM[24]);
buf (WEM_buf[25], delayed_WEM[25]);
buf (WEM_buf[26], delayed_WEM[26]);
buf (WEM_buf[27], delayed_WEM[27]);
buf (WEM_buf[28], delayed_WEM[28]);
buf (WEM_buf[29], delayed_WEM[29]);
buf (WEM_buf[30], delayed_WEM[30]);
buf (WEM_buf[31], delayed_WEM[31]);
buf (WEM_buf[32], delayed_WEM[32]);
buf (WEM_buf[33], delayed_WEM[33]);
buf (WEM_buf[34], delayed_WEM[34]);
buf (WEM_buf[35], delayed_WEM[35]);
buf (WEM_buf[36], delayed_WEM[36]);
buf (WEM_buf[37], delayed_WEM[37]);
buf (WEM_buf[38], delayed_WEM[38]);
buf (WEM_buf[39], delayed_WEM[39]);
buf (WEM_buf[40], delayed_WEM[40]);
buf (WEM_buf[41], delayed_WEM[41]);
buf (WEM_buf[42], delayed_WEM[42]);
buf (WEM_buf[43], delayed_WEM[43]);
buf (WEM_buf[44], delayed_WEM[44]);
buf (WEM_buf[45], delayed_WEM[45]);
buf (WEM_buf[46], delayed_WEM[46]);
buf (WEM_buf[47], delayed_WEM[47]);
buf (WEM_buf[48], delayed_WEM[48]);
buf (WEM_buf[49], delayed_WEM[49]);
buf (WEM_buf[50], delayed_WEM[50]);
buf (WEM_buf[51], delayed_WEM[51]);
buf (WEM_buf[52], delayed_WEM[52]);
buf (WEM_buf[53], delayed_WEM[53]);
buf (WEM_buf[54], delayed_WEM[54]);
buf (WEM_buf[55], delayed_WEM[55]);
buf (WEM_buf[56], delayed_WEM[56]);
buf (WEM_buf[57], delayed_WEM[57]);
buf (WEM_buf[58], delayed_WEM[58]);
buf (WEM_buf[59], delayed_WEM[59]);
buf (WEM_buf[60], delayed_WEM[60]);
buf (WEM_buf[61], delayed_WEM[61]);
buf (WEM_buf[62], delayed_WEM[62]);
buf (WEM_buf[63], delayed_WEM[63]);
wire delayed_WE;
buf (WE_buf, delayed_WE);
wire delayed_ME;
buf (ME_buf, delayed_ME);
wire delayed_CLK;
buf (CLK_buf, delayed_CLK);
wire delayed_RSCIN;
buf (RSCIN_buf, delayed_RSCIN);
wire delayed_RSCEN;
buf (RSCEN_buf, delayed_RSCEN);
wire delayed_RSCRST;
buf (RSCRST_buf, delayed_RSCRST);
wire delayed_RSCLK;
buf (RSCLK_buf, delayed_RSCLK);
wire delayed_FISO;
buf (FISO_buf, delayed_FISO);
wire delayed_TEST1;
buf (TEST1_buf, delayed_TEST1);
wire delayed_TEST_RNM;
buf (TEST_RNM_buf, delayed_TEST_RNM);
wire delayed_RME;
buf (RME_buf, delayed_RME);
wire [2:0] RM_int;
wire [3:0] RM_buf;
wire [3:0] delayed_RM;
buf (RM_buf[0], delayed_RM[0]);
buf (RM_buf[1], delayed_RM[1]);
buf (RM_buf[2], delayed_RM[2]);
buf (RM_buf[3], delayed_RM[3]);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire delayed_BC1;
buf (BC1_buf, delayed_BC1);
wire delayed_BC2;
buf (BC2_buf, delayed_BC2);
`endif
// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [8 : 0] address;
input [5:0] bit_pos;
input flt_type;
reg [6:0] X_adr;
reg [1:0] Y_adr;
reg [8:0] col_address;
reg [263:0] memrow;
begin
  if (address < 512)
  begin
  if (uut.faultinj_en == 0)
  begin
    X_adr = address[8:2];
    Y_adr = address[1:0];
      uut.get_column_position (col_address, Y_adr, bit_pos);
    if (flt_type == 1)
    begin
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa1[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa0[X_adr] = memrow;
    end
    else
    begin
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa0[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa1[X_adr] = memrow;
    end
  end
  end
  else
  begin
    $display("\n%m<<VIRL_MEM_ERR: No fault injection for address out of range.>>(time %0t)", $time);
  end
end
endtask
`endif

reg disp_LS_msg;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msg_old;
initial
begin : reinit_msg_blk
  disp_LS_msg_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    if ($realtime > 0 )
    begin
      if (msg_start_lmt > $realtime)
      begin
        en_msg_cntrl = 1'b0;
        en_msg_cntrl <= #(msg_start_lmt - $realtime) 1'b1;
      end
      if (msg_end_lmt > $realtime)
        en_msg_cntrl <= #(msg_end_lmt - $realtime) 1'b0;
      else
        en_msg_cntrl = 1'b0;
    end
    else
    begin
      mes_all_valid_old = 1'b0;
      en_msg_cntrl = 1'b0;
      en_msg_cntrl <= #msg_start_lmt 1'b1;
      en_msg_cntrl <= #msg_end_lmt 1'b0;
    end
  end
  else
  begin
    en_msg_cntrl = 1'b0;
    if ($realtime == 0)
      mes_all_valid_old = 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @( en_msg_cntrl )
begin
  if (en_msg_cntrl !== 1'b0 )
  begin
    if (!(en_msg_cntrl === 1'bx && mes_all_valid_old === 1'b1))
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msg_old = disp_LS_msg;
    assign disp_LS_msg = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msg;
    disp_LS_msg = disp_LS_msg_old;
    `ifdef SNPS_SUPPORT_UPF_SIM
    disp_LS_msg = 1'b1;
     `endif
  end
end


wire ADR_valid;
assign ADR_valid =  (ADR_buf <= 9'b111111111 )?1'b1:1'b0;
wire RSCIN_fiso_buf,RSCEN_fiso_buf,RSCRST_fiso_buf,RSCLK_fiso_buf;
reg RSCEN_fiso_pre;

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO_buf or negedge RSCLK_fiso_buf or RSCEN_fiso_buf)
begin : blk_rscenbuf_0
  if (FISO_buf == 1'b1)
    RSCEN_fiso_pre = 1'b0;
  else
  if ( RSCLK_fiso_buf == 1'b0)
    RSCEN_fiso_pre = RSCEN_fiso_buf;
end // end of always block blk_rscenbuf_0
assign RSCIN_fiso_buf  =  (RSCIN_buf && !FISO_buf);
assign RSCEN_fiso_buf  =  (RSCEN_buf && !FISO_buf);
assign RSCRST_fiso_buf =  (RSCRST_buf && !FISO_buf);
assign RSCLK_fiso_buf =  (RSCLK_buf && !FISO_buf);

real t0_pfirst, t1_pfirst, t2_pnow, t2_nnow, t3_me;
initial
begin
  t0_pfirst = 0.0;
  t1_pfirst = 0.0;
  t2_pnow = 0.0;
  t2_nnow = 0.0;
  t3_me = 0.0;
end

always @(posedge CLK_buf)
begin
  t0_pfirst = t1_pfirst;
  t1_pfirst = t2_pnow;
  t2_pnow = $realtime;
  if ((t1_pfirst < t3_me) && (t3_me < t2_pnow))
  begin   
    uut.diff_me_tch = 1'b1;
  end
  if ((t0_pfirst < t3_me) && (t3_me < t2_pnow))
  begin   
    uut.diff_me_tcc = 1'b1;
  end
    @(negedge CLK_buf)
    t2_nnow = $realtime;
    #0.001;
    uut.diff_me_tch = 1'b0;
    uut.diff_me_tcc = 1'b0;
end

always @(ME_buf)
begin
  t3_me = $realtime;
  if ((t2_pnow < t3_me) && (t2_nnow < t3_me))
  begin   
    uut.diff_me_tch = 1'b1;
  end
end
// Setup/hold conditions for synchronous signals
reg  ME_pre,WE_pre;
reg  [8:0] ADR_pre;
reg  [63:0] D_pre;
reg  [63:0] WEM_pre;
reg flag_ADR_x;

always @(ME_buf or negedge CLK_buf) 
begin : blk_mebuf_0
  if ( CLK_buf == 1'b0)
  begin
    ME_pre = ME_buf;
  end // if of CLK_buf = 0
end // end of always block blk_mebuf_0

always @(WE_buf or negedge CLK_buf) 
begin : blk_webuf_0
  if ( CLK_buf == 1'b0)
  begin
    WE_pre = WE_buf;
  end // if of CLK_buf = 0
end // end of always block blk_webuf_0

always @(ADR_buf or negedge CLK_buf) 
begin : blk_addrbuf_0
  if ( CLK_buf == 1'b0)
  begin
    ADR_pre = ADR_buf;
  end // if of CLK_buf = 0
  if ( (^ADR_buf) === 1'bx)
  begin
    flag_ADR_x = 1'b1;
  end
  else
  begin
    flag_ADR_x = 1'b0;
  end
end // end of always block blk_addrbuf_0

always @(D_buf or negedge CLK_buf) 
begin : blk_dibuf_0
  if ( CLK_buf == 1'b0)
  begin
    D_pre = D_buf;
  end // if of CLK_buf = 0
end // end of always block blk_dibuf_0

always @(WEM_buf or negedge CLK_buf)
begin : blk_wembuf_0
  if ( CLK_buf == 1'b0)
  begin
    WEM_pre = WEM_buf;
  end // if of CLK_buf = 0
end // end of always block blk_wembuf_$
`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADR is : ENADR
wire ENADR;
assign ENADR = ( ME_pre !== 1'b0  && (LS_buf === 1'b0) ? 1'b1 : 1'b0 );
 
// Setup/hold condition for Memory Enable: ME is : ENME
wire ENME;
assign ENME = (( (ADR_valid || flag_ADR_x)) ? 1'b1 : 1'b0 );

// Setup/hold condition for Write Enable: WE is : ENWE
wire ENWE;
assign ENWE = (( ME_pre !== 1'b0   && (LS_buf === 1'b0) ) ?1'b1:1'b0);

// Setup/hold condition for Write Enable Mask: WEM is : ENWEM
wire ENWEM;
assign ENWEM =  (( ADR_valid && ME_pre !== 1'b0 && WE_pre !== 1'b0   && (LS_buf === 1'b0) )?1'b1:1'b0);

// Setup/hold condition for Data In: D is : END
wire END_tmp;
assign END_tmp = (( ADR_valid && ME_pre !== 1'b0 && WE_pre !== 1'b0   && (LS_buf === 1'b0) )?1'b1:1'b0) ;

wire [63:0] END;

genvar nk;
generate for (nk=0; nk<64; nk=nk+1)
begin : END_blk
assign END[nk] = (WEM_pre[nk] !== 1'b0) ? END_tmp : 1'b0;
end 
endgenerate

// Setup/hold condition for test1 Vector: TEST1 is : ENTEST1
wire ENTEST1;
assign ENTEST1 = ((ME_pre !== 1'b0 && ADR_valid  && (LS_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for test_rnm Vector: TEST_RNM is : ENTEST_RNM
wire ENTEST_RNM;
assign ENTEST_RNM = ((ME_pre !== 1'b0   && (LS_buf === 1'b0))?1'b1:1'b0);
 
// Setup/hold condition for Read Margin Vector: RM is : ENRM
wire ENRM;
assign ENRM = ((RME_buf === 1'b1 && (ME_pre !== 1'b0 && ADR_valid  && (LS_buf === 1'b0)))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector Enable: RME is : ENRME
wire ENRME;
assign ENRME = ((ME_pre !== 1'b0 && ADR_valid  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for BC1 Vector: BC1 is : ENBC1
wire ENBC1;
assign ENBC1 = ((LS_buf !== 1'b0)?1'b1:1'b0);
// Setup/hold condition for BC2 Vector: BC2 is : ENBC2
wire ENBC2;
assign ENBC2 = ((LS_buf !== 1'b0)?1'b1:1'b0);
// Setup/hold condition for Light Sleep: LS is : ENLS
wire ENLS;
assign ENLS = ((ME_pre !== 1'b0)?1'b1:1'b0);

wire ENCLK;
assign ENCLK = (( (TEST1_buf === 1'b0))?1'b1:1'b0);
wire ENCLK_test1;
assign ENCLK_test1 = (( (TEST1_buf === 1'b1))?1'b1:1'b0);

wire ENCLK_rmezo,ENCLK_vdm,ENCLK_slw,ENCLK_def,ENCLK_fst,ENCLK_fster;
assign ENCLK_rmezo = ((RME_buf !== 1'b1)?1'b1:1'b0) ;

assign ENCLK_vdm = ((RME_buf === 1'b1  && ((RM_buf[0] !== 1'b1) && (RM_buf[1] !== 1'b1) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLK_slw = ((RME_buf === 1'b1  && ((RM_buf[0] !== 1'b0) && (RM_buf[1] !== 1'b1) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLK_def = ((RME_buf === 1'b1  && ((RM_buf[0] !== 1'b1) && (RM_buf[1] !== 1'b0) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLK_fst = ((RME_buf === 1'b1  && ((RM_buf[0] !== 1'b0) && (RM_buf[1] !== 1'b0) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0) ;
assign ENCLK_fster = ((RME_buf === 1'b1  && ((RM_buf[2] !== 1'b0) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0) ;
wire ENRSCIN;
assign ENRSCIN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCEN;
assign ENRSCEN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0)?1'b1:1'b0);
wire ENRSCRST;
assign ENRSCRST = ((FISO_buf === 1'b0)?1'b1:1'b0);
wire ENRSCLK;
assign ENRSCLK = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCRSTRSCLKrec;
assign ENRSCRSTRSCLKrec = ((FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);
wire ENRSCRSTCLKrec;
assign ENRSCRSTCLKrec = ((FISO_buf === 1'b0 && ME_pre === 1'b1 )?1'b1:1'b0);
wire ENRSCLKCLKrec;
assign ENRSCLKCLKrec = ((FISO_buf === 1'b0 && ME_pre === 1'b1 && RSCRST_buf === 1'b0 && RSCEN_buf === 1'b1 )?1'b1:1'b0);
wire ENRSCENCLKrec;
assign ENRSCENCLKrec = ((FISO_buf === 1'b0 && ME_pre === 1'b1  && RSCRST_buf === 1'b0)?1'b1:1'b0);
`endif // endif of VIRAGE_FAST_VERILOG

reg LS_old;

`ifdef VIRAGE_FAST_VERILOG
`else
specify
 
  specparam
    Tac = 0.045,
    Tcax = 0.076,
    Tdc = 0.129,
    Tcdx = 0.074,
    Twmc = 0.129,
    Tcwmx = 0.074,
    Twc = 0.067,
    Tcwx = 0.091,
    Tmc = 0.057,
    Tcmx = 0.008,
    Tcl = 0.092,
    Tcltest1 = 0.151,
    Tch = 0.092,
    Tchtest1 = 0.330,
    Tcc = 0.403,
    Tccvddmin = 0.685,
    Tccslow = 0.427,
    Tccdef = 0.403,
    Tccfast = 0.376,
    Tccfaster = 0.370,
    Trinc = 0.032,
    Tcrinx = 0.068,
    Trenc = 0.032,
    Tcrenx = 0.068,
    Trenclkrec = 4.395,
    Trrstrclkrec = 4.331,
    Trrstclkrec = 4.373,
    Trrst = 0.126,
    Trclkclkrec = 4.395,
    Trclkl = 0.299,
    Trclkh = 0.150,
    Trclkc = 0.449,
    TT1C = 0.129,
    TCT1X = 0.375,
    Ttrnmc = 0.129,
    Tctrnmx = 0.403,
    Trmec = 0.102,
    Tcrmex = 0.034,
    Trmc = 0.102,
    Trm2c = 0.058,
    Trm3c = 0.113,
    Tcrmx = 0.034,
    Tcrm2x = 0.008,
    Tcrm3x = 0.403,
    Trlsc = 0.008,
    Tflsc = 0.133,
    Tlsx = 0.092,
    Tbc1c = 0.043,
    Tbc2c = 0.046,
    Tcq = 0.275,
    Tcqx = 0.201,
    Tcqvddmin = 0.433,
    Tcqvddminx = 0.346,
    Tcqslow = 0.300,
    Tcqslowx = 0.231,
    Tcqdef = 0.275,
    Tcqdefx = 0.201,
    Tcqfast = 0.261,
    Tcqfastx = 0.188,
    Tcqfaster = 0.258,
    Tcqfasterx = 0.183,
    Tcqtest1x = 0.121,
    Tcqtest1 = 0.151,
    Trclkrout = 0.146;
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[63]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[62]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[61]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[60]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[59]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[58]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[57]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[56]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[55]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[54]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[53]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[52]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[51]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[50]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[49]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[48]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[47]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[46]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[45]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[44]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[43]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[42]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[41]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[40]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3]  & !LS & !TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  Q[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  Q[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !FISO & RSCEN )
       ( posedge RSCLK => (  RSCOUT  : 1'bx )) = (  Trclkrout, Trclkrout );

// Timing Checks

  $width (negedge CLK &&& ENCLK, Tcl, 0, notif_clk);
  $width (negedge CLK &&& ENCLK_test1, Tcltest1, 0, notif_clk);
  $width (posedge CLK &&& ENCLK, Tch, 0, notif_clk);
  $width (posedge CLK &&& ENCLK_test1, Tchtest1, 0, notif_clk);
  $period (posedge CLK &&& ENCLK_rmezo, Tcc, notif_clkp);
  $period (negedge CLK &&& ENCLK_rmezo, Tcc, notif_clk);
  $period (posedge CLK &&& ENCLK_vdm, Tccvddmin, notif_clkp);
  $period (negedge CLK &&& ENCLK_vdm, Tccvddmin, notif_clk);
  $period (posedge CLK &&& ENCLK_slw, Tccslow, notif_clkp);
  $period (negedge CLK &&& ENCLK_slw, Tccslow, notif_clk);
  $period (posedge CLK &&& ENCLK_def, Tccdef, notif_clkp);
  $period (negedge CLK &&& ENCLK_def, Tccdef, notif_clk);
  $period (posedge CLK &&& ENCLK_fst, Tccfast, notif_clkp);
  $period (negedge CLK &&& ENCLK_fst, Tccfast, notif_clk);
  $period (posedge CLK &&& ENCLK_fster, Tccfaster, notif_clkp);
  $period (negedge CLK &&& ENCLK_fster, Tccfaster, notif_clk);
  $width (posedge RSCRST &&& ENRSCRST, Trrst, 0, notif_rscrst);
  $width (negedge RSCLK &&& ENRSCLK, Trclkl, 0, notif_rsclk);
  $width (posedge RSCLK &&& ENRSCLK, Trclkh, 0, notif_rsclk);
  $period (posedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $period (negedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[0], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[0] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[0], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[0] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[1], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[1] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[1], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[1] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[2], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[2] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[2], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[2] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[3], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[3] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[3], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[3] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[4], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[4] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[4], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[4] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[5], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[5] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[5], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[5] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[6], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[6] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[6], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[6] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[7], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[7] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[7], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[7] );
  $setuphold (posedge CLK  &&& ENADR, posedge ADR[8], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[8] );
  $setuphold (posedge CLK  &&& ENADR, negedge ADR[8], Tac, Tcax, notif_adr,,, delayed_CLK, delayed_ADR[8] );
  $setuphold (posedge CLK  &&& END[0], posedge D[0], Tdc, Tcdx, notif_d_0,,, delayed_CLK, delayed_D[0] );
  $setuphold (posedge CLK  &&& END[0], negedge D[0], Tdc, Tcdx, notif_d_0,,, delayed_CLK, delayed_D[0] );
  $setuphold (posedge CLK  &&& END[1], posedge D[1], Tdc, Tcdx, notif_d_1,,, delayed_CLK, delayed_D[1] );
  $setuphold (posedge CLK  &&& END[1], negedge D[1], Tdc, Tcdx, notif_d_1,,, delayed_CLK, delayed_D[1] );
  $setuphold (posedge CLK  &&& END[2], posedge D[2], Tdc, Tcdx, notif_d_2,,, delayed_CLK, delayed_D[2] );
  $setuphold (posedge CLK  &&& END[2], negedge D[2], Tdc, Tcdx, notif_d_2,,, delayed_CLK, delayed_D[2] );
  $setuphold (posedge CLK  &&& END[3], posedge D[3], Tdc, Tcdx, notif_d_3,,, delayed_CLK, delayed_D[3] );
  $setuphold (posedge CLK  &&& END[3], negedge D[3], Tdc, Tcdx, notif_d_3,,, delayed_CLK, delayed_D[3] );
  $setuphold (posedge CLK  &&& END[4], posedge D[4], Tdc, Tcdx, notif_d_4,,, delayed_CLK, delayed_D[4] );
  $setuphold (posedge CLK  &&& END[4], negedge D[4], Tdc, Tcdx, notif_d_4,,, delayed_CLK, delayed_D[4] );
  $setuphold (posedge CLK  &&& END[5], posedge D[5], Tdc, Tcdx, notif_d_5,,, delayed_CLK, delayed_D[5] );
  $setuphold (posedge CLK  &&& END[5], negedge D[5], Tdc, Tcdx, notif_d_5,,, delayed_CLK, delayed_D[5] );
  $setuphold (posedge CLK  &&& END[6], posedge D[6], Tdc, Tcdx, notif_d_6,,, delayed_CLK, delayed_D[6] );
  $setuphold (posedge CLK  &&& END[6], negedge D[6], Tdc, Tcdx, notif_d_6,,, delayed_CLK, delayed_D[6] );
  $setuphold (posedge CLK  &&& END[7], posedge D[7], Tdc, Tcdx, notif_d_7,,, delayed_CLK, delayed_D[7] );
  $setuphold (posedge CLK  &&& END[7], negedge D[7], Tdc, Tcdx, notif_d_7,,, delayed_CLK, delayed_D[7] );
  $setuphold (posedge CLK  &&& END[8], posedge D[8], Tdc, Tcdx, notif_d_8,,, delayed_CLK, delayed_D[8] );
  $setuphold (posedge CLK  &&& END[8], negedge D[8], Tdc, Tcdx, notif_d_8,,, delayed_CLK, delayed_D[8] );
  $setuphold (posedge CLK  &&& END[9], posedge D[9], Tdc, Tcdx, notif_d_9,,, delayed_CLK, delayed_D[9] );
  $setuphold (posedge CLK  &&& END[9], negedge D[9], Tdc, Tcdx, notif_d_9,,, delayed_CLK, delayed_D[9] );
  $setuphold (posedge CLK  &&& END[10], posedge D[10], Tdc, Tcdx, notif_d_10,,, delayed_CLK, delayed_D[10] );
  $setuphold (posedge CLK  &&& END[10], negedge D[10], Tdc, Tcdx, notif_d_10,,, delayed_CLK, delayed_D[10] );
  $setuphold (posedge CLK  &&& END[11], posedge D[11], Tdc, Tcdx, notif_d_11,,, delayed_CLK, delayed_D[11] );
  $setuphold (posedge CLK  &&& END[11], negedge D[11], Tdc, Tcdx, notif_d_11,,, delayed_CLK, delayed_D[11] );
  $setuphold (posedge CLK  &&& END[12], posedge D[12], Tdc, Tcdx, notif_d_12,,, delayed_CLK, delayed_D[12] );
  $setuphold (posedge CLK  &&& END[12], negedge D[12], Tdc, Tcdx, notif_d_12,,, delayed_CLK, delayed_D[12] );
  $setuphold (posedge CLK  &&& END[13], posedge D[13], Tdc, Tcdx, notif_d_13,,, delayed_CLK, delayed_D[13] );
  $setuphold (posedge CLK  &&& END[13], negedge D[13], Tdc, Tcdx, notif_d_13,,, delayed_CLK, delayed_D[13] );
  $setuphold (posedge CLK  &&& END[14], posedge D[14], Tdc, Tcdx, notif_d_14,,, delayed_CLK, delayed_D[14] );
  $setuphold (posedge CLK  &&& END[14], negedge D[14], Tdc, Tcdx, notif_d_14,,, delayed_CLK, delayed_D[14] );
  $setuphold (posedge CLK  &&& END[15], posedge D[15], Tdc, Tcdx, notif_d_15,,, delayed_CLK, delayed_D[15] );
  $setuphold (posedge CLK  &&& END[15], negedge D[15], Tdc, Tcdx, notif_d_15,,, delayed_CLK, delayed_D[15] );
  $setuphold (posedge CLK  &&& END[16], posedge D[16], Tdc, Tcdx, notif_d_16,,, delayed_CLK, delayed_D[16] );
  $setuphold (posedge CLK  &&& END[16], negedge D[16], Tdc, Tcdx, notif_d_16,,, delayed_CLK, delayed_D[16] );
  $setuphold (posedge CLK  &&& END[17], posedge D[17], Tdc, Tcdx, notif_d_17,,, delayed_CLK, delayed_D[17] );
  $setuphold (posedge CLK  &&& END[17], negedge D[17], Tdc, Tcdx, notif_d_17,,, delayed_CLK, delayed_D[17] );
  $setuphold (posedge CLK  &&& END[18], posedge D[18], Tdc, Tcdx, notif_d_18,,, delayed_CLK, delayed_D[18] );
  $setuphold (posedge CLK  &&& END[18], negedge D[18], Tdc, Tcdx, notif_d_18,,, delayed_CLK, delayed_D[18] );
  $setuphold (posedge CLK  &&& END[19], posedge D[19], Tdc, Tcdx, notif_d_19,,, delayed_CLK, delayed_D[19] );
  $setuphold (posedge CLK  &&& END[19], negedge D[19], Tdc, Tcdx, notif_d_19,,, delayed_CLK, delayed_D[19] );
  $setuphold (posedge CLK  &&& END[20], posedge D[20], Tdc, Tcdx, notif_d_20,,, delayed_CLK, delayed_D[20] );
  $setuphold (posedge CLK  &&& END[20], negedge D[20], Tdc, Tcdx, notif_d_20,,, delayed_CLK, delayed_D[20] );
  $setuphold (posedge CLK  &&& END[21], posedge D[21], Tdc, Tcdx, notif_d_21,,, delayed_CLK, delayed_D[21] );
  $setuphold (posedge CLK  &&& END[21], negedge D[21], Tdc, Tcdx, notif_d_21,,, delayed_CLK, delayed_D[21] );
  $setuphold (posedge CLK  &&& END[22], posedge D[22], Tdc, Tcdx, notif_d_22,,, delayed_CLK, delayed_D[22] );
  $setuphold (posedge CLK  &&& END[22], negedge D[22], Tdc, Tcdx, notif_d_22,,, delayed_CLK, delayed_D[22] );
  $setuphold (posedge CLK  &&& END[23], posedge D[23], Tdc, Tcdx, notif_d_23,,, delayed_CLK, delayed_D[23] );
  $setuphold (posedge CLK  &&& END[23], negedge D[23], Tdc, Tcdx, notif_d_23,,, delayed_CLK, delayed_D[23] );
  $setuphold (posedge CLK  &&& END[24], posedge D[24], Tdc, Tcdx, notif_d_24,,, delayed_CLK, delayed_D[24] );
  $setuphold (posedge CLK  &&& END[24], negedge D[24], Tdc, Tcdx, notif_d_24,,, delayed_CLK, delayed_D[24] );
  $setuphold (posedge CLK  &&& END[25], posedge D[25], Tdc, Tcdx, notif_d_25,,, delayed_CLK, delayed_D[25] );
  $setuphold (posedge CLK  &&& END[25], negedge D[25], Tdc, Tcdx, notif_d_25,,, delayed_CLK, delayed_D[25] );
  $setuphold (posedge CLK  &&& END[26], posedge D[26], Tdc, Tcdx, notif_d_26,,, delayed_CLK, delayed_D[26] );
  $setuphold (posedge CLK  &&& END[26], negedge D[26], Tdc, Tcdx, notif_d_26,,, delayed_CLK, delayed_D[26] );
  $setuphold (posedge CLK  &&& END[27], posedge D[27], Tdc, Tcdx, notif_d_27,,, delayed_CLK, delayed_D[27] );
  $setuphold (posedge CLK  &&& END[27], negedge D[27], Tdc, Tcdx, notif_d_27,,, delayed_CLK, delayed_D[27] );
  $setuphold (posedge CLK  &&& END[28], posedge D[28], Tdc, Tcdx, notif_d_28,,, delayed_CLK, delayed_D[28] );
  $setuphold (posedge CLK  &&& END[28], negedge D[28], Tdc, Tcdx, notif_d_28,,, delayed_CLK, delayed_D[28] );
  $setuphold (posedge CLK  &&& END[29], posedge D[29], Tdc, Tcdx, notif_d_29,,, delayed_CLK, delayed_D[29] );
  $setuphold (posedge CLK  &&& END[29], negedge D[29], Tdc, Tcdx, notif_d_29,,, delayed_CLK, delayed_D[29] );
  $setuphold (posedge CLK  &&& END[30], posedge D[30], Tdc, Tcdx, notif_d_30,,, delayed_CLK, delayed_D[30] );
  $setuphold (posedge CLK  &&& END[30], negedge D[30], Tdc, Tcdx, notif_d_30,,, delayed_CLK, delayed_D[30] );
  $setuphold (posedge CLK  &&& END[31], posedge D[31], Tdc, Tcdx, notif_d_31,,, delayed_CLK, delayed_D[31] );
  $setuphold (posedge CLK  &&& END[31], negedge D[31], Tdc, Tcdx, notif_d_31,,, delayed_CLK, delayed_D[31] );
  $setuphold (posedge CLK  &&& END[32], posedge D[32], Tdc, Tcdx, notif_d_32,,, delayed_CLK, delayed_D[32] );
  $setuphold (posedge CLK  &&& END[32], negedge D[32], Tdc, Tcdx, notif_d_32,,, delayed_CLK, delayed_D[32] );
  $setuphold (posedge CLK  &&& END[33], posedge D[33], Tdc, Tcdx, notif_d_33,,, delayed_CLK, delayed_D[33] );
  $setuphold (posedge CLK  &&& END[33], negedge D[33], Tdc, Tcdx, notif_d_33,,, delayed_CLK, delayed_D[33] );
  $setuphold (posedge CLK  &&& END[34], posedge D[34], Tdc, Tcdx, notif_d_34,,, delayed_CLK, delayed_D[34] );
  $setuphold (posedge CLK  &&& END[34], negedge D[34], Tdc, Tcdx, notif_d_34,,, delayed_CLK, delayed_D[34] );
  $setuphold (posedge CLK  &&& END[35], posedge D[35], Tdc, Tcdx, notif_d_35,,, delayed_CLK, delayed_D[35] );
  $setuphold (posedge CLK  &&& END[35], negedge D[35], Tdc, Tcdx, notif_d_35,,, delayed_CLK, delayed_D[35] );
  $setuphold (posedge CLK  &&& END[36], posedge D[36], Tdc, Tcdx, notif_d_36,,, delayed_CLK, delayed_D[36] );
  $setuphold (posedge CLK  &&& END[36], negedge D[36], Tdc, Tcdx, notif_d_36,,, delayed_CLK, delayed_D[36] );
  $setuphold (posedge CLK  &&& END[37], posedge D[37], Tdc, Tcdx, notif_d_37,,, delayed_CLK, delayed_D[37] );
  $setuphold (posedge CLK  &&& END[37], negedge D[37], Tdc, Tcdx, notif_d_37,,, delayed_CLK, delayed_D[37] );
  $setuphold (posedge CLK  &&& END[38], posedge D[38], Tdc, Tcdx, notif_d_38,,, delayed_CLK, delayed_D[38] );
  $setuphold (posedge CLK  &&& END[38], negedge D[38], Tdc, Tcdx, notif_d_38,,, delayed_CLK, delayed_D[38] );
  $setuphold (posedge CLK  &&& END[39], posedge D[39], Tdc, Tcdx, notif_d_39,,, delayed_CLK, delayed_D[39] );
  $setuphold (posedge CLK  &&& END[39], negedge D[39], Tdc, Tcdx, notif_d_39,,, delayed_CLK, delayed_D[39] );
  $setuphold (posedge CLK  &&& END[40], posedge D[40], Tdc, Tcdx, notif_d_40,,, delayed_CLK, delayed_D[40] );
  $setuphold (posedge CLK  &&& END[40], negedge D[40], Tdc, Tcdx, notif_d_40,,, delayed_CLK, delayed_D[40] );
  $setuphold (posedge CLK  &&& END[41], posedge D[41], Tdc, Tcdx, notif_d_41,,, delayed_CLK, delayed_D[41] );
  $setuphold (posedge CLK  &&& END[41], negedge D[41], Tdc, Tcdx, notif_d_41,,, delayed_CLK, delayed_D[41] );
  $setuphold (posedge CLK  &&& END[42], posedge D[42], Tdc, Tcdx, notif_d_42,,, delayed_CLK, delayed_D[42] );
  $setuphold (posedge CLK  &&& END[42], negedge D[42], Tdc, Tcdx, notif_d_42,,, delayed_CLK, delayed_D[42] );
  $setuphold (posedge CLK  &&& END[43], posedge D[43], Tdc, Tcdx, notif_d_43,,, delayed_CLK, delayed_D[43] );
  $setuphold (posedge CLK  &&& END[43], negedge D[43], Tdc, Tcdx, notif_d_43,,, delayed_CLK, delayed_D[43] );
  $setuphold (posedge CLK  &&& END[44], posedge D[44], Tdc, Tcdx, notif_d_44,,, delayed_CLK, delayed_D[44] );
  $setuphold (posedge CLK  &&& END[44], negedge D[44], Tdc, Tcdx, notif_d_44,,, delayed_CLK, delayed_D[44] );
  $setuphold (posedge CLK  &&& END[45], posedge D[45], Tdc, Tcdx, notif_d_45,,, delayed_CLK, delayed_D[45] );
  $setuphold (posedge CLK  &&& END[45], negedge D[45], Tdc, Tcdx, notif_d_45,,, delayed_CLK, delayed_D[45] );
  $setuphold (posedge CLK  &&& END[46], posedge D[46], Tdc, Tcdx, notif_d_46,,, delayed_CLK, delayed_D[46] );
  $setuphold (posedge CLK  &&& END[46], negedge D[46], Tdc, Tcdx, notif_d_46,,, delayed_CLK, delayed_D[46] );
  $setuphold (posedge CLK  &&& END[47], posedge D[47], Tdc, Tcdx, notif_d_47,,, delayed_CLK, delayed_D[47] );
  $setuphold (posedge CLK  &&& END[47], negedge D[47], Tdc, Tcdx, notif_d_47,,, delayed_CLK, delayed_D[47] );
  $setuphold (posedge CLK  &&& END[48], posedge D[48], Tdc, Tcdx, notif_d_48,,, delayed_CLK, delayed_D[48] );
  $setuphold (posedge CLK  &&& END[48], negedge D[48], Tdc, Tcdx, notif_d_48,,, delayed_CLK, delayed_D[48] );
  $setuphold (posedge CLK  &&& END[49], posedge D[49], Tdc, Tcdx, notif_d_49,,, delayed_CLK, delayed_D[49] );
  $setuphold (posedge CLK  &&& END[49], negedge D[49], Tdc, Tcdx, notif_d_49,,, delayed_CLK, delayed_D[49] );
  $setuphold (posedge CLK  &&& END[50], posedge D[50], Tdc, Tcdx, notif_d_50,,, delayed_CLK, delayed_D[50] );
  $setuphold (posedge CLK  &&& END[50], negedge D[50], Tdc, Tcdx, notif_d_50,,, delayed_CLK, delayed_D[50] );
  $setuphold (posedge CLK  &&& END[51], posedge D[51], Tdc, Tcdx, notif_d_51,,, delayed_CLK, delayed_D[51] );
  $setuphold (posedge CLK  &&& END[51], negedge D[51], Tdc, Tcdx, notif_d_51,,, delayed_CLK, delayed_D[51] );
  $setuphold (posedge CLK  &&& END[52], posedge D[52], Tdc, Tcdx, notif_d_52,,, delayed_CLK, delayed_D[52] );
  $setuphold (posedge CLK  &&& END[52], negedge D[52], Tdc, Tcdx, notif_d_52,,, delayed_CLK, delayed_D[52] );
  $setuphold (posedge CLK  &&& END[53], posedge D[53], Tdc, Tcdx, notif_d_53,,, delayed_CLK, delayed_D[53] );
  $setuphold (posedge CLK  &&& END[53], negedge D[53], Tdc, Tcdx, notif_d_53,,, delayed_CLK, delayed_D[53] );
  $setuphold (posedge CLK  &&& END[54], posedge D[54], Tdc, Tcdx, notif_d_54,,, delayed_CLK, delayed_D[54] );
  $setuphold (posedge CLK  &&& END[54], negedge D[54], Tdc, Tcdx, notif_d_54,,, delayed_CLK, delayed_D[54] );
  $setuphold (posedge CLK  &&& END[55], posedge D[55], Tdc, Tcdx, notif_d_55,,, delayed_CLK, delayed_D[55] );
  $setuphold (posedge CLK  &&& END[55], negedge D[55], Tdc, Tcdx, notif_d_55,,, delayed_CLK, delayed_D[55] );
  $setuphold (posedge CLK  &&& END[56], posedge D[56], Tdc, Tcdx, notif_d_56,,, delayed_CLK, delayed_D[56] );
  $setuphold (posedge CLK  &&& END[56], negedge D[56], Tdc, Tcdx, notif_d_56,,, delayed_CLK, delayed_D[56] );
  $setuphold (posedge CLK  &&& END[57], posedge D[57], Tdc, Tcdx, notif_d_57,,, delayed_CLK, delayed_D[57] );
  $setuphold (posedge CLK  &&& END[57], negedge D[57], Tdc, Tcdx, notif_d_57,,, delayed_CLK, delayed_D[57] );
  $setuphold (posedge CLK  &&& END[58], posedge D[58], Tdc, Tcdx, notif_d_58,,, delayed_CLK, delayed_D[58] );
  $setuphold (posedge CLK  &&& END[58], negedge D[58], Tdc, Tcdx, notif_d_58,,, delayed_CLK, delayed_D[58] );
  $setuphold (posedge CLK  &&& END[59], posedge D[59], Tdc, Tcdx, notif_d_59,,, delayed_CLK, delayed_D[59] );
  $setuphold (posedge CLK  &&& END[59], negedge D[59], Tdc, Tcdx, notif_d_59,,, delayed_CLK, delayed_D[59] );
  $setuphold (posedge CLK  &&& END[60], posedge D[60], Tdc, Tcdx, notif_d_60,,, delayed_CLK, delayed_D[60] );
  $setuphold (posedge CLK  &&& END[60], negedge D[60], Tdc, Tcdx, notif_d_60,,, delayed_CLK, delayed_D[60] );
  $setuphold (posedge CLK  &&& END[61], posedge D[61], Tdc, Tcdx, notif_d_61,,, delayed_CLK, delayed_D[61] );
  $setuphold (posedge CLK  &&& END[61], negedge D[61], Tdc, Tcdx, notif_d_61,,, delayed_CLK, delayed_D[61] );
  $setuphold (posedge CLK  &&& END[62], posedge D[62], Tdc, Tcdx, notif_d_62,,, delayed_CLK, delayed_D[62] );
  $setuphold (posedge CLK  &&& END[62], negedge D[62], Tdc, Tcdx, notif_d_62,,, delayed_CLK, delayed_D[62] );
  $setuphold (posedge CLK  &&& END[63], posedge D[63], Tdc, Tcdx, notif_d_63,,, delayed_CLK, delayed_D[63] );
  $setuphold (posedge CLK  &&& END[63], negedge D[63], Tdc, Tcdx, notif_d_63,,, delayed_CLK, delayed_D[63] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[0], Twmc, Tcwmx, notif_wem_0,,, delayed_CLK, delayed_WEM[0] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[0], Twmc, Tcwmx, notif_wem_0,,, delayed_CLK, delayed_WEM[0] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[1], Twmc, Tcwmx, notif_wem_1,,, delayed_CLK, delayed_WEM[1] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[1], Twmc, Tcwmx, notif_wem_1,,, delayed_CLK, delayed_WEM[1] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[2], Twmc, Tcwmx, notif_wem_2,,, delayed_CLK, delayed_WEM[2] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[2], Twmc, Tcwmx, notif_wem_2,,, delayed_CLK, delayed_WEM[2] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[3], Twmc, Tcwmx, notif_wem_3,,, delayed_CLK, delayed_WEM[3] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[3], Twmc, Tcwmx, notif_wem_3,,, delayed_CLK, delayed_WEM[3] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[4], Twmc, Tcwmx, notif_wem_4,,, delayed_CLK, delayed_WEM[4] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[4], Twmc, Tcwmx, notif_wem_4,,, delayed_CLK, delayed_WEM[4] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[5], Twmc, Tcwmx, notif_wem_5,,, delayed_CLK, delayed_WEM[5] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[5], Twmc, Tcwmx, notif_wem_5,,, delayed_CLK, delayed_WEM[5] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[6], Twmc, Tcwmx, notif_wem_6,,, delayed_CLK, delayed_WEM[6] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[6], Twmc, Tcwmx, notif_wem_6,,, delayed_CLK, delayed_WEM[6] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[7], Twmc, Tcwmx, notif_wem_7,,, delayed_CLK, delayed_WEM[7] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[7], Twmc, Tcwmx, notif_wem_7,,, delayed_CLK, delayed_WEM[7] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[8], Twmc, Tcwmx, notif_wem_8,,, delayed_CLK, delayed_WEM[8] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[8], Twmc, Tcwmx, notif_wem_8,,, delayed_CLK, delayed_WEM[8] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[9], Twmc, Tcwmx, notif_wem_9,,, delayed_CLK, delayed_WEM[9] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[9], Twmc, Tcwmx, notif_wem_9,,, delayed_CLK, delayed_WEM[9] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[10], Twmc, Tcwmx, notif_wem_10,,, delayed_CLK, delayed_WEM[10] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[10], Twmc, Tcwmx, notif_wem_10,,, delayed_CLK, delayed_WEM[10] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[11], Twmc, Tcwmx, notif_wem_11,,, delayed_CLK, delayed_WEM[11] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[11], Twmc, Tcwmx, notif_wem_11,,, delayed_CLK, delayed_WEM[11] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[12], Twmc, Tcwmx, notif_wem_12,,, delayed_CLK, delayed_WEM[12] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[12], Twmc, Tcwmx, notif_wem_12,,, delayed_CLK, delayed_WEM[12] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[13], Twmc, Tcwmx, notif_wem_13,,, delayed_CLK, delayed_WEM[13] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[13], Twmc, Tcwmx, notif_wem_13,,, delayed_CLK, delayed_WEM[13] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[14], Twmc, Tcwmx, notif_wem_14,,, delayed_CLK, delayed_WEM[14] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[14], Twmc, Tcwmx, notif_wem_14,,, delayed_CLK, delayed_WEM[14] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[15], Twmc, Tcwmx, notif_wem_15,,, delayed_CLK, delayed_WEM[15] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[15], Twmc, Tcwmx, notif_wem_15,,, delayed_CLK, delayed_WEM[15] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[16], Twmc, Tcwmx, notif_wem_16,,, delayed_CLK, delayed_WEM[16] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[16], Twmc, Tcwmx, notif_wem_16,,, delayed_CLK, delayed_WEM[16] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[17], Twmc, Tcwmx, notif_wem_17,,, delayed_CLK, delayed_WEM[17] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[17], Twmc, Tcwmx, notif_wem_17,,, delayed_CLK, delayed_WEM[17] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[18], Twmc, Tcwmx, notif_wem_18,,, delayed_CLK, delayed_WEM[18] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[18], Twmc, Tcwmx, notif_wem_18,,, delayed_CLK, delayed_WEM[18] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[19], Twmc, Tcwmx, notif_wem_19,,, delayed_CLK, delayed_WEM[19] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[19], Twmc, Tcwmx, notif_wem_19,,, delayed_CLK, delayed_WEM[19] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[20], Twmc, Tcwmx, notif_wem_20,,, delayed_CLK, delayed_WEM[20] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[20], Twmc, Tcwmx, notif_wem_20,,, delayed_CLK, delayed_WEM[20] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[21], Twmc, Tcwmx, notif_wem_21,,, delayed_CLK, delayed_WEM[21] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[21], Twmc, Tcwmx, notif_wem_21,,, delayed_CLK, delayed_WEM[21] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[22], Twmc, Tcwmx, notif_wem_22,,, delayed_CLK, delayed_WEM[22] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[22], Twmc, Tcwmx, notif_wem_22,,, delayed_CLK, delayed_WEM[22] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[23], Twmc, Tcwmx, notif_wem_23,,, delayed_CLK, delayed_WEM[23] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[23], Twmc, Tcwmx, notif_wem_23,,, delayed_CLK, delayed_WEM[23] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[24], Twmc, Tcwmx, notif_wem_24,,, delayed_CLK, delayed_WEM[24] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[24], Twmc, Tcwmx, notif_wem_24,,, delayed_CLK, delayed_WEM[24] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[25], Twmc, Tcwmx, notif_wem_25,,, delayed_CLK, delayed_WEM[25] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[25], Twmc, Tcwmx, notif_wem_25,,, delayed_CLK, delayed_WEM[25] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[26], Twmc, Tcwmx, notif_wem_26,,, delayed_CLK, delayed_WEM[26] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[26], Twmc, Tcwmx, notif_wem_26,,, delayed_CLK, delayed_WEM[26] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[27], Twmc, Tcwmx, notif_wem_27,,, delayed_CLK, delayed_WEM[27] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[27], Twmc, Tcwmx, notif_wem_27,,, delayed_CLK, delayed_WEM[27] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[28], Twmc, Tcwmx, notif_wem_28,,, delayed_CLK, delayed_WEM[28] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[28], Twmc, Tcwmx, notif_wem_28,,, delayed_CLK, delayed_WEM[28] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[29], Twmc, Tcwmx, notif_wem_29,,, delayed_CLK, delayed_WEM[29] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[29], Twmc, Tcwmx, notif_wem_29,,, delayed_CLK, delayed_WEM[29] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[30], Twmc, Tcwmx, notif_wem_30,,, delayed_CLK, delayed_WEM[30] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[30], Twmc, Tcwmx, notif_wem_30,,, delayed_CLK, delayed_WEM[30] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[31], Twmc, Tcwmx, notif_wem_31,,, delayed_CLK, delayed_WEM[31] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[31], Twmc, Tcwmx, notif_wem_31,,, delayed_CLK, delayed_WEM[31] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[32], Twmc, Tcwmx, notif_wem_32,,, delayed_CLK, delayed_WEM[32] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[32], Twmc, Tcwmx, notif_wem_32,,, delayed_CLK, delayed_WEM[32] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[33], Twmc, Tcwmx, notif_wem_33,,, delayed_CLK, delayed_WEM[33] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[33], Twmc, Tcwmx, notif_wem_33,,, delayed_CLK, delayed_WEM[33] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[34], Twmc, Tcwmx, notif_wem_34,,, delayed_CLK, delayed_WEM[34] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[34], Twmc, Tcwmx, notif_wem_34,,, delayed_CLK, delayed_WEM[34] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[35], Twmc, Tcwmx, notif_wem_35,,, delayed_CLK, delayed_WEM[35] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[35], Twmc, Tcwmx, notif_wem_35,,, delayed_CLK, delayed_WEM[35] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[36], Twmc, Tcwmx, notif_wem_36,,, delayed_CLK, delayed_WEM[36] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[36], Twmc, Tcwmx, notif_wem_36,,, delayed_CLK, delayed_WEM[36] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[37], Twmc, Tcwmx, notif_wem_37,,, delayed_CLK, delayed_WEM[37] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[37], Twmc, Tcwmx, notif_wem_37,,, delayed_CLK, delayed_WEM[37] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[38], Twmc, Tcwmx, notif_wem_38,,, delayed_CLK, delayed_WEM[38] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[38], Twmc, Tcwmx, notif_wem_38,,, delayed_CLK, delayed_WEM[38] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[39], Twmc, Tcwmx, notif_wem_39,,, delayed_CLK, delayed_WEM[39] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[39], Twmc, Tcwmx, notif_wem_39,,, delayed_CLK, delayed_WEM[39] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[40], Twmc, Tcwmx, notif_wem_40,,, delayed_CLK, delayed_WEM[40] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[40], Twmc, Tcwmx, notif_wem_40,,, delayed_CLK, delayed_WEM[40] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[41], Twmc, Tcwmx, notif_wem_41,,, delayed_CLK, delayed_WEM[41] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[41], Twmc, Tcwmx, notif_wem_41,,, delayed_CLK, delayed_WEM[41] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[42], Twmc, Tcwmx, notif_wem_42,,, delayed_CLK, delayed_WEM[42] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[42], Twmc, Tcwmx, notif_wem_42,,, delayed_CLK, delayed_WEM[42] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[43], Twmc, Tcwmx, notif_wem_43,,, delayed_CLK, delayed_WEM[43] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[43], Twmc, Tcwmx, notif_wem_43,,, delayed_CLK, delayed_WEM[43] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[44], Twmc, Tcwmx, notif_wem_44,,, delayed_CLK, delayed_WEM[44] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[44], Twmc, Tcwmx, notif_wem_44,,, delayed_CLK, delayed_WEM[44] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[45], Twmc, Tcwmx, notif_wem_45,,, delayed_CLK, delayed_WEM[45] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[45], Twmc, Tcwmx, notif_wem_45,,, delayed_CLK, delayed_WEM[45] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[46], Twmc, Tcwmx, notif_wem_46,,, delayed_CLK, delayed_WEM[46] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[46], Twmc, Tcwmx, notif_wem_46,,, delayed_CLK, delayed_WEM[46] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[47], Twmc, Tcwmx, notif_wem_47,,, delayed_CLK, delayed_WEM[47] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[47], Twmc, Tcwmx, notif_wem_47,,, delayed_CLK, delayed_WEM[47] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[48], Twmc, Tcwmx, notif_wem_48,,, delayed_CLK, delayed_WEM[48] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[48], Twmc, Tcwmx, notif_wem_48,,, delayed_CLK, delayed_WEM[48] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[49], Twmc, Tcwmx, notif_wem_49,,, delayed_CLK, delayed_WEM[49] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[49], Twmc, Tcwmx, notif_wem_49,,, delayed_CLK, delayed_WEM[49] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[50], Twmc, Tcwmx, notif_wem_50,,, delayed_CLK, delayed_WEM[50] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[50], Twmc, Tcwmx, notif_wem_50,,, delayed_CLK, delayed_WEM[50] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[51], Twmc, Tcwmx, notif_wem_51,,, delayed_CLK, delayed_WEM[51] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[51], Twmc, Tcwmx, notif_wem_51,,, delayed_CLK, delayed_WEM[51] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[52], Twmc, Tcwmx, notif_wem_52,,, delayed_CLK, delayed_WEM[52] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[52], Twmc, Tcwmx, notif_wem_52,,, delayed_CLK, delayed_WEM[52] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[53], Twmc, Tcwmx, notif_wem_53,,, delayed_CLK, delayed_WEM[53] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[53], Twmc, Tcwmx, notif_wem_53,,, delayed_CLK, delayed_WEM[53] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[54], Twmc, Tcwmx, notif_wem_54,,, delayed_CLK, delayed_WEM[54] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[54], Twmc, Tcwmx, notif_wem_54,,, delayed_CLK, delayed_WEM[54] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[55], Twmc, Tcwmx, notif_wem_55,,, delayed_CLK, delayed_WEM[55] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[55], Twmc, Tcwmx, notif_wem_55,,, delayed_CLK, delayed_WEM[55] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[56], Twmc, Tcwmx, notif_wem_56,,, delayed_CLK, delayed_WEM[56] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[56], Twmc, Tcwmx, notif_wem_56,,, delayed_CLK, delayed_WEM[56] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[57], Twmc, Tcwmx, notif_wem_57,,, delayed_CLK, delayed_WEM[57] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[57], Twmc, Tcwmx, notif_wem_57,,, delayed_CLK, delayed_WEM[57] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[58], Twmc, Tcwmx, notif_wem_58,,, delayed_CLK, delayed_WEM[58] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[58], Twmc, Tcwmx, notif_wem_58,,, delayed_CLK, delayed_WEM[58] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[59], Twmc, Tcwmx, notif_wem_59,,, delayed_CLK, delayed_WEM[59] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[59], Twmc, Tcwmx, notif_wem_59,,, delayed_CLK, delayed_WEM[59] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[60], Twmc, Tcwmx, notif_wem_60,,, delayed_CLK, delayed_WEM[60] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[60], Twmc, Tcwmx, notif_wem_60,,, delayed_CLK, delayed_WEM[60] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[61], Twmc, Tcwmx, notif_wem_61,,, delayed_CLK, delayed_WEM[61] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[61], Twmc, Tcwmx, notif_wem_61,,, delayed_CLK, delayed_WEM[61] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[62], Twmc, Tcwmx, notif_wem_62,,, delayed_CLK, delayed_WEM[62] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[62], Twmc, Tcwmx, notif_wem_62,,, delayed_CLK, delayed_WEM[62] );
  $setuphold (posedge CLK  &&& ENWEM, posedge WEM[63], Twmc, Tcwmx, notif_wem_63,,, delayed_CLK, delayed_WEM[63] );
  $setuphold (posedge CLK  &&& ENWEM, negedge WEM[63], Twmc, Tcwmx, notif_wem_63,,, delayed_CLK, delayed_WEM[63] );
  $setuphold (posedge CLK  &&& ENWE, posedge WE,Twc, Tcwx, notif_we,,, delayed_CLK, delayed_WE );
  $setuphold (posedge CLK  &&& ENWE, negedge WE,Twc, Tcwx, notif_we,,, delayed_CLK, delayed_WE );
  $setuphold (posedge CLK  &&& ENME, posedge ME,Tmc, Tcmx, notif_me,,, delayed_CLK, delayed_ME );
  $setuphold (posedge CLK  &&& ENME, negedge ME,Tmc, Tcmx, notif_me,,, delayed_CLK, delayed_ME );
  $setuphold (posedge RSCLK  &&& ENRSCIN, posedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCIN, negedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, posedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, negedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK , posedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge RSCLK , negedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge CLK  &&& ENTEST1, posedge TEST1,TT1C, 0, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (posedge CLK  &&& ENTEST1, negedge TEST1,TT1C, 0, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (negedge CLK  &&& ENTEST1, posedge TEST1,0, TCT1X, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (negedge CLK  &&& ENTEST1, negedge TEST1,0, TCT1X, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (posedge CLK  &&& ENTEST_RNM, posedge TEST_RNM,Ttrnmc, Tctrnmx, notif_test_rnm,,, delayed_CLK, delayed_TEST_RNM );
  $setuphold (posedge CLK  &&& ENTEST_RNM, negedge TEST_RNM,Ttrnmc, Tctrnmx, notif_test_rnm,,, delayed_CLK, delayed_TEST_RNM );
  $setuphold (posedge CLK  &&& ENRME, posedge RME,Trmec, Tcrmex, notif_rme,,, delayed_CLK, delayed_RME );
  $setuphold (posedge CLK  &&& ENRME, negedge RME,Trmec, Tcrmex, notif_rme,,, delayed_CLK, delayed_RME );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[0], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[0] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[0], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[0] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[1], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[1] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[1], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[1] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[2], Trm2c, Tcrm2x, notif_rm,,, delayed_CLK, delayed_RM[2] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[2], Trm2c, Tcrm2x, notif_rm,,, delayed_CLK, delayed_RM[2] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[3], Trm3c, Tcrm3x, notif_rm,,, delayed_CLK, delayed_RM[3] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[3], Trm3c, Tcrm3x, notif_rm,,, delayed_CLK, delayed_RM[3] );
  $setuphold (posedge CLK  &&& ENLS, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_CLK, delayed_LS );
  $setuphold (posedge CLK  &&& ENLS, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_CLK, delayed_LS );
  $setuphold (posedge CLK  &&& ENBC1, posedge BC1,Tbc1c, 0, notif_bc1,,, delayed_CLK, delayed_BC1 );
  $setuphold (posedge CLK  &&& ENBC1, negedge BC1,Tbc1c, 0, notif_bc1,,, delayed_CLK, delayed_BC1 );
  $setuphold (posedge CLK  &&& ENBC2, posedge BC2,Tbc2c, 0, notif_bc2,,, delayed_CLK, delayed_BC2 );
  $setuphold (posedge CLK  &&& ENBC2, negedge BC2,Tbc2c, 0, notif_bc2,,, delayed_CLK, delayed_BC2 );
  $recrem ( negedge RSCEN,posedge CLK  &&& ENRSCENCLKrec, Trenclkrec, Trenclkrec, notif_rscen_CLK_rise_fall_rec,,, delayed_RSCEN, delayed_CLK);
  $recrem ( negedge RSCRST,posedge RSCLK  &&& ENRSCRSTRSCLKrec, Trrstrclkrec, Trrstrclkrec, notif_rscrst_RSCLK_rise_fall_rec,,, delayed_RSCRST, delayed_RSCLK);
  $recrem ( negedge RSCRST,posedge CLK  &&& ENRSCRSTCLKrec, Trrstclkrec, Trrstclkrec, notif_rscrst_CLK_rise_fall_rec,,, delayed_RSCRST, delayed_CLK);
  $recrem ( posedge RSCLK,posedge CLK  &&& ENRSCLKCLKrec, Trclkclkrec, Trclkclkrec, notif_rsclk_CLK_rise_rise_rec,,, delayed_RSCLK, delayed_CLK);

endspecify
`endif // endif of VIRAGE_FAST_VERILOG
wire test1_ls_pwr, mux_ls;
assign test1_ls_pwr = ((uut.TEST1latched === 1'b1 && uut.MElatched === 1'b1 ) ) && LS_buf;
assign mux_ls = (test1_ls_pwr === 1'b1) ? LS_old : ((test1_ls_pwr === 1'b0) ? LS_buf : 1'bX);

wire [63:0] Q_mem;
assign Q_buf = Q_mem;
// Corrupt memory if BC1 or BC2 assert during Light Mode or Deep Sleep Mode
always @(BC1_buf or BC2_buf)
begin
  if (LS_buf !== 1'b0)
  begin
    uut.corrupt_all_loc(`True);
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("\n%m<<VIRL_MEM_WARNING: Assertion on BC1/BC2 pin during Light Sleep Mode>>(time %0t)\n\n", $time);
    end
  end
  if (BC1_buf === 1'bX)
  begin
    uut.report_unknown("BC1");
    uut.corrupt_all_loc(`True);
  end
  if (BC2_buf === 1'bX)
  begin
    uut.report_unknown("BC2");
    uut.corrupt_all_loc(`True);
  end
end


`ifdef VIRAGE_FAST_VERILOG
generic_behav_RF_SPHD_512x64 #( MES_CNTRL, PreloadFilename, MemFault_Inj) uut (  .Q (Q_mem), .RSCOUT(RSCOUT_buf), .ADR (ADR_pre), .D (D_pre), .WEM (WEM_pre), .WE(WE_pre), .ME(ME_pre), .CLK(CLK_mem), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .TEST1(TEST1_buf), .TEST_RNM(TEST_RNM_buf), .RME(RME_buf), .RM (RM_int), .LS(LS_buf), .BC1(BC1_buf), .BC2(BC2_buf) );
`else
generic_behav_RF_SPHD_512x64 #( MES_CNTRL, PreloadFilename, MemFault_Inj) uut (  .Q (Q_mem), .RSCOUT(RSCOUT_buf), .ADR (ADR_pre), .D (D_pre), .WEM (WEM_pre), .WE(WE_pre), .ME(ME_pre), .CLK(CLK_mem), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .TEST1(TEST1_buf), .TEST_RNM(TEST_RNM_buf), .RME(RME_buf), .RM (RM_int), .LS(LS_buf), .BC1(BC1_buf), .BC2(BC2_buf),.notif_adr(notif_adr), .notif_d(notif_d), .notif_wem(notif_wem), .notif_we(notif_we), .notif_me(notif_me), .notif_clk(notif_clk), .notif_clkp(notif_clkp), .notif_rscin(notif_rscin), .notif_rscen(notif_rscen), .notif_rscen_CLK_rise_fall_rec(notif_rscen_CLK_rise_fall_rec), .notif_rscrst(notif_rscrst), .notif_rscrst_setup(notif_rscrst_setup), .notif_rscrst_RSCLK_rise_fall_rec(notif_rscrst_RSCLK_rise_fall_rec), .notif_rscrst_CLK_rise_fall_rec(notif_rscrst_CLK_rise_fall_rec), .notif_rsclk(notif_rsclk), .notif_rsclk_CLK_rise_rise_rec(notif_rsclk_CLK_rise_rise_rec), .notif_fiso(notif_fiso), 
.notif_test1(notif_test1), .notif_test_rnm(notif_test_rnm), .notif_rme(notif_rme), .notif_rm(notif_rm), .notif_ls(notif_ls), .notif_bc1(notif_bc1), .notif_bc2(notif_bc2) );
`endif // endif of VIRAGE_FAST_VERILOG

initial
begin

  ADRFLAGA = 1;
end // end of initial block

always @ ( ADR_buf )
begin : blk_address_0
  if ( $realtime != 0)
  begin
    if ( ADR_buf > 9'b111111111) 
    begin
      ADRFLAGA = 0;
    end // if of address is out of range
    else
    begin
      ADRFLAGA = 1;
    end // else of if address is out of range
  end // if of $realtime != 0
end // end of always block blk_address_0

assign RM_int = ((RME_buf===1'b1)?RM_buf[2:0]:((RME_buf===1'b0)?3'b010:3'bx));
wire llsb;
assign llsb = (!(mux_ls) || RM_buf[3]);

initial
begin
disp_LS_msg = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msg = 1'b1;
  disp_LS_msg_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLK_buf)
begin : blk_ls_0
  if (LS_buf === 1'b1 && ME_pre !== 1'b0)
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msg === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING:  No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msg = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0

always @(RM_buf[3])
begin
  if(RM_buf[3] === 1'bx)
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL == "WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RM[3] is unknown>> at time=%t; instance=%m (RF_SPHD_512x64_core)",$realtime);
    end
  end
end

always @( negedge CLK_mem or LS_buf )
begin 
  if (CLK_mem == 1'b0)
  begin
    LS_old <= LS_buf;
  end
end

`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_d = {notif_d_63, notif_d_62, notif_d_61, notif_d_60, notif_d_59, notif_d_58, notif_d_57, notif_d_56, notif_d_55, notif_d_54, notif_d_53, notif_d_52, notif_d_51, notif_d_50, notif_d_49, notif_d_48, notif_d_47, notif_d_46, notif_d_45, notif_d_44, notif_d_43, notif_d_42, notif_d_41, notif_d_40, notif_d_39, notif_d_38, notif_d_37, notif_d_36, notif_d_35, notif_d_34, notif_d_33, notif_d_32, notif_d_31, notif_d_30, notif_d_29, notif_d_28, notif_d_27, notif_d_26, notif_d_25, notif_d_24, notif_d_23, notif_d_22, notif_d_21, notif_d_20, notif_d_19, notif_d_18, notif_d_17, notif_d_16, notif_d_15, notif_d_14, notif_d_13, notif_d_12, notif_d_11, notif_d_10, notif_d_9, notif_d_8, notif_d_7, notif_d_6, notif_d_5, notif_d_4, notif_d_3, notif_d_2, notif_d_1, notif_d_0};
assign notif_wem = {notif_wem_63, notif_wem_62, notif_wem_61, notif_wem_60, notif_wem_59, notif_wem_58, notif_wem_57, notif_wem_56, notif_wem_55, notif_wem_54, notif_wem_53, notif_wem_52, notif_wem_51, notif_wem_50, notif_wem_49, notif_wem_48, notif_wem_47, notif_wem_46, notif_wem_45, notif_wem_44, notif_wem_43, notif_wem_42, notif_wem_41, notif_wem_40, notif_wem_39, notif_wem_38, notif_wem_37, notif_wem_36, notif_wem_35, notif_wem_34, notif_wem_33, notif_wem_32, notif_wem_31, notif_wem_30, notif_wem_29, notif_wem_28, notif_wem_27, notif_wem_26, notif_wem_25, notif_wem_24, notif_wem_23, notif_wem_22, notif_wem_21, notif_wem_20, notif_wem_19, notif_wem_18, notif_wem_17, notif_wem_16, notif_wem_15, notif_wem_14, notif_wem_13, notif_wem_12, notif_wem_11, notif_wem_10, notif_wem_9, notif_wem_8, notif_wem_7, notif_wem_6, notif_wem_5, notif_wem_4, notif_wem_3, notif_wem_2, notif_wem_1, notif_wem_0};
`endif // endif of VIRAGE_FAST_VERILOG

assign CLK_mem = CLK_buf;

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG
module generic_behav_RF_SPHD_512x64 (  Q, RSCOUT, ADR, D, WEM, WE, ME, CLK, RSCIN, RSCEN, RSCRST, RSCLK, FISO, TEST1, TEST_RNM, RME, RM, LS, BC1, BC2 );
`else
module generic_behav_RF_SPHD_512x64 (  Q, RSCOUT, ADR, D, WEM, WE, ME, CLK, RSCIN, RSCEN, RSCRST, RSCLK, FISO, TEST1, TEST_RNM, RME, RM, LS, BC1, BC2,notif_adr, notif_d, notif_wem, notif_we, notif_me, notif_clk, notif_clkp, notif_rscin, notif_rscen, notif_rscen_CLK_rise_fall_rec, notif_rscrst, notif_rscrst_setup, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLK_rise_fall_rec, notif_rsclk, notif_rsclk_CLK_rise_rise_rec, notif_fiso, notif_test1, notif_test_rnm, notif_rme, notif_rm, notif_ls, notif_bc1, notif_bc2 );
`endif // endif of VIRAGE_FAST_VERILOG

parameter MES_CNTRL = "ON";
parameter PreloadFilename = "init.file";
parameter MemFault_Inj = 0;

parameter words = 512, bits = 64, addrbits = 9, O_delay=0.0, timingmode = 1, wembits=64, rmbits=3;

output [bits-1:0] Q;
output RSCOUT;
input [addrbits-1:0] ADR;
input [bits-1:0] D;
input [wembits-1:0] WEM;
input WE;
input ME;
input CLK;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input TEST1;
input TEST_RNM;
input RME;
input [rmbits-1:0] RM;
input LS;
input BC1;
input BC2;

`ifdef VIRAGE_FAST_VERILOG
`else
input [63:0] notif_d;
input [63:0] notif_wem;
input notif_adr, notif_we, notif_me, notif_clk, notif_clkp, notif_rscin, notif_rscen, notif_rscen_CLK_rise_fall_rec, notif_rscrst, notif_rscrst_setup, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLK_rise_fall_rec, notif_rsclk, notif_rsclk_CLK_rise_rise_rec, notif_fiso, notif_test1, notif_test_rnm, notif_rme, notif_rm, notif_ls, notif_bc1, notif_bc2;

`endif // endif of VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };



reg  [bits-1:0]  Q;
reg RSCOUT;
reg [addrbits-1:0] ADRlatched;

reg [addrbits-1:0] ADR_old;

reg [bits-1:0] Dlatched;

reg [bits-1:0] D_old;

reg [wembits-1:0] WEMlatched;

reg [wembits-1:0] WEM_old;

reg WElatched;
reg WE_old;
reg MElatched;
reg ME_old;
reg RSCENlatched;
reg TEST1latched;
reg TEST_RNMlatched;
reg TEST_RNM_old;
reg diff_me_tch, diff_me_tcc;
reg TEST1_old;
reg  left_col_out_range;
reg  right_col_out_range;
integer bit_cnt;
reg flaga_clear_scan_reg;
reg flaga_shift_ok;
reg RST_check ;
reg RST_tri ;
reg [17:0] scan_reg;
reg RSCOUT_local;
wire RSCOUT_tmp;
reg disp_LS_msg;
reg disp_RSCLK_msg;
reg
  flaga_read_ok,
  flaga_we_ok,
  flaga_d_ok,
  WEM_violation,
  flaga_wem_ok,
  flaga_rm_ok,
  flaga_adr_ok,
  flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_viol;
event   ev_read_out_a_port;
event   ev_RST_out_a_port;
real CLK_TIME;
real CLKA_T;
wire [63:0] WEMall;
reg [63:0] WEMbuslatched;
wire   [63:0]  Q_temp;
reg    [63:0]  Q_local_tmp;
reg    [63:0]  memdata;
reg mes_all_valid;
integer i;
reg [263:0] mem_core_array [0:127];
reg [63:0] mem_core_array_read [0:511];

parameter MaxCol =264;
parameter MaxRow = 128 ;
integer tempcnt;
reg [MaxCol-1:0]mem_fault_array_XOR[0:MaxRow-1];
reg [MaxCol-1:0]mem_fault_array_sa0[0:MaxRow-1];
reg [MaxCol-1:0]mem_fault_array_sa1[0:MaxRow-1];
reg faultinj_en;
initial
begin : reinit_fault_blk
  faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
  faultinj_en = 1'b1;
`else
  if (MemFault_Inj == 1)
    faultinj_en = 1'b1;
`endif
  for (tempcnt=0; tempcnt<MaxRow; tempcnt=tempcnt+1)
  begin
    if (faultinj_en == 1)
      mem_fault_array_XOR[tempcnt] = 0;
    else
    begin
      mem_fault_array_sa0[tempcnt] = {MaxCol{1'b1}};
      mem_fault_array_sa1[tempcnt] = 0;
    end
  end
  if (faultinj_en == 1)
  begin
if ($test$plusargs("star_error_fail")) 
  begin
    mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4) | (1'b1 << 8);
  end // if of +star_error_fail is used
       else if ($test$plusargs("star_error_a")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 4) | (1'b1 << 136); 
       end // if of +star_error_a is used 
       else if ($test$plusargs("star_error_b")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 68) | (1'b1 << 200); 
       end // if of +star_error_b is used 
       else if ($test$plusargs("star_error_c")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 131) | (1'b1 << 263); 
       end // if of +star_error_c is used 

else if ($test$plusargs("star_error")) 
  begin
    mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4);
  end // if of +star_error is used
  end
end // end of initial block


// Checks whether address input is Valid; 1-bit return value
function is_adr_Valid;  
input [addrbits-1:0] addr_to_check;
reg     ret_value;
begin
  ret_value = `True;
  if ((^addr_to_check) === 1'bx)
  begin
    ret_value = `False;
  end // if addr_to_check is X
  is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*8:1] signal;
begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask


// Calculate Column position
task get_column_position;
output [8:0] column_position;
input [1:0] Y_adr;
input [5:0] bit_index;
reg [4:0] blk_right;
reg [4:0] blk_left;
begin
  if ( ^scan_reg === 1'bX )
  begin
    left_col_out_range = 1'bx;
    right_col_out_range = 1'bx;
    if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m<<VIRL_MEM_ERR: INVALID RECONFIG REGISTER COLUMN>>(time %0t)", $time);
    end
  end
  if ( bit_index > 31)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      if (scan_reg[11:9] === 3'b0)
      begin
        if ({scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 5'b11111 )
        begin
          if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
          begin
           $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
          end
          right_col_out_range = 1'b1;
        end // if of {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 5'b11111
        else
        begin
          blk_right = ((bit_index - 32) * 1) + (Y_adr/4);
          if (blk_right <= {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]})
          begin
            column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
          end // if of blk_right <= {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
          else
          begin
            column_position = (Y_adr + (((bit_index * 1) + 2) * 4));
            //$display("\n%m column_position=%b,Y_adr=%b,bit_index=%b,scan_reg=%b at %0t\n\n", column_position, Y_adr, bit_index, scan_reg, $time);
          end // else of if blk_right <= {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
        end // else of if {scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 5'b11111
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR: INVALID ADDRESS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        right_col_out_range = 1'b1;
      end // else of if unused scan register bits are zero
    end // if of Scan register enable bit is 1
    else
    begin
      column_position = (Y_adr + (((bit_index * 1) + 2) * 4));
    end // else of if enable bit is 1
  end // if of bit is on right side
  else
  begin
    if (scan_reg[8] === 1'b1)
    begin
      if (scan_reg[2:0] === 3'b0)
      begin
        if ({scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 5'b11111)
        begin
          if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
          begin
          $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
          end
          left_col_out_range = 1'b1;
        end // if of {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 5'b11111
        else
        begin
          blk_left = (bit_index * 1) + (Y_adr/4);
          if (blk_left > {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]})
          begin
            column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
          end // if of blk_left > {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
          else
          begin
            column_position = (Y_adr + ((bit_index * 1) * 4));
          end // else of if blk_left > {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
        end // else of if {scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 5'b11111
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR:INVALID ADDRESS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        left_col_out_range = 1'b1;
      end // else of is unused scan register bits are zero
    end // if of enable bit is enabled
    else
    begin
      column_position = (Y_adr + (((bit_index * 1) + 1) * 4));
    end // else of if enable bit is enabled
  end // else of if bit is on left side
end
endtask
task write_mem_red ;
input [8 : 0] address;
input [63 : 0] data;
input [63 : 0] mask;
reg [6:0] X_adr;
reg [1:0] Y_adr;
reg [8:0] col_address;
reg [263:0] memrow;
reg [263:0] tmp_memrow;
begin
  X_adr = address[8:2];
  Y_adr = address[1:0];
  if (address < 512)
  begin
    tmp_memrow = mem_core_array[X_adr];
    get_column_position (col_address, Y_adr, 0);
    get_column_position (col_address, Y_adr, 63);
    if (left_col_out_range !== 1'bx && right_col_out_range !== 1'bx)
    begin
//Left
      memrow[131:0] = tmp_memrow[131:0];
      if (!left_col_out_range)
      begin
        for (bit_cnt = 0; bit_cnt < 32; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = (((memrow[col_address] & ~mask[bit_cnt])|(data[bit_cnt] & mask[bit_cnt])) ^ (mask[bit_cnt] ^ mask[bit_cnt])); 
        end
      end
      else if (left_col_out_range)
      begin
        memrow[131:0] = {132{1'bx}};
      end
//Right
      memrow[263:132] = tmp_memrow[263:132];
      if (!right_col_out_range)
      begin
        for (bit_cnt = 32; bit_cnt < 64; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = (((memrow[col_address] & ~mask[bit_cnt])|(data[bit_cnt] & mask[bit_cnt])) ^ (mask[bit_cnt] ^ mask[bit_cnt])); 
        end
      end
      else if (right_col_out_range)
      begin
        memrow[263:132] = {132{1'bx}};
      end
    end
    else
    begin
      corrupt_all_loc(`True);
      memrow = 264'bX;
    end
    mem_core_array[X_adr] = memrow;
    corrupt_red(address);
  end // end of if address with in range
end
endtask

// Corrupt Redundant/Unused columns
task corrupt_red;
input [8 : 0] address;
reg[8:0] column_to_corrupt;
reg[263:0] memrow;
reg[5:0] bit_index;
reg [6:0] X_adr;
reg [1:0] Y_adr;
reg [4:0] faulty_blk_right;
reg [4:0] faulty_blk_left;
integer j;
begin
  X_adr = address[8:2];
  Y_adr = address[1:0];
  memrow = mem_core_array[X_adr];
  faulty_blk_right =  ({scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]});
  faulty_blk_left  =  ({scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]});
  if (right_col_out_range === 1'b0)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_right+34)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of enable bit is 1
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(33)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if enable bit is 1
  end
  else
  begin
    memrow[263:132] = {132{1'bx}};
  end
  if (left_col_out_range === 1'b0)
  begin
    if ( scan_reg[8] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_left+1)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of enable bit is 1 
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = j;
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if enable bit is 1 
  end
  else
  begin
    memrow[131:0] = {132{1'bx}};
  end
  mem_core_array[X_adr] = memrow;
end
endtask


//Calculate Row Address
task get_X_Y_adr;
output [6:0] X_adr;
output [1:0] Y_adr;
input [8:0] Adr;
begin
  X_adr = Adr[8:2];
  Y_adr = Adr[1:0];
end
endtask

task read_mem_red ;
output [63 : 0] memdata;
input [8 : 0] address;
reg [6:0] X_adr;
reg [1:0] Y_adr;
reg [8:0] col_address;
reg [263:0] memrow;
begin
  X_adr = address[8:2];
  Y_adr = address[1:0];
   if (faultinj_en == 1)
     memrow = mem_core_array[X_adr]^mem_fault_array_XOR[X_adr];
   else
   begin
     memrow = mem_core_array[X_adr] & mem_fault_array_sa0[X_adr];
     memrow = memrow | mem_fault_array_sa1[X_adr];
   end
   get_column_position (col_address, Y_adr, 0);
   if ( left_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 0; bit_cnt < 32; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[31:0] = {32{1'bx}};
   end
   get_column_position (col_address, Y_adr, 32);
   if ( right_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 32; bit_cnt < 64; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[63:32] = {32{1'bx}};
   end
end
endtask


task corrupt_q;
begin
  Q_local_tmp = 64'bx;
end
endtask

task corrupt_qnb;
begin
  Q_local_tmp <= 64'bx;
end
endtask

// Corrupt Current Location
task corrupt_cur_loc;
input[8:0] Adr_to_corrupt;
begin
  if (is_adr_Valid(Adr_to_corrupt))
  begin
    if ( WEM_violation == `True )
    begin
      write_mem_red(Adr_to_corrupt,DataX,64'b1111111111111111111111111111111111111111111111111111111111111111);
    end
    else
    begin
      write_mem_red(Adr_to_corrupt,DataX,WEMlatched);
    end
  end // if of is_adr_Valid(Adr_to_corrupt)
  else
  begin
    corrupt_all_loc(`True);
  end // else of if is_adr_Valid(Adr_to_corrupt)
end
endtask

// Corrupt Entire memory; Do not corrupt entire memory if address is out of range
// during Write; For all other cases, if flag_range_ok is true, corrupt entire memory
task corrupt_all_loc;
input flag_range_ok;
integer row_index;
begin
  if( flag_range_ok == `True)
  begin
    for( row_index = 0; row_index < 128 ; row_index = row_index + 1)
    begin
      mem_core_array[row_index] = 264'bx;
    end // end of for row_index loop
  end // if of flag_range_ok is true
end
endtask


// Load memory with Data from a file(PreloadFilename)
task load_mem;
reg[ 63:0] mem_array [0:511];
reg[ 63:0] mem_word;
reg[6:0] X_adr;
reg[1:0] Y_adr;
reg[263:0] mem_row;
integer adr_cnt;
integer start_adr_cnt;
integer num_adr_cnt;
integer i, status, status1;
reg [63:0] init_value;
begin
  if ($test$plusargs("init_mem_data"))
  begin
    status = $value$plusargs("init_mem_data=%d",init_value);
    if ($value$plusargs("init_mem_start_adr=%d",start_adr_cnt))
    begin
      num_adr_cnt = 1;
      if (init_value === 64'b1) begin
        init_value = {64{1'b1}};
      end
      status1 = $value$plusargs("num_of_locations=%d",num_adr_cnt);
      if (num_adr_cnt < 1) begin
        $display("<<VIRL_MEM_WARNING>> \"num_of_locations=%d\" is wrong, setting it to 1 instance=%m ",num_adr_cnt);
        num_adr_cnt = 1;
      end
      if ((start_adr_cnt + num_adr_cnt -1) > 511) begin
        $display("<<VIRL_MEM_WARNING>> \"init_mem_start_adr=%d + num_of_locations=%d\" exceed maximum address (NW-1)=511 instance=%m ",start_adr_cnt,num_adr_cnt);
      end
      if (^init_value === 1'bX)
      begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = adr_cnt;
        end
      end
      else begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = init_value;
        end
      end
    end
    else begin
      if (init_value === 64'b0 || init_value === 64'b1)
      begin
        for( adr_cnt = 0; adr_cnt < 512 ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = {64{init_value[0]}};
        end
      end
      else
      begin
        if (^init_value !== 1'bX)
        begin
          for( adr_cnt = 0; adr_cnt < 512 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = init_value;
          end
        end
        else
        begin
          i = 0;
          for( adr_cnt = 0; adr_cnt < 512 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = i;
            i = i + 1;
            if (i > 64'b1111111111111111111111111111111111111111111111111111111111111111) i = 0;
          end
        end
      end
    end
  end
  else
  begin
    $readmemh(PreloadFilename, mem_array);
  end
  for( adr_cnt = 0; adr_cnt < 512 ; adr_cnt = adr_cnt + 1)
  begin
    mem_word = mem_array[adr_cnt];
    get_X_Y_adr(X_adr, Y_adr, adr_cnt);
    mem_row = mem_core_array[X_adr];
    write_mem_red(adr_cnt,mem_word,64'b1111111111111111111111111111111111111111111111111111111111111111);
    if (!mes_all_valid )
    begin
      mes_all_valid = 1'b1;
    end // if of mes_all_valid is not true
  end // end of for adr_cnt loop
end
endtask
// Store the memory contents into array mem_core_array_read (NWxNB)
task store_mem;
reg[ 63:0] mem_word;
integer adr_cnt;
begin
  for( adr_cnt = 0; adr_cnt < 512 ; adr_cnt = adr_cnt + 1)
  begin
    read_mem_red(mem_word,adr_cnt);
    mem_core_array_read[adr_cnt] = mem_word;
  end // end of for adr_cnt loop
end
endtask

        

// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok,flaga_wem_ok} ) // only 1 and 0

    4'b1111   : ;                                               // everything ok!!!
    4'b1011,
    4'b1001   : if (WEMlatched !== {wembits{1'b0}})
                  corrupt_cur_loc(ADRlatched);        // WE is unstable
    4'b1010,
    4'b1000   : corrupt_cur_loc(ADRlatched);         // WE is unstable
    4'b1101   : if (WElatched === 1'b1 && WEMlatched !== {wembits{1'b0}})
                  corrupt_cur_loc(ADRlatched);        // Data is unstable
    4'b0001,
    4'b0011,
    4'b0000,
    4'b0010   : corrupt_all_loc(flaga_range_ok);           // ADR and WE unstable
    4'b0100,
    4'b0110   : corrupt_all_loc(flaga_range_ok); 
    4'b0101,
    4'b0111   :  corrupt_all_loc(flaga_range_ok);   // ADR unstable, WE stable
    4'b1100,
    4'b1110   : if (WElatched !== 1'b0)
                  corrupt_cur_loc(ADRlatched);        // WEM is unstable
  endcase
    flaga_adr_ok = `True;
    flaga_we_ok  = `True;
    flaga_wem_ok  = `True;
    flaga_d_ok  = `True;
 end
endtask // end of task checkSanityOnAport

// PORT A FUNCTIONALITY (Handle violation behavior)

reg INTERNAL_RESET; // For Internally resetting the memory(negedge of rscrst)

initial
begin : reinit_uut_blk
  left_col_out_range = 1'b0;
  right_col_out_range = 1'b0;
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_wem_ok   = `True;
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
  diff_me_tch = 1'b0;
  diff_me_tcc = 1'b0;
  flaga_viol = `False;
  flaga_clk_valid = `True;
  flaga_shift_ok = `True;
  flaga_clear_scan_reg = `False;
  `ifdef VIRAGE_IGNORE_RESET
  #1 INTERNAL_RESET = 1'b1;
  `endif // endif of VIRAGE_IGNORE_RESET
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_dont_reinit *)
`endif
initial 
begin
  Q_local_tmp <= 64'bx;
  RST_tri = 1'b0;
  RST_check = 1'b0;
  mes_all_valid = 1'b0;
   disp_RSCLK_msg = 1'b1;
   disp_LS_msg = 1'b1;
end // end of initial block

// For Zerohold of ADR pin
always @( negedge CLK or ADR )
begin : blk_addrhold_0
if ( CLK == 1'b0 )
  begin
    ADR_old <= ADR;
  end // if of CLK = 0
end // end of always block blk_addrhold_0
// For Zerohold of D pin
always @( negedge CLK or D )
begin : blk_dihold_0
if ( CLK == 1'b0 )
  begin
    D_old <= D;
  end // if of CLK = 0
end // end of always block blk_dihold_0
// For Zerohold of WEM pin
always @( negedge CLK or WEM )
begin : blk_wemhold_0
if ( CLK == 1'b0 )
  begin
    WEM_old <= WEM;
  end // if of CLK = 0
end // end of always block blk_wemhold_0
// For Zerohold of WE pin
always @( negedge CLK or WE )
begin : blk_wehold_0
if ( CLK == 1'b0 )
  begin
    WE_old <= WE;
  end // if of CLK = 0
end // end of always block blk_wehold_0
// For Zerohold of ME pin
always @( negedge CLK or ME or LS  )
begin : blk_mehold_0
if ( CLK == 1'b0 )
  begin
    if ( (LS === 1'b1 && ME !== 1'bx))
      ME_old <= 1'b0;
    else
      ME_old <= ME;
  end // if of CLK = 0
end // end of always block blk_mehold_0
// For Zerohold of TEST_RNM pin
always @( negedge CLK or TEST_RNM )
begin : blk_test_rnmhold_0
if ( CLK == 1'b0 )
  begin
    TEST_RNM_old <= TEST_RNM;
  end // if of CLK = 0
end // end of always block blk_test_rnmhold_0
// For Zerohold of Test1 pin
always @( negedge CLK or TEST1 )
begin : blk_test1hold_0
  if ( CLK == 1'b0 )
  begin
    TEST1_old <= TEST1;
  end // if of CLK = 0
end // end of always block blk_test1hold_0


reg LS_old;
always @( negedge CLK or LS )
begin : blk_lshold_0
  if (CLK == 1'b0)
  begin
    LS_old <= LS;
  end
end // end of always block blk_lshold_0
assign WEMall = {  WEM_old };

`ifdef VIRAGE_FAST_VERILOG
`else
// PORT A WE violation
always @(notif_we)           
begin : blk_notif_we_0
  if ((RSCRST === 1'b0 ))
  begin
    if ( WE_old === 1'b0)
    begin
      flaga_viol = `True;
    end // if of WE_old = 0
    flaga_we_ok = `False;
    checkSanityOnAport;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    corrupt_qnb;
  end // if of rscrst = 0
end // end of always block blk_notif_we_0

// PORT A CLK violation
always @(notif_clk)
begin : blk_notif_clk_0
if (RSCRST === 1'b0  && (diff_me_tch === 1'b1 || ME !== 1'b0))
begin
  flaga_clk_valid = `False;
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
  checkSanityOnAport;
  flaga_read_ok = `False;     // irrespective of WE
  -> ev_read_out_a_port;
  end // if of rscrst = 0 and dftmask = 0
end // end of always block blk_notif_clk_0

// PORT A CLK violation
always @(notif_clkp)
begin : blk_notif_clkp_0
if (RSCRST === 1'b0  && (diff_me_tcc === 1'b1 || ME !== 1'b0))
begin
  flaga_clk_valid = `False;
  flaga_adr_ok = `False;
  flaga_we_ok  = `False;
  checkSanityOnAport;
  flaga_read_ok = `False;     // irrespective of WE
  -> ev_read_out_a_port;
  end // if of rscrst = 0 and dftmask = 0
end // end of always block blk_notif_clk_0

// PORT A ME violation
always @(notif_me)           
begin : blk_notif_me_0
if (RSCRST === 1'b0 )
begin
    flaga_viol = `True;
    flaga_read_ok = `False;                           
    -> ev_read_out_a_port;
    flaga_adr_ok = `False;
    checkSanityOnAport;
end // if of RSCRST = 0
end // end of always block blk_notif_me_0

// PORT A ADR violation
always @(notif_adr)     
begin : blk_notif_addr_0
if (RSCRST === 1'b0 )
begin
      flaga_viol = `True;
      flaga_read_ok = `False;                         
      -> ev_read_out_a_port;
      flaga_adr_ok = `False;
      corrupt_all_loc(`True);
end // if of RSCRST = 0 
end // end of always block blk_notif_addr_0

// PORT A D violation
genvar nk;
generate for (nk=0; nk<64; nk=nk+1)
begin : END_WEM_blk

reg [63:0]  tmp_WEM;

always @(notif_d[nk] or notif_wem[nk])
begin
if (RSCRST === 1'b0 )
begin
    tmp_WEM = 64'b0;
    tmp_WEM[nk] = 1'b1;
    write_mem_red(ADR_old,DataX,tmp_WEM);
end // if of RSCRST = 0 
end // end of always block blk_notif_di_0
end 
endgenerate

//PORT A TEST1 violation
always @(notif_test1)   
begin : blk_notif_test1_0
//  ME_chk = ME_old;
if (RSCRST === 1'b0)
begin
  if ( WElatched === 1'b0 )
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  else if ( WElatched === 1'b1 )
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end
end // if of RSCRST = 0
end // end of always block blk_notif_test1_0

// PORT A TEST_RNM violation
always @(notif_test_rnm)     
begin : blk_notif_test_rnm_0
if (RSCRST === 1'b0 )
begin
  if (WE_old === 1'b0)
  begin
    flaga_read_ok = `False;                         
    -> ev_read_out_a_port;
  end
  flaga_adr_ok = `False;
  corrupt_all_loc(`True);
end // if of RSCRST = 0 
end // end of always block blk_notif_test_rnm_0

always @(notif_ls)
begin
  corrupt_all_loc(`True);
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
end

always @(notif_bc1 or notif_bc2)
begin : blk_notif_bc1bc2_0
  if (RSCRST === 1'b0)
  begin
  flaga_we_ok  = `False;
  corrupt_all_loc(`True);
  end // if of RSCRST = 0
end  // blk_notif_bc1bc2_0

//PORT A RM violation
always @(notif_rm)       
begin : blk_notif_rm_0
if (RSCRST === 1'b0)
begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // if of RSCRST = 0
end // end of always block blk_notif_rm_0

//PORT A RME violation
always @(notif_rme)  
begin : blk_notif_rmen_0
if (RSCRST === 1'b0)
begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
    flaga_d_ok  = `False;
    checkSanityOnAport;
end // if of RSCRST = 0
end // end of always block blk_notif_rmen_0
`endif // endif of VIRAGE_FAST_VERILOG



`ifdef VIRAGE_FAST_VERILOG
`else
`endif // endif of VIRAGE_FAST_VERILOG

`ifdef VIRAGE_FAST_VERILOG
`else
always @(notif_rscrst_CLK_rise_fall_rec)
begin : rscrst_CLK_rise_fall_rec
  if (WE_old == 1'b0 && ME_old == 1'b1)
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  if (WE_old == 1'b1 && ME_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WE_old = 1
end // end of always block rscrst_CLK_rise_fall_rec 

always @(notif_rsclk_CLK_rise_rise_rec)
begin : rsclk_CLK_rise_rise_rec
  flaga_viol = `True;
  flaga_read_ok = `False;
  -> ev_read_out_a_port;
  flaga_adr_ok = `False;
  checkSanityOnAport;
end // end of always block rscrst_CLK_rise_fall_rec 

always @(notif_rscen_CLK_rise_fall_rec)
begin : rscen_CLK_rise_fall_rec
  if (WE_old == 1'b0 && ME_old == 1'b1)
  begin
    flaga_viol = `True;
    flaga_read_ok = `False;
    -> ev_read_out_a_port;
  end
  if (WE_old == 1'b1 && ME_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WE_old = 1
end // end of always block rsclk_CLK_rise_rise_rec 

always @(notif_rscrst_RSCLK_rise_fall_rec)
begin : rscrst_RSCLK_rise_fall_rec
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_rsclk_rise_fall_rec

always @(notif_rsclk or notif_rscen or notif_fiso)
begin : blk_notif_rsclk_0
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rsclk_0

always @(notif_rscrst)
begin : blk_notif_rscrst_0
  flaga_clear_scan_reg = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_0

// RSCIN violation
always @(notif_rscin)
begin : blk_notif_rscin_0
  flaga_shift_ok = `False;
  scan_reg[0] = 1'bx;
end // end of always block blk_notif_rscen_0


`endif // endif of VIRAGE_FAST_VERILOG

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCEN)
begin : blk_rscen_0
  flaga_shift_ok = `True;
  disp_RSCLK_msg = 1'b1;
end // end of always block blk_rscen_0


`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCRST or posedge INTERNAL_RESET)
begin : blk_posrscrst_0
  if ( RSCRST === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
   #0.0;
   `ifdef VIRAGE_IGNORE_RESET
   if (RSCRST === 1'b1 || INTERNAL_RESET === 1'b1)
   `else 
   if (RSCRST === 1'b1)
   `endif
   begin
    scan_reg = 18'b0;
    RSCOUT_local = scan_reg[17];
    flaga_clear_scan_reg = `True;
    RST_check = 1'b0;
    if (INTERNAL_RESET === 1'b1)
    begin
      #1 INTERNAL_RESET = 1'b0;
    end
   end
  end // else of if RSCRST = X
end // end of always block blk_posrscrst_0

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
// Functionality of RSCRST
always @(negedge RSCRST or negedge INTERNAL_RESET)
begin : blk_negrscrst_0
  #0;
  if ( RSCRST === 1'bx)
  begin
    flaga_clear_scan_reg = `False;
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
    if ( RST_check == 1'b0 && $realtime != 0)
    begin
      RST_check = 1'b1;
      RST_tri = 1'b1;
      #0;
      if ( flaga_clear_scan_reg )
      begin:clear_scan_reg
        scan_reg = 18'b0 ;
        RSCOUT_local = scan_reg[17];
      end // if of flaga_clear_scan_reg is true
      `ifdef INITIALIZE_MEM
      // to read initialization files, add to verilog model `define INITIALIZE_MEM
      // or use command line option +define+INITIALIZE_MEM
        load_mem;        // Read initial data for memory if any preload file exists.
      `endif
    end // if of RST_check = 0 and $realtime != 0
    flaga_clear_scan_reg = `False;
  end // else of if RSCRST = X
end // end of always block blk_negrscrst_0
// reset for next cycle

always @(negedge CLK)
begin : blk_intnegclock_0
  if ( CLK !== 1'bx )
  begin
    #0.001;
    WEM_violation = `False;
    flaga_range_ok  = `True;
    flaga_read_ok = `True;
    flaga_rm_ok = `True;
    flaga_clk_valid = `True;
    flaga_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
    flaga_wem_ok  = `True;
    left_col_out_range = 1'b0;
    right_col_out_range = 1'b0;
    flaga_viol    = `False;
  end // if of CLK != X
  else
  begin
    if (ME !== 1'b0)
    begin
    flaga_clk_valid = `False;
    Q_local_tmp = 64'bx;
    corrupt_all_loc(`True);
    report_unknown("CLK");
    end
  end // else of if CLK != X
end // end of always block blk_intnegclock_0

// PORT A FUNCTIONALITY 
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO)
begin : blk_fiso_0
  if (FISO === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    RSCOUT = scan_reg[17];
    report_unknown("FISO");
  end // else if of FISO = X 
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCLK)
begin : blk_negtestrsclock_0
  if (RSCLK !== 1'bx)
  begin
    flaga_shift_ok = `True;
  end
  else
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
end

integer j;
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCLK)
begin : blk_postestrsclock_0
  RSCENlatched = RSCEN;
  #0;
  if (RSCLK === 1'bx && RSCENlatched)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
  if ( RSCENlatched === 1'b1 && RSCRST === 1'b0)
  begin:do_shift
    #0;
    if ( RSCLK !== 1'bx )
    begin
      if ( flaga_shift_ok )
      begin
        scan_reg = scan_reg << 1;
        RSCOUT_local = scan_reg[17];
        scan_reg[0] = RSCIN;
        flaga_shift_ok = `False;
        if ( RSCIN === 1'bx )
        begin
          report_unknown("RSCIN");
        end // if of RSCIN = X
      end // if of flaga_shift_ok is true
    end // if of flaga_clk_valid is true 
  end // if of RSCEN = 1 and RSCRST = 0 
  else if ( RSCEN === 1'bx || RSCRST === 1'bx )
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    if ( RSCEN === 1'bx )
    begin
      report_unknown("RSCEN");
    end // if of RSCEN = X
  end // else if of RSCEN = X or RSCRST = X
end


always @(posedge CLK)
begin : blk_intposclock_0
  CLKA_T = $realtime;
  MElatched = ME_old;
  WElatched = WE_old;
  TEST1latched = TEST1_old;
  TEST_RNMlatched = TEST_RNM_old;
  ADRlatched = ADR_old;
  Dlatched = D_old;
  WEMlatched = WEM_old;
  WEMbuslatched = WEMall;
 `ifdef VIRAGE_FAST_VERILOG
   if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid && RSCEN === 1'b1 && RSCRST === 1'b0 && disp_RSCLK_msg === 1'b1)
   begin
     $display("\n%m<<VIRL_MEM_WARNING:For proper memory write/read operation ensure RSCLK is not running>>(time %0t)\n", $time);
     disp_RSCLK_msg = 1'b0;
   end
 `endif // endif of VIRAGE_FAST_VERILOG
  if ((LS_old === 1'b1 && MElatched !== 1'bx) || TEST_RNMlatched === 1'b1)
  begin
    MElatched = 1'b0;
  end
  if (LS_old === 1'bX && MElatched !== 1'b0)
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    Q_local_tmp = 64'bx;
  end
  else
  begin
    if (^(ADRlatched) === 1'bx && MElatched !== 1'b0)
    begin
      report_unknown("ADR");
      if ( WElatched === 1'b1 )
      begin
        flaga_viol = `True;
      end // if of WElatched = 1
      else
      begin
        flaga_read_ok = `False;
      end
      `ifdef virage_ignore_read_addx
      if ((WElatched === 1'b1 && WEMlatched !== 64'b0000000000000000000000000000000000000000000000000000000000000000))
      begin
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      end // if of write
      `else
        flaga_adr_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      `endif // endif of virage_ignore_read_addx is true
      -> ev_RST_out_a_port;
    end // if of (^ADRlatched) is 1'bx and MElatched != 0
    else if((ADRlatched > 9'b111111111) && (MElatched === 1'b1) && (WElatched === 1'b1) )
    begin
      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
      begin
        $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE: 0 to 511\n", $time);
      end
      flaga_range_ok = `False;
    end // if of ADRlatched out of range with MElatched = 1
    if (!flaga_clk_valid) 
    begin
      Q_local_tmp = 64'bx;
    end // if of flaga_clk_valid is NOT true
    else if ( CLK === 1'bx )
    begin
    #0.001; 
      if (diff_me_tch === 1'b1 || ME !== 1'b0)
      begin
      Q_local_tmp = 64'bx;
      corrupt_all_loc(flaga_range_ok);
      report_unknown("CLK");
      end // end of if diff_me_tch
    end // if of CLK = X
    else if ((BC1 === 1'bX || BC2 === 1'bX) && WElatched !== 1'b0)
    begin
      if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
      begin
        //$display("\n%m <<VIRL_MEM_WARNING: BC1 or BC2 is unknown>>(time %0t)\n\n", $time);
      end
    end
    else if (RSCRST === 1'b1)
    begin
      if (MElatched === 1'b1 && ((WElatched === 1'b0 || (WElatched === 1'b1 && WEMlatched === 64'b0000000000000000000000000000000000000000000000000000000000000000))))
      begin
        corrupt_q;
      end // if of MElatched = 1 and read
      if (MElatched === 1'b1 && ((WElatched === 1'b1 && WEMlatched !== 64'b0000000000000000000000000000000000000000000000000000000000000000)))
      begin
        corrupt_all_loc(flaga_range_ok);
      end // if of MElatched = 1 and write
    end
    else
    begin
      -> ev_RST_out_a_port;
    end // else of if CLK = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_0
// PORT A READ-OUT

always @(ev_read_out_a_port)
begin : blk_readout_0
  #0;                // let CLOCK and NOTIFIER module execute first
  if (^RM === 1'bx)
  begin
    flaga_rm_ok = `False;
  end // if of RM is not valid
  if (flaga_adr_ok && flaga_read_ok && flaga_rm_ok)
  begin : OUTPUT_a
    if (WElatched === 1'b0)
    begin
      if (ADRlatched <= 9'b111111111)
      begin
          
         if (RSCRST !== 1'b1)
         begin
         read_mem_red(memdata,ADRlatched);
         Q_local_tmp = memdata;
        end // if RSCRST
          Q_local_tmp = Q_local_tmp;
      end // if of ADRlatched <= 9'b111111111
    end // if of WElatched = 0
  end //if of flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  else
  begin
    if (flaga_viol)
    begin
      if ((WElatched === 1'b0 || (WElatched === 1'b1 && WEMlatched === 64'b0000000000000000000000000000000000000000000000000000000000000000)))
      begin
        corrupt_q;
        flaga_read_ok = `True;
      end  //else if read 
    end // if of flaga_viol is true
    else
    begin
      corrupt_q;
      flaga_read_ok = `True;
    end // else of if flaga_viol is true
  end // else of if flaga_adr_ok is true and flaga_read_ok is true and flaga_rm_ok is true
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
end // end of always block blk_readout_0

// Handle Read/Write
always @(ev_RST_out_a_port)
begin : blk_readwrite_0
  if ( RST_tri === 1'b0 )
  begin
    Q_local_tmp = 64'bx;
  end // if RST_tri = 0
  else 
  begin
    if (MElatched !== 1'b0 && !flaga_viol)
    begin
      if (WElatched === 1'bx)
      begin
        flaga_we_ok = `False;
        flaga_read_ok = `False;
        report_unknown("WE");
      end // if of WElatched = X
      if ((^Dlatched === 1'bx))
      begin
        if (Dlatched === 64'bx)
        begin
          flaga_d_ok  = `False;
        end
        if ((^((Dlatched^Dlatched) & WEMlatched) === 1'bX) && WElatched !== 1'b0)
        begin
          report_unknown("D");
        end
      end
          if (TEST1latched === 1'bx)
          begin
            report_unknown("TEST1");
            if ( WElatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRlatched);                             
            end // if of WElatched = 1
            else
            begin
              corrupt_q;
            end // else of if WElatched = 1
          end // if TEST1latched = X
          else if (TEST_RNMlatched === 1'bx)
          begin
            report_unknown("TEST_RNM");
            if (WElatched !== 1'b1)
            begin
              corrupt_q;
            end // if of WElatched != 1
            corrupt_all_loc(`True);
          end // else if TEST_RNMlatched = X
          else
          begin
                if (^RM === 1'bx)
                begin
                  if ( RME !== 1'bx )
                    report_unknown("RM");
                  else
                    report_unknown("RME");
                  if ( WElatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRlatched);
                  end // if of WElatched = 1
                  else
                  begin
                    corrupt_q;
                  end // else of if WElatched = 1
                end // if of RM = X 
                else
                begin
                  if (MElatched !== 1'b1)
                  begin
                    flaga_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MElatched != 1 

                  if(ADRlatched > 9'b111111111) 
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>>(time %0t)\n RANGE:0 to 511\n", $time);
                    end
                    flaga_range_ok = `False;
                    if (WElatched === 1'b0)
                    begin
                      flaga_read_ok = `False;
                    end // if of flaga_read_ok
                  end // if of ADRlatched out of range with MElatched = 1
                  if ( MElatched === 1'bx )
                  begin
                    report_unknown("ME");
                    `ifdef virage_ignore_read_addx
                    if (WElatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WElatched = 1 
                    else
                    begin
                      corrupt_q;
                    end // else of if WElatched = 1
                    `else
                    if (WElatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end // if of WElatched = 1
                    else
                    begin
                      corrupt_q;
                      corrupt_all_loc(flaga_range_ok);
                    end // else of if WElatched = 1
                    `endif
                  end // if of MElatched = X
                  else
                  begin
                    if (RSCRST !== 1'b1) 
                    begin
                      if ( ^WEMlatched === 1'bx )
                      begin
                        if ( WElatched == 1'b1 )
                        begin
                          report_unknown("WEM");
                        end // if of WElatched = 1
                      end // if of WEMlatched = X
                      if (flaga_range_ok && flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WElatched == 1'b1))
                      begin
                        
                        write_mem_red(ADRlatched,Dlatched,WEMlatched);
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnAport;
                      end // else of if write
                    end // if of RSCRST
                  if (TEST1latched === 1'b1)
                  begin
                     if (WElatched === 1'b0)
                     begin
                       flaga_read_ok = `False;
                       -> ev_read_out_a_port;
                       @(negedge CLK);
                     end
                     if (TEST_RNM === 1'b0)
                     -> ev_read_out_a_port;
                  end // if of TEST1latched = 1
                  else 
                  begin
                    -> ev_read_out_a_port;
                  end // else of if TEST1latched = 1
                  end // else of if MElatched = X
                end // else of if RM = X
          end // else of if TEST1latched = X
    end // if of MElatched != 0 & flaga_viol = 0
  end // else of if RST_tri = 0
end // end of always block blk_readwrite_0




assign Q_temp = Q_local_tmp;

// Final Output Update 

always @( Q_temp )
begin : blk_output_0
  if ( RST_check == 1'b1 )
  begin
    `ifdef VIRAGE_FAST_VERILOG
    #(O_delay) Q <= Q_temp;
    `else
    Q <= 64'bx;
    #0.001;
    Q <= Q_temp;
    `endif // endif of VIRAGE_FAST_VERILOG
  end
  else
    Q <= 64'bx;
end // end of always block blk_output_0

assign RSCOUT_tmp = RSCOUT_local;

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @ (RSCOUT_tmp)
begin: blk_RSCOUT
  RSCOUT <= RSCOUT_tmp;
end


// Display the warning when TEST1 is 1.
always @ (TEST1)
begin : blk_test1_0
  if (CLK === 1'b1 && MElatched === 1'b1)
  begin
    corrupt_q;
    flaga_read_ok = `False;
  end
  if ( TEST1 == 1'b1 && (LS === 1'b0))
  begin
    if( (MES_CNTRL =="ON" || MES_CNTRL =="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING: Tcc value in the RAM model is for TEST1=1'b0,but input value is TEST1=1'b1>>(time %0t)\n\n", $time);
    end
  end // if TEST1 = 1 
end // end of always block blk_test1_0
always @ (TEST_RNM)
begin : blk_test_rnm_0
  if (CLK === 1'b1 && ME_old === 1'b1 && TEST1latched === 1'b1)
  begin
    if (WElatched === 1'b0)
    begin
      flaga_read_ok = `False;
      corrupt_q;
    end
    if (WElatched === 1'b1)
    begin
      flaga_d_ok = `False;
      checkSanityOnAport;
    end
  end
end // end of always block blk_test_rnm_0


endmodule
