//==================================================================================//
// Author: GWX Technology
// Attribution: Verilog-HDL
// Birthday: Sun Nov 12 15:24:08 CST 2023
// Organization: GWX Technology
// Copyright: GWX Technology Â©2023 GWX Technology Inc. All rights reserved.
//----------------------------------------------------------------------------------//
// Description:
// All the data in the file was generated by GWX Technology. This information was
// prepared only for EDA tools training. GWX Technology does not guarantee the
// accuracy or completeness of the information contained herein. GWX Technology
// shall not be liable for any loss or damage of any kind arising from the use of
// this document or the information contained herein.
//----------------------------------------------------------------------------------//
// Version: 0.9.0.0 Alpha
//==================================================================================//

//   --------------------------------------------------------------     
//                       Template Revision : 5.1.0                      
//   --------------------------------------------------------------     
//    * Synchronous, Pseudo 2-Port Ultra High Density Register File * 
//                    * Verilog Behavioral/RTL Model *                
//                THIS IS A SYNCHRONOUS 2-PORT MEMORY MODEL           
//                                                                    
//   Memory Name:RF_2PUHD_256x144                                     
//   Memory Size:256 words x 144 bits                                 
//                                                                    
//                               PORT NAME                            
//                               ---------                            
//               Output Ports                                         
//                                   RSCOUT                           
//                                   QB[143:0]                        
//               Input Ports:                                         
//                                   ADRA[7:0]                        
//                                   DA[143:0]                        
//                                   WEA                              
//                                   MEA                              
//                                   CLK                              
//                                   RSCIN                            
//                                   RSCEN                            
//                                   RSCRST                           
//                                   RSCLK                            
//                                   FISO                             
//                                   RME                              
//                                   RM[3:0]                          
//                                   TEST_RNM                         
//                                   LS                               
//                                   BC1                              
//                                   BC2                              
//                                   ADRB[7:0]                        
//                                   MEB                              
//                                   TEST1                            
//                                   TESTRWM                          
// -------------------------------------------------------------------- 
// -------------------------------------------------------------------- 
// This instance is generated with Periphery_Vt = LOW option.         
// -------------------------------------------------------------------- 

`resetall 
`timescale 1 ns / 1 ps 
`celldefine 
`ifdef verifault // for fault simulation purpose 
`suppress_faults 
`enable_portfaults 
`endif 

`define True    1'b1
`define False   1'b0

module RF_2PUHD_256x144 ( RSCOUT, QB, ADRA, DA, WEA, MEA, CLK, RSCIN, RSCEN, RSCRST, RSCLK, FISO, RME, RM, TEST_RNM, LS, BC1, BC2, ADRB, MEB, TEST1, TESTRWM);

// Input/Output Ports Declaration
output RSCOUT;
output  [143:0] QB;
input  [7:0] ADRA;
input  [143:0] DA;
input WEA;
input MEA;
input CLK;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input RME;
input  [3:0] RM;
input TEST_RNM;
input LS;
input BC1;
input BC2;
input  [7:0] ADRB;
input MEB;
input TEST1;
input TESTRWM;


// Local registers, wires, etc
parameter PreloadFilename = "init.file";
`ifdef MEM_CHECK_OFF
parameter MES_CNTRL = "OFF";
`else
parameter MES_CNTRL = "ON";
`endif
parameter MemFault_Inj = 0;

`ifndef MES_CNTRL_DEL_BEGIN
  `define MES_CNTRL_DEL_BEGIN 0
`endif

`ifndef MES_CNTRL_DEL_END
  `define MES_CNTRL_DEL_END 0
`endif
parameter MesCntrl_Begin = `MES_CNTRL_DEL_BEGIN;
parameter MesCntrl_End = `MES_CNTRL_DEL_END;


`ifdef VIRAGE_FAST_VERILOG
`else
// Notifiers Declaration
reg notif_adra;
wire [143:0] notif_da;
reg notif_da_143, notif_da_142, notif_da_141, notif_da_140, notif_da_139, notif_da_138, notif_da_137, notif_da_136, notif_da_135, notif_da_134, notif_da_133, notif_da_132, notif_da_131, notif_da_130, notif_da_129, notif_da_128, notif_da_127, notif_da_126, notif_da_125, notif_da_124, notif_da_123, notif_da_122, notif_da_121, notif_da_120, notif_da_119, notif_da_118, notif_da_117, notif_da_116, notif_da_115, notif_da_114, notif_da_113, notif_da_112, notif_da_111, notif_da_110, notif_da_109, notif_da_108, notif_da_107, notif_da_106, notif_da_105, notif_da_104, notif_da_103, notif_da_102, notif_da_101, notif_da_100, notif_da_99, notif_da_98, notif_da_97, notif_da_96, notif_da_95, notif_da_94, notif_da_93, notif_da_92, notif_da_91, notif_da_90, notif_da_89, notif_da_88, notif_da_87, notif_da_86, notif_da_85, notif_da_84, notif_da_83, notif_da_82, notif_da_81, notif_da_80, notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, notif_da_69, 
notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0;
reg notif_wea;
reg notif_mea;
reg notif_clk;
reg notif_clkp;
reg notif_rscin;
reg notif_rscen;
reg notif_rscen_CLK_rise_fall_rec;
reg notif_rscrst;
reg notif_rscrst_RSCLK_rise_fall_rec;
reg notif_rscrst_CLK_rise_fall_rec;
reg notif_rsclk;
reg notif_rsclk_CLK_rise_rise_rec;
reg notif_fiso;
reg notif_rme;
reg notif_rm;
reg notif_test_rnm;
reg notif_ls;
reg notif_bc1;
reg notif_bc2;
reg notif_adrb;
reg notif_meb;
reg notif_test1;
reg notif_testrwm;
`endif


`ifdef VIRAGE_FAST_VERILOG
wire RSCOUT_buf;
assign  RSCOUT = RSCOUT_buf;
wire [143:0] QB_buf;
assign QB[0] = QB_buf[0];
assign QB[1] = QB_buf[1];
assign QB[2] = QB_buf[2];
assign QB[3] = QB_buf[3];
assign QB[4] = QB_buf[4];
assign QB[5] = QB_buf[5];
assign QB[6] = QB_buf[6];
assign QB[7] = QB_buf[7];
assign QB[8] = QB_buf[8];
assign QB[9] = QB_buf[9];
assign QB[10] = QB_buf[10];
assign QB[11] = QB_buf[11];
assign QB[12] = QB_buf[12];
assign QB[13] = QB_buf[13];
assign QB[14] = QB_buf[14];
assign QB[15] = QB_buf[15];
assign QB[16] = QB_buf[16];
assign QB[17] = QB_buf[17];
assign QB[18] = QB_buf[18];
assign QB[19] = QB_buf[19];
assign QB[20] = QB_buf[20];
assign QB[21] = QB_buf[21];
assign QB[22] = QB_buf[22];
assign QB[23] = QB_buf[23];
assign QB[24] = QB_buf[24];
assign QB[25] = QB_buf[25];
assign QB[26] = QB_buf[26];
assign QB[27] = QB_buf[27];
assign QB[28] = QB_buf[28];
assign QB[29] = QB_buf[29];
assign QB[30] = QB_buf[30];
assign QB[31] = QB_buf[31];
assign QB[32] = QB_buf[32];
assign QB[33] = QB_buf[33];
assign QB[34] = QB_buf[34];
assign QB[35] = QB_buf[35];
assign QB[36] = QB_buf[36];
assign QB[37] = QB_buf[37];
assign QB[38] = QB_buf[38];
assign QB[39] = QB_buf[39];
assign QB[40] = QB_buf[40];
assign QB[41] = QB_buf[41];
assign QB[42] = QB_buf[42];
assign QB[43] = QB_buf[43];
assign QB[44] = QB_buf[44];
assign QB[45] = QB_buf[45];
assign QB[46] = QB_buf[46];
assign QB[47] = QB_buf[47];
assign QB[48] = QB_buf[48];
assign QB[49] = QB_buf[49];
assign QB[50] = QB_buf[50];
assign QB[51] = QB_buf[51];
assign QB[52] = QB_buf[52];
assign QB[53] = QB_buf[53];
assign QB[54] = QB_buf[54];
assign QB[55] = QB_buf[55];
assign QB[56] = QB_buf[56];
assign QB[57] = QB_buf[57];
assign QB[58] = QB_buf[58];
assign QB[59] = QB_buf[59];
assign QB[60] = QB_buf[60];
assign QB[61] = QB_buf[61];
assign QB[62] = QB_buf[62];
assign QB[63] = QB_buf[63];
assign QB[64] = QB_buf[64];
assign QB[65] = QB_buf[65];
assign QB[66] = QB_buf[66];
assign QB[67] = QB_buf[67];
assign QB[68] = QB_buf[68];
assign QB[69] = QB_buf[69];
assign QB[70] = QB_buf[70];
assign QB[71] = QB_buf[71];
assign QB[72] = QB_buf[72];
assign QB[73] = QB_buf[73];
assign QB[74] = QB_buf[74];
assign QB[75] = QB_buf[75];
assign QB[76] = QB_buf[76];
assign QB[77] = QB_buf[77];
assign QB[78] = QB_buf[78];
assign QB[79] = QB_buf[79];
assign QB[80] = QB_buf[80];
assign QB[81] = QB_buf[81];
assign QB[82] = QB_buf[82];
assign QB[83] = QB_buf[83];
assign QB[84] = QB_buf[84];
assign QB[85] = QB_buf[85];
assign QB[86] = QB_buf[86];
assign QB[87] = QB_buf[87];
assign QB[88] = QB_buf[88];
assign QB[89] = QB_buf[89];
assign QB[90] = QB_buf[90];
assign QB[91] = QB_buf[91];
assign QB[92] = QB_buf[92];
assign QB[93] = QB_buf[93];
assign QB[94] = QB_buf[94];
assign QB[95] = QB_buf[95];
assign QB[96] = QB_buf[96];
assign QB[97] = QB_buf[97];
assign QB[98] = QB_buf[98];
assign QB[99] = QB_buf[99];
assign QB[100] = QB_buf[100];
assign QB[101] = QB_buf[101];
assign QB[102] = QB_buf[102];
assign QB[103] = QB_buf[103];
assign QB[104] = QB_buf[104];
assign QB[105] = QB_buf[105];
assign QB[106] = QB_buf[106];
assign QB[107] = QB_buf[107];
assign QB[108] = QB_buf[108];
assign QB[109] = QB_buf[109];
assign QB[110] = QB_buf[110];
assign QB[111] = QB_buf[111];
assign QB[112] = QB_buf[112];
assign QB[113] = QB_buf[113];
assign QB[114] = QB_buf[114];
assign QB[115] = QB_buf[115];
assign QB[116] = QB_buf[116];
assign QB[117] = QB_buf[117];
assign QB[118] = QB_buf[118];
assign QB[119] = QB_buf[119];
assign QB[120] = QB_buf[120];
assign QB[121] = QB_buf[121];
assign QB[122] = QB_buf[122];
assign QB[123] = QB_buf[123];
assign QB[124] = QB_buf[124];
assign QB[125] = QB_buf[125];
assign QB[126] = QB_buf[126];
assign QB[127] = QB_buf[127];
assign QB[128] = QB_buf[128];
assign QB[129] = QB_buf[129];
assign QB[130] = QB_buf[130];
assign QB[131] = QB_buf[131];
assign QB[132] = QB_buf[132];
assign QB[133] = QB_buf[133];
assign QB[134] = QB_buf[134];
assign QB[135] = QB_buf[135];
assign QB[136] = QB_buf[136];
assign QB[137] = QB_buf[137];
assign QB[138] = QB_buf[138];
assign QB[139] = QB_buf[139];
assign QB[140] = QB_buf[140];
assign QB[141] = QB_buf[141];
assign QB[142] = QB_buf[142];
assign QB[143] = QB_buf[143];
wire [7:0] ADRA_buf;
assign  ADRA_buf[0] = (ADRA[0] === 1'bZ) ? 1'bX : ( ADRA[0]);
assign  ADRA_buf[1] = (ADRA[1] === 1'bZ) ? 1'bX : ( ADRA[1]);
assign  ADRA_buf[2] = (ADRA[2] === 1'bZ) ? 1'bX : ( ADRA[2]);
assign  ADRA_buf[3] = (ADRA[3] === 1'bZ) ? 1'bX : ( ADRA[3]);
assign  ADRA_buf[4] = (ADRA[4] === 1'bZ) ? 1'bX : ( ADRA[4]);
assign  ADRA_buf[5] = (ADRA[5] === 1'bZ) ? 1'bX : ( ADRA[5]);
assign  ADRA_buf[6] = (ADRA[6] === 1'bZ) ? 1'bX : ( ADRA[6]);
assign  ADRA_buf[7] = (ADRA[7] === 1'bZ) ? 1'bX : ( ADRA[7]);
wire [143:0] DA_buf;
assign  DA_buf[0] = (DA[0] === 1'bZ) ? 1'bX : ( DA[0]);
assign  DA_buf[1] = (DA[1] === 1'bZ) ? 1'bX : ( DA[1]);
assign  DA_buf[2] = (DA[2] === 1'bZ) ? 1'bX : ( DA[2]);
assign  DA_buf[3] = (DA[3] === 1'bZ) ? 1'bX : ( DA[3]);
assign  DA_buf[4] = (DA[4] === 1'bZ) ? 1'bX : ( DA[4]);
assign  DA_buf[5] = (DA[5] === 1'bZ) ? 1'bX : ( DA[5]);
assign  DA_buf[6] = (DA[6] === 1'bZ) ? 1'bX : ( DA[6]);
assign  DA_buf[7] = (DA[7] === 1'bZ) ? 1'bX : ( DA[7]);
assign  DA_buf[8] = (DA[8] === 1'bZ) ? 1'bX : ( DA[8]);
assign  DA_buf[9] = (DA[9] === 1'bZ) ? 1'bX : ( DA[9]);
assign  DA_buf[10] = (DA[10] === 1'bZ) ? 1'bX : ( DA[10]);
assign  DA_buf[11] = (DA[11] === 1'bZ) ? 1'bX : ( DA[11]);
assign  DA_buf[12] = (DA[12] === 1'bZ) ? 1'bX : ( DA[12]);
assign  DA_buf[13] = (DA[13] === 1'bZ) ? 1'bX : ( DA[13]);
assign  DA_buf[14] = (DA[14] === 1'bZ) ? 1'bX : ( DA[14]);
assign  DA_buf[15] = (DA[15] === 1'bZ) ? 1'bX : ( DA[15]);
assign  DA_buf[16] = (DA[16] === 1'bZ) ? 1'bX : ( DA[16]);
assign  DA_buf[17] = (DA[17] === 1'bZ) ? 1'bX : ( DA[17]);
assign  DA_buf[18] = (DA[18] === 1'bZ) ? 1'bX : ( DA[18]);
assign  DA_buf[19] = (DA[19] === 1'bZ) ? 1'bX : ( DA[19]);
assign  DA_buf[20] = (DA[20] === 1'bZ) ? 1'bX : ( DA[20]);
assign  DA_buf[21] = (DA[21] === 1'bZ) ? 1'bX : ( DA[21]);
assign  DA_buf[22] = (DA[22] === 1'bZ) ? 1'bX : ( DA[22]);
assign  DA_buf[23] = (DA[23] === 1'bZ) ? 1'bX : ( DA[23]);
assign  DA_buf[24] = (DA[24] === 1'bZ) ? 1'bX : ( DA[24]);
assign  DA_buf[25] = (DA[25] === 1'bZ) ? 1'bX : ( DA[25]);
assign  DA_buf[26] = (DA[26] === 1'bZ) ? 1'bX : ( DA[26]);
assign  DA_buf[27] = (DA[27] === 1'bZ) ? 1'bX : ( DA[27]);
assign  DA_buf[28] = (DA[28] === 1'bZ) ? 1'bX : ( DA[28]);
assign  DA_buf[29] = (DA[29] === 1'bZ) ? 1'bX : ( DA[29]);
assign  DA_buf[30] = (DA[30] === 1'bZ) ? 1'bX : ( DA[30]);
assign  DA_buf[31] = (DA[31] === 1'bZ) ? 1'bX : ( DA[31]);
assign  DA_buf[32] = (DA[32] === 1'bZ) ? 1'bX : ( DA[32]);
assign  DA_buf[33] = (DA[33] === 1'bZ) ? 1'bX : ( DA[33]);
assign  DA_buf[34] = (DA[34] === 1'bZ) ? 1'bX : ( DA[34]);
assign  DA_buf[35] = (DA[35] === 1'bZ) ? 1'bX : ( DA[35]);
assign  DA_buf[36] = (DA[36] === 1'bZ) ? 1'bX : ( DA[36]);
assign  DA_buf[37] = (DA[37] === 1'bZ) ? 1'bX : ( DA[37]);
assign  DA_buf[38] = (DA[38] === 1'bZ) ? 1'bX : ( DA[38]);
assign  DA_buf[39] = (DA[39] === 1'bZ) ? 1'bX : ( DA[39]);
assign  DA_buf[40] = (DA[40] === 1'bZ) ? 1'bX : ( DA[40]);
assign  DA_buf[41] = (DA[41] === 1'bZ) ? 1'bX : ( DA[41]);
assign  DA_buf[42] = (DA[42] === 1'bZ) ? 1'bX : ( DA[42]);
assign  DA_buf[43] = (DA[43] === 1'bZ) ? 1'bX : ( DA[43]);
assign  DA_buf[44] = (DA[44] === 1'bZ) ? 1'bX : ( DA[44]);
assign  DA_buf[45] = (DA[45] === 1'bZ) ? 1'bX : ( DA[45]);
assign  DA_buf[46] = (DA[46] === 1'bZ) ? 1'bX : ( DA[46]);
assign  DA_buf[47] = (DA[47] === 1'bZ) ? 1'bX : ( DA[47]);
assign  DA_buf[48] = (DA[48] === 1'bZ) ? 1'bX : ( DA[48]);
assign  DA_buf[49] = (DA[49] === 1'bZ) ? 1'bX : ( DA[49]);
assign  DA_buf[50] = (DA[50] === 1'bZ) ? 1'bX : ( DA[50]);
assign  DA_buf[51] = (DA[51] === 1'bZ) ? 1'bX : ( DA[51]);
assign  DA_buf[52] = (DA[52] === 1'bZ) ? 1'bX : ( DA[52]);
assign  DA_buf[53] = (DA[53] === 1'bZ) ? 1'bX : ( DA[53]);
assign  DA_buf[54] = (DA[54] === 1'bZ) ? 1'bX : ( DA[54]);
assign  DA_buf[55] = (DA[55] === 1'bZ) ? 1'bX : ( DA[55]);
assign  DA_buf[56] = (DA[56] === 1'bZ) ? 1'bX : ( DA[56]);
assign  DA_buf[57] = (DA[57] === 1'bZ) ? 1'bX : ( DA[57]);
assign  DA_buf[58] = (DA[58] === 1'bZ) ? 1'bX : ( DA[58]);
assign  DA_buf[59] = (DA[59] === 1'bZ) ? 1'bX : ( DA[59]);
assign  DA_buf[60] = (DA[60] === 1'bZ) ? 1'bX : ( DA[60]);
assign  DA_buf[61] = (DA[61] === 1'bZ) ? 1'bX : ( DA[61]);
assign  DA_buf[62] = (DA[62] === 1'bZ) ? 1'bX : ( DA[62]);
assign  DA_buf[63] = (DA[63] === 1'bZ) ? 1'bX : ( DA[63]);
assign  DA_buf[64] = (DA[64] === 1'bZ) ? 1'bX : ( DA[64]);
assign  DA_buf[65] = (DA[65] === 1'bZ) ? 1'bX : ( DA[65]);
assign  DA_buf[66] = (DA[66] === 1'bZ) ? 1'bX : ( DA[66]);
assign  DA_buf[67] = (DA[67] === 1'bZ) ? 1'bX : ( DA[67]);
assign  DA_buf[68] = (DA[68] === 1'bZ) ? 1'bX : ( DA[68]);
assign  DA_buf[69] = (DA[69] === 1'bZ) ? 1'bX : ( DA[69]);
assign  DA_buf[70] = (DA[70] === 1'bZ) ? 1'bX : ( DA[70]);
assign  DA_buf[71] = (DA[71] === 1'bZ) ? 1'bX : ( DA[71]);
assign  DA_buf[72] = (DA[72] === 1'bZ) ? 1'bX : ( DA[72]);
assign  DA_buf[73] = (DA[73] === 1'bZ) ? 1'bX : ( DA[73]);
assign  DA_buf[74] = (DA[74] === 1'bZ) ? 1'bX : ( DA[74]);
assign  DA_buf[75] = (DA[75] === 1'bZ) ? 1'bX : ( DA[75]);
assign  DA_buf[76] = (DA[76] === 1'bZ) ? 1'bX : ( DA[76]);
assign  DA_buf[77] = (DA[77] === 1'bZ) ? 1'bX : ( DA[77]);
assign  DA_buf[78] = (DA[78] === 1'bZ) ? 1'bX : ( DA[78]);
assign  DA_buf[79] = (DA[79] === 1'bZ) ? 1'bX : ( DA[79]);
assign  DA_buf[80] = (DA[80] === 1'bZ) ? 1'bX : ( DA[80]);
assign  DA_buf[81] = (DA[81] === 1'bZ) ? 1'bX : ( DA[81]);
assign  DA_buf[82] = (DA[82] === 1'bZ) ? 1'bX : ( DA[82]);
assign  DA_buf[83] = (DA[83] === 1'bZ) ? 1'bX : ( DA[83]);
assign  DA_buf[84] = (DA[84] === 1'bZ) ? 1'bX : ( DA[84]);
assign  DA_buf[85] = (DA[85] === 1'bZ) ? 1'bX : ( DA[85]);
assign  DA_buf[86] = (DA[86] === 1'bZ) ? 1'bX : ( DA[86]);
assign  DA_buf[87] = (DA[87] === 1'bZ) ? 1'bX : ( DA[87]);
assign  DA_buf[88] = (DA[88] === 1'bZ) ? 1'bX : ( DA[88]);
assign  DA_buf[89] = (DA[89] === 1'bZ) ? 1'bX : ( DA[89]);
assign  DA_buf[90] = (DA[90] === 1'bZ) ? 1'bX : ( DA[90]);
assign  DA_buf[91] = (DA[91] === 1'bZ) ? 1'bX : ( DA[91]);
assign  DA_buf[92] = (DA[92] === 1'bZ) ? 1'bX : ( DA[92]);
assign  DA_buf[93] = (DA[93] === 1'bZ) ? 1'bX : ( DA[93]);
assign  DA_buf[94] = (DA[94] === 1'bZ) ? 1'bX : ( DA[94]);
assign  DA_buf[95] = (DA[95] === 1'bZ) ? 1'bX : ( DA[95]);
assign  DA_buf[96] = (DA[96] === 1'bZ) ? 1'bX : ( DA[96]);
assign  DA_buf[97] = (DA[97] === 1'bZ) ? 1'bX : ( DA[97]);
assign  DA_buf[98] = (DA[98] === 1'bZ) ? 1'bX : ( DA[98]);
assign  DA_buf[99] = (DA[99] === 1'bZ) ? 1'bX : ( DA[99]);
assign  DA_buf[100] = (DA[100] === 1'bZ) ? 1'bX : ( DA[100]);
assign  DA_buf[101] = (DA[101] === 1'bZ) ? 1'bX : ( DA[101]);
assign  DA_buf[102] = (DA[102] === 1'bZ) ? 1'bX : ( DA[102]);
assign  DA_buf[103] = (DA[103] === 1'bZ) ? 1'bX : ( DA[103]);
assign  DA_buf[104] = (DA[104] === 1'bZ) ? 1'bX : ( DA[104]);
assign  DA_buf[105] = (DA[105] === 1'bZ) ? 1'bX : ( DA[105]);
assign  DA_buf[106] = (DA[106] === 1'bZ) ? 1'bX : ( DA[106]);
assign  DA_buf[107] = (DA[107] === 1'bZ) ? 1'bX : ( DA[107]);
assign  DA_buf[108] = (DA[108] === 1'bZ) ? 1'bX : ( DA[108]);
assign  DA_buf[109] = (DA[109] === 1'bZ) ? 1'bX : ( DA[109]);
assign  DA_buf[110] = (DA[110] === 1'bZ) ? 1'bX : ( DA[110]);
assign  DA_buf[111] = (DA[111] === 1'bZ) ? 1'bX : ( DA[111]);
assign  DA_buf[112] = (DA[112] === 1'bZ) ? 1'bX : ( DA[112]);
assign  DA_buf[113] = (DA[113] === 1'bZ) ? 1'bX : ( DA[113]);
assign  DA_buf[114] = (DA[114] === 1'bZ) ? 1'bX : ( DA[114]);
assign  DA_buf[115] = (DA[115] === 1'bZ) ? 1'bX : ( DA[115]);
assign  DA_buf[116] = (DA[116] === 1'bZ) ? 1'bX : ( DA[116]);
assign  DA_buf[117] = (DA[117] === 1'bZ) ? 1'bX : ( DA[117]);
assign  DA_buf[118] = (DA[118] === 1'bZ) ? 1'bX : ( DA[118]);
assign  DA_buf[119] = (DA[119] === 1'bZ) ? 1'bX : ( DA[119]);
assign  DA_buf[120] = (DA[120] === 1'bZ) ? 1'bX : ( DA[120]);
assign  DA_buf[121] = (DA[121] === 1'bZ) ? 1'bX : ( DA[121]);
assign  DA_buf[122] = (DA[122] === 1'bZ) ? 1'bX : ( DA[122]);
assign  DA_buf[123] = (DA[123] === 1'bZ) ? 1'bX : ( DA[123]);
assign  DA_buf[124] = (DA[124] === 1'bZ) ? 1'bX : ( DA[124]);
assign  DA_buf[125] = (DA[125] === 1'bZ) ? 1'bX : ( DA[125]);
assign  DA_buf[126] = (DA[126] === 1'bZ) ? 1'bX : ( DA[126]);
assign  DA_buf[127] = (DA[127] === 1'bZ) ? 1'bX : ( DA[127]);
assign  DA_buf[128] = (DA[128] === 1'bZ) ? 1'bX : ( DA[128]);
assign  DA_buf[129] = (DA[129] === 1'bZ) ? 1'bX : ( DA[129]);
assign  DA_buf[130] = (DA[130] === 1'bZ) ? 1'bX : ( DA[130]);
assign  DA_buf[131] = (DA[131] === 1'bZ) ? 1'bX : ( DA[131]);
assign  DA_buf[132] = (DA[132] === 1'bZ) ? 1'bX : ( DA[132]);
assign  DA_buf[133] = (DA[133] === 1'bZ) ? 1'bX : ( DA[133]);
assign  DA_buf[134] = (DA[134] === 1'bZ) ? 1'bX : ( DA[134]);
assign  DA_buf[135] = (DA[135] === 1'bZ) ? 1'bX : ( DA[135]);
assign  DA_buf[136] = (DA[136] === 1'bZ) ? 1'bX : ( DA[136]);
assign  DA_buf[137] = (DA[137] === 1'bZ) ? 1'bX : ( DA[137]);
assign  DA_buf[138] = (DA[138] === 1'bZ) ? 1'bX : ( DA[138]);
assign  DA_buf[139] = (DA[139] === 1'bZ) ? 1'bX : ( DA[139]);
assign  DA_buf[140] = (DA[140] === 1'bZ) ? 1'bX : ( DA[140]);
assign  DA_buf[141] = (DA[141] === 1'bZ) ? 1'bX : ( DA[141]);
assign  DA_buf[142] = (DA[142] === 1'bZ) ? 1'bX : ( DA[142]);
assign  DA_buf[143] = (DA[143] === 1'bZ) ? 1'bX : ( DA[143]);
wire WEA_buf;
assign  WEA_buf = (WEA === 1'bZ) ? 1'bX : ( WEA);
wire MEA_buf;
assign  MEA_buf = (MEA === 1'bZ) ? 1'bX : ( MEA);
wire CLK_buf;
assign  CLK_buf = (CLK === 1'bZ) ? 1'bX : ( CLK);
wire RSCIN_buf;
assign  RSCIN_buf = (RSCIN === 1'bZ) ? 1'bX : ( RSCIN);
wire RSCEN_buf;
assign  RSCEN_buf = (RSCEN === 1'bZ) ? 1'bX : ( RSCEN);
wire RSCRST_buf;
assign  RSCRST_buf = (RSCRST === 1'bZ) ? 1'bX : ( RSCRST);
wire RSCLK_buf;
assign  RSCLK_buf = (RSCLK === 1'bZ) ? 1'bX : ( RSCLK);
wire FISO_buf;
assign  FISO_buf = (FISO === 1'bZ) ? 1'bX : ( FISO);
wire RME_buf;
assign  RME_buf = (RME === 1'bZ) ? 1'bX : ( RME);
wire [2:0] RM_int;
wire [3:0] RM_buf;
assign  RM_buf[0] = (RM[0] === 1'bZ) ? 1'bX : ( RM[0]);
assign  RM_buf[1] = (RM[1] === 1'bZ) ? 1'bX : ( RM[1]);
assign  RM_buf[2] = (RM[2] === 1'bZ) ? 1'bX : ( RM[2]);
assign  RM_buf[3] = (RM[3] === 1'bZ) ? 1'bX : ( RM[3]);
wire TEST_RNM_buf;
assign  TEST_RNM_buf = (TEST_RNM === 1'bZ) ? 1'bX : ( TEST_RNM);
wire LS_buf;
assign  LS_buf = (LS === 1'bZ) ? 1'bX : ( LS);
wire BC1_buf;
assign  BC1_buf = (BC1 === 1'bZ) ? 1'bX : ( BC1);
wire BC2_buf;
assign  BC2_buf = (BC2 === 1'bZ) ? 1'bX : ( BC2);
wire [7:0] ADRB_buf;
assign  ADRB_buf[0] = (ADRB[0] === 1'bZ) ? 1'bX : ( ADRB[0]);
assign  ADRB_buf[1] = (ADRB[1] === 1'bZ) ? 1'bX : ( ADRB[1]);
assign  ADRB_buf[2] = (ADRB[2] === 1'bZ) ? 1'bX : ( ADRB[2]);
assign  ADRB_buf[3] = (ADRB[3] === 1'bZ) ? 1'bX : ( ADRB[3]);
assign  ADRB_buf[4] = (ADRB[4] === 1'bZ) ? 1'bX : ( ADRB[4]);
assign  ADRB_buf[5] = (ADRB[5] === 1'bZ) ? 1'bX : ( ADRB[5]);
assign  ADRB_buf[6] = (ADRB[6] === 1'bZ) ? 1'bX : ( ADRB[6]);
assign  ADRB_buf[7] = (ADRB[7] === 1'bZ) ? 1'bX : ( ADRB[7]);
wire MEB_buf;
assign  MEB_buf = (MEB === 1'bZ) ? 1'bX : ( MEB);
wire TEST1_buf;
assign  TEST1_buf = (TEST1 === 1'bZ) ? 1'bX : ( TEST1);
wire TESTRWM_buf;
assign  TESTRWM_buf = (TESTRWM === 1'bZ) ? 1'bX : ( TESTRWM);
`else
wire RSCOUT_buf;
buf (RSCOUT, RSCOUT_buf);
wire [143:0] QB_buf;
buf (QB[0], QB_buf[0]);
buf (QB[1], QB_buf[1]);
buf (QB[2], QB_buf[2]);
buf (QB[3], QB_buf[3]);
buf (QB[4], QB_buf[4]);
buf (QB[5], QB_buf[5]);
buf (QB[6], QB_buf[6]);
buf (QB[7], QB_buf[7]);
buf (QB[8], QB_buf[8]);
buf (QB[9], QB_buf[9]);
buf (QB[10], QB_buf[10]);
buf (QB[11], QB_buf[11]);
buf (QB[12], QB_buf[12]);
buf (QB[13], QB_buf[13]);
buf (QB[14], QB_buf[14]);
buf (QB[15], QB_buf[15]);
buf (QB[16], QB_buf[16]);
buf (QB[17], QB_buf[17]);
buf (QB[18], QB_buf[18]);
buf (QB[19], QB_buf[19]);
buf (QB[20], QB_buf[20]);
buf (QB[21], QB_buf[21]);
buf (QB[22], QB_buf[22]);
buf (QB[23], QB_buf[23]);
buf (QB[24], QB_buf[24]);
buf (QB[25], QB_buf[25]);
buf (QB[26], QB_buf[26]);
buf (QB[27], QB_buf[27]);
buf (QB[28], QB_buf[28]);
buf (QB[29], QB_buf[29]);
buf (QB[30], QB_buf[30]);
buf (QB[31], QB_buf[31]);
buf (QB[32], QB_buf[32]);
buf (QB[33], QB_buf[33]);
buf (QB[34], QB_buf[34]);
buf (QB[35], QB_buf[35]);
buf (QB[36], QB_buf[36]);
buf (QB[37], QB_buf[37]);
buf (QB[38], QB_buf[38]);
buf (QB[39], QB_buf[39]);
buf (QB[40], QB_buf[40]);
buf (QB[41], QB_buf[41]);
buf (QB[42], QB_buf[42]);
buf (QB[43], QB_buf[43]);
buf (QB[44], QB_buf[44]);
buf (QB[45], QB_buf[45]);
buf (QB[46], QB_buf[46]);
buf (QB[47], QB_buf[47]);
buf (QB[48], QB_buf[48]);
buf (QB[49], QB_buf[49]);
buf (QB[50], QB_buf[50]);
buf (QB[51], QB_buf[51]);
buf (QB[52], QB_buf[52]);
buf (QB[53], QB_buf[53]);
buf (QB[54], QB_buf[54]);
buf (QB[55], QB_buf[55]);
buf (QB[56], QB_buf[56]);
buf (QB[57], QB_buf[57]);
buf (QB[58], QB_buf[58]);
buf (QB[59], QB_buf[59]);
buf (QB[60], QB_buf[60]);
buf (QB[61], QB_buf[61]);
buf (QB[62], QB_buf[62]);
buf (QB[63], QB_buf[63]);
buf (QB[64], QB_buf[64]);
buf (QB[65], QB_buf[65]);
buf (QB[66], QB_buf[66]);
buf (QB[67], QB_buf[67]);
buf (QB[68], QB_buf[68]);
buf (QB[69], QB_buf[69]);
buf (QB[70], QB_buf[70]);
buf (QB[71], QB_buf[71]);
buf (QB[72], QB_buf[72]);
buf (QB[73], QB_buf[73]);
buf (QB[74], QB_buf[74]);
buf (QB[75], QB_buf[75]);
buf (QB[76], QB_buf[76]);
buf (QB[77], QB_buf[77]);
buf (QB[78], QB_buf[78]);
buf (QB[79], QB_buf[79]);
buf (QB[80], QB_buf[80]);
buf (QB[81], QB_buf[81]);
buf (QB[82], QB_buf[82]);
buf (QB[83], QB_buf[83]);
buf (QB[84], QB_buf[84]);
buf (QB[85], QB_buf[85]);
buf (QB[86], QB_buf[86]);
buf (QB[87], QB_buf[87]);
buf (QB[88], QB_buf[88]);
buf (QB[89], QB_buf[89]);
buf (QB[90], QB_buf[90]);
buf (QB[91], QB_buf[91]);
buf (QB[92], QB_buf[92]);
buf (QB[93], QB_buf[93]);
buf (QB[94], QB_buf[94]);
buf (QB[95], QB_buf[95]);
buf (QB[96], QB_buf[96]);
buf (QB[97], QB_buf[97]);
buf (QB[98], QB_buf[98]);
buf (QB[99], QB_buf[99]);
buf (QB[100], QB_buf[100]);
buf (QB[101], QB_buf[101]);
buf (QB[102], QB_buf[102]);
buf (QB[103], QB_buf[103]);
buf (QB[104], QB_buf[104]);
buf (QB[105], QB_buf[105]);
buf (QB[106], QB_buf[106]);
buf (QB[107], QB_buf[107]);
buf (QB[108], QB_buf[108]);
buf (QB[109], QB_buf[109]);
buf (QB[110], QB_buf[110]);
buf (QB[111], QB_buf[111]);
buf (QB[112], QB_buf[112]);
buf (QB[113], QB_buf[113]);
buf (QB[114], QB_buf[114]);
buf (QB[115], QB_buf[115]);
buf (QB[116], QB_buf[116]);
buf (QB[117], QB_buf[117]);
buf (QB[118], QB_buf[118]);
buf (QB[119], QB_buf[119]);
buf (QB[120], QB_buf[120]);
buf (QB[121], QB_buf[121]);
buf (QB[122], QB_buf[122]);
buf (QB[123], QB_buf[123]);
buf (QB[124], QB_buf[124]);
buf (QB[125], QB_buf[125]);
buf (QB[126], QB_buf[126]);
buf (QB[127], QB_buf[127]);
buf (QB[128], QB_buf[128]);
buf (QB[129], QB_buf[129]);
buf (QB[130], QB_buf[130]);
buf (QB[131], QB_buf[131]);
buf (QB[132], QB_buf[132]);
buf (QB[133], QB_buf[133]);
buf (QB[134], QB_buf[134]);
buf (QB[135], QB_buf[135]);
buf (QB[136], QB_buf[136]);
buf (QB[137], QB_buf[137]);
buf (QB[138], QB_buf[138]);
buf (QB[139], QB_buf[139]);
buf (QB[140], QB_buf[140]);
buf (QB[141], QB_buf[141]);
buf (QB[142], QB_buf[142]);
buf (QB[143], QB_buf[143]);
wire [7:0] ADRA_buf;
wire [7:0] delayed_ADRA;
buf (ADRA_buf[0], delayed_ADRA[0]);
buf (ADRA_buf[1], delayed_ADRA[1]);
buf (ADRA_buf[2], delayed_ADRA[2]);
buf (ADRA_buf[3], delayed_ADRA[3]);
buf (ADRA_buf[4], delayed_ADRA[4]);
buf (ADRA_buf[5], delayed_ADRA[5]);
buf (ADRA_buf[6], delayed_ADRA[6]);
buf (ADRA_buf[7], delayed_ADRA[7]);
wire [143:0] DA_buf;
wire [143:0] delayed_DA;
buf (DA_buf[0], delayed_DA[0]);
buf (DA_buf[1], delayed_DA[1]);
buf (DA_buf[2], delayed_DA[2]);
buf (DA_buf[3], delayed_DA[3]);
buf (DA_buf[4], delayed_DA[4]);
buf (DA_buf[5], delayed_DA[5]);
buf (DA_buf[6], delayed_DA[6]);
buf (DA_buf[7], delayed_DA[7]);
buf (DA_buf[8], delayed_DA[8]);
buf (DA_buf[9], delayed_DA[9]);
buf (DA_buf[10], delayed_DA[10]);
buf (DA_buf[11], delayed_DA[11]);
buf (DA_buf[12], delayed_DA[12]);
buf (DA_buf[13], delayed_DA[13]);
buf (DA_buf[14], delayed_DA[14]);
buf (DA_buf[15], delayed_DA[15]);
buf (DA_buf[16], delayed_DA[16]);
buf (DA_buf[17], delayed_DA[17]);
buf (DA_buf[18], delayed_DA[18]);
buf (DA_buf[19], delayed_DA[19]);
buf (DA_buf[20], delayed_DA[20]);
buf (DA_buf[21], delayed_DA[21]);
buf (DA_buf[22], delayed_DA[22]);
buf (DA_buf[23], delayed_DA[23]);
buf (DA_buf[24], delayed_DA[24]);
buf (DA_buf[25], delayed_DA[25]);
buf (DA_buf[26], delayed_DA[26]);
buf (DA_buf[27], delayed_DA[27]);
buf (DA_buf[28], delayed_DA[28]);
buf (DA_buf[29], delayed_DA[29]);
buf (DA_buf[30], delayed_DA[30]);
buf (DA_buf[31], delayed_DA[31]);
buf (DA_buf[32], delayed_DA[32]);
buf (DA_buf[33], delayed_DA[33]);
buf (DA_buf[34], delayed_DA[34]);
buf (DA_buf[35], delayed_DA[35]);
buf (DA_buf[36], delayed_DA[36]);
buf (DA_buf[37], delayed_DA[37]);
buf (DA_buf[38], delayed_DA[38]);
buf (DA_buf[39], delayed_DA[39]);
buf (DA_buf[40], delayed_DA[40]);
buf (DA_buf[41], delayed_DA[41]);
buf (DA_buf[42], delayed_DA[42]);
buf (DA_buf[43], delayed_DA[43]);
buf (DA_buf[44], delayed_DA[44]);
buf (DA_buf[45], delayed_DA[45]);
buf (DA_buf[46], delayed_DA[46]);
buf (DA_buf[47], delayed_DA[47]);
buf (DA_buf[48], delayed_DA[48]);
buf (DA_buf[49], delayed_DA[49]);
buf (DA_buf[50], delayed_DA[50]);
buf (DA_buf[51], delayed_DA[51]);
buf (DA_buf[52], delayed_DA[52]);
buf (DA_buf[53], delayed_DA[53]);
buf (DA_buf[54], delayed_DA[54]);
buf (DA_buf[55], delayed_DA[55]);
buf (DA_buf[56], delayed_DA[56]);
buf (DA_buf[57], delayed_DA[57]);
buf (DA_buf[58], delayed_DA[58]);
buf (DA_buf[59], delayed_DA[59]);
buf (DA_buf[60], delayed_DA[60]);
buf (DA_buf[61], delayed_DA[61]);
buf (DA_buf[62], delayed_DA[62]);
buf (DA_buf[63], delayed_DA[63]);
buf (DA_buf[64], delayed_DA[64]);
buf (DA_buf[65], delayed_DA[65]);
buf (DA_buf[66], delayed_DA[66]);
buf (DA_buf[67], delayed_DA[67]);
buf (DA_buf[68], delayed_DA[68]);
buf (DA_buf[69], delayed_DA[69]);
buf (DA_buf[70], delayed_DA[70]);
buf (DA_buf[71], delayed_DA[71]);
buf (DA_buf[72], delayed_DA[72]);
buf (DA_buf[73], delayed_DA[73]);
buf (DA_buf[74], delayed_DA[74]);
buf (DA_buf[75], delayed_DA[75]);
buf (DA_buf[76], delayed_DA[76]);
buf (DA_buf[77], delayed_DA[77]);
buf (DA_buf[78], delayed_DA[78]);
buf (DA_buf[79], delayed_DA[79]);
buf (DA_buf[80], delayed_DA[80]);
buf (DA_buf[81], delayed_DA[81]);
buf (DA_buf[82], delayed_DA[82]);
buf (DA_buf[83], delayed_DA[83]);
buf (DA_buf[84], delayed_DA[84]);
buf (DA_buf[85], delayed_DA[85]);
buf (DA_buf[86], delayed_DA[86]);
buf (DA_buf[87], delayed_DA[87]);
buf (DA_buf[88], delayed_DA[88]);
buf (DA_buf[89], delayed_DA[89]);
buf (DA_buf[90], delayed_DA[90]);
buf (DA_buf[91], delayed_DA[91]);
buf (DA_buf[92], delayed_DA[92]);
buf (DA_buf[93], delayed_DA[93]);
buf (DA_buf[94], delayed_DA[94]);
buf (DA_buf[95], delayed_DA[95]);
buf (DA_buf[96], delayed_DA[96]);
buf (DA_buf[97], delayed_DA[97]);
buf (DA_buf[98], delayed_DA[98]);
buf (DA_buf[99], delayed_DA[99]);
buf (DA_buf[100], delayed_DA[100]);
buf (DA_buf[101], delayed_DA[101]);
buf (DA_buf[102], delayed_DA[102]);
buf (DA_buf[103], delayed_DA[103]);
buf (DA_buf[104], delayed_DA[104]);
buf (DA_buf[105], delayed_DA[105]);
buf (DA_buf[106], delayed_DA[106]);
buf (DA_buf[107], delayed_DA[107]);
buf (DA_buf[108], delayed_DA[108]);
buf (DA_buf[109], delayed_DA[109]);
buf (DA_buf[110], delayed_DA[110]);
buf (DA_buf[111], delayed_DA[111]);
buf (DA_buf[112], delayed_DA[112]);
buf (DA_buf[113], delayed_DA[113]);
buf (DA_buf[114], delayed_DA[114]);
buf (DA_buf[115], delayed_DA[115]);
buf (DA_buf[116], delayed_DA[116]);
buf (DA_buf[117], delayed_DA[117]);
buf (DA_buf[118], delayed_DA[118]);
buf (DA_buf[119], delayed_DA[119]);
buf (DA_buf[120], delayed_DA[120]);
buf (DA_buf[121], delayed_DA[121]);
buf (DA_buf[122], delayed_DA[122]);
buf (DA_buf[123], delayed_DA[123]);
buf (DA_buf[124], delayed_DA[124]);
buf (DA_buf[125], delayed_DA[125]);
buf (DA_buf[126], delayed_DA[126]);
buf (DA_buf[127], delayed_DA[127]);
buf (DA_buf[128], delayed_DA[128]);
buf (DA_buf[129], delayed_DA[129]);
buf (DA_buf[130], delayed_DA[130]);
buf (DA_buf[131], delayed_DA[131]);
buf (DA_buf[132], delayed_DA[132]);
buf (DA_buf[133], delayed_DA[133]);
buf (DA_buf[134], delayed_DA[134]);
buf (DA_buf[135], delayed_DA[135]);
buf (DA_buf[136], delayed_DA[136]);
buf (DA_buf[137], delayed_DA[137]);
buf (DA_buf[138], delayed_DA[138]);
buf (DA_buf[139], delayed_DA[139]);
buf (DA_buf[140], delayed_DA[140]);
buf (DA_buf[141], delayed_DA[141]);
buf (DA_buf[142], delayed_DA[142]);
buf (DA_buf[143], delayed_DA[143]);
wire delayed_WEA;
buf (WEA_buf, delayed_WEA);
wire delayed_MEA;
buf (MEA_buf, delayed_MEA);
wire delayed_CLK;
buf (CLK_buf, delayed_CLK);
wire delayed_RSCIN;
buf (RSCIN_buf, delayed_RSCIN);
wire delayed_RSCEN;
buf (RSCEN_buf, delayed_RSCEN);
wire delayed_RSCRST;
buf (RSCRST_buf, delayed_RSCRST);
wire delayed_RSCLK;
buf (RSCLK_buf, delayed_RSCLK);
wire delayed_FISO;
buf (FISO_buf, delayed_FISO);
wire delayed_RME;
buf (RME_buf, delayed_RME);
wire [2:0] RM_int;
wire [3:0] RM_buf;
wire [3:0] delayed_RM;
buf (RM_buf[0], delayed_RM[0]);
buf (RM_buf[1], delayed_RM[1]);
buf (RM_buf[2], delayed_RM[2]);
buf (RM_buf[3], delayed_RM[3]);
wire delayed_TEST_RNM;
buf (TEST_RNM_buf, delayed_TEST_RNM);
wire delayed_LS;
buf (LS_buf, delayed_LS);
wire delayed_BC1;
buf (BC1_buf, delayed_BC1);
wire delayed_BC2;
buf (BC2_buf, delayed_BC2);
wire [7:0] ADRB_buf;
wire [7:0] delayed_ADRB;
buf (ADRB_buf[0], delayed_ADRB[0]);
buf (ADRB_buf[1], delayed_ADRB[1]);
buf (ADRB_buf[2], delayed_ADRB[2]);
buf (ADRB_buf[3], delayed_ADRB[3]);
buf (ADRB_buf[4], delayed_ADRB[4]);
buf (ADRB_buf[5], delayed_ADRB[5]);
buf (ADRB_buf[6], delayed_ADRB[6]);
buf (ADRB_buf[7], delayed_ADRB[7]);
wire delayed_MEB;
buf (MEB_buf, delayed_MEB);
wire delayed_TEST1;
buf (TEST1_buf, delayed_TEST1);
wire delayed_TESTRWM;
buf (TESTRWM_buf, delayed_TESTRWM);
 
 
`endif

// -------------------------------------------------------------------
// Tasks
// -------------------------------------------------------------------

`ifndef MEMFAULTINJ
task fault_inject;
input [7 : 0] address;
input [7:0] bit_pos;
input flt_type;
reg [6:0] X_adr;
reg Y_adr;
reg [8:0] col_address;
reg [295:0] memrow;
reg [17:0] temp_scan_reg;
reg dis_fault_inject;
begin
  if (address < 256)
  begin
  if (uut.faultinj_en == 0)
  begin
    X_adr = address[7:1];
    Y_adr = address[0];
    dis_fault_inject = 1'b0;
    `ifdef SNPS_FLTINJ_NO_REPAIR
      temp_scan_reg = uut.scan_reg;
      uut.scan_reg = 18'b0;
      uut.get_column_position (col_address, Y_adr, bit_pos);
      uut.scan_reg = temp_scan_reg;
    `else
      if ( ^(uut.scan_reg) === 1'bX )
      begin
        dis_fault_inject = 1'b1;
        $display("\n%m<<VIRL_MEM_ERR: INVALID RECONFIG REGISTER, Disabled The Fault Injection.>>(time %0t)", $time);
      end
      else
      begin
        uut.get_column_position (col_address, Y_adr, bit_pos);
      end
    `endif
    if (dis_fault_inject === 1'b0)
    begin
    if (flt_type == 1)
    begin
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa1[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b1;
      uut.mem_fault_array_sa0[X_adr] = memrow;
    end
    else
    begin
      memrow = uut.mem_fault_array_sa0[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa0[X_adr] = memrow;
      memrow = uut.mem_fault_array_sa1[X_adr];
      memrow[col_address] = 1'b0;
      uut.mem_fault_array_sa1[X_adr] = memrow;
    end
    end
  end
  end
  else
  begin
    $display("\n%m<<VIRL_MEM_ERR: No fault injection for address out of range.>>(time %0t)", $time);
  end
end
endtask
`endif

reg disp_LS_msgA;

reg en_msg_cntrl, mes_all_valid_old;
real msg_start_lmt, msg_end_lmt;
reg disp_LS_msgA_old;
initial
begin : reinit_msg_blk
  disp_LS_msgA_old = 1'b1;
  if (MesCntrl_Begin < 0)
    msg_start_lmt = 0;
  else
    msg_start_lmt = MesCntrl_Begin;
  if (MesCntrl_End < 0)
    msg_end_lmt = 0;
  else
    msg_end_lmt = MesCntrl_End;
  
  if (msg_end_lmt > msg_start_lmt)
  begin
    if ($realtime > 0 )
    begin
      if (msg_start_lmt > $realtime)
      begin
        en_msg_cntrl = 1'b0;
        en_msg_cntrl <= #(msg_start_lmt - $realtime) 1'b1;
      end
      if (msg_end_lmt > $realtime)
        en_msg_cntrl <= #(msg_end_lmt - $realtime) 1'b0;
      else
        en_msg_cntrl = 1'b0;
    end
    else
    begin
      mes_all_valid_old = 1'b0;
      en_msg_cntrl = 1'b0;
      en_msg_cntrl <= #msg_start_lmt 1'b1;
      en_msg_cntrl <= #msg_end_lmt 1'b0;
    end
  end
  else
  begin
    en_msg_cntrl = 1'b0;
    if ($realtime == 0)
      mes_all_valid_old = 1'b0;
  end
end

`ifdef MES_CNTRL_PIN
always @(`MES_CNTRL_PIN)
begin
  if (msg_start_lmt == 0 && msg_end_lmt == 0)
  begin
    if (`MES_CNTRL_PIN  === `MES_CNTRL_PIN_VAL)
    begin
      en_msg_cntrl = 1;
    end
    else
    begin
      en_msg_cntrl = 0;
    end
  end
end
`endif

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @( en_msg_cntrl )
begin
  if (en_msg_cntrl !== 1'b0 )
  begin
    if (!(en_msg_cntrl === 1'bx && mes_all_valid_old === 1'b1))
    mes_all_valid_old = uut.mes_all_valid;
    assign uut.mes_all_valid = 0;
    disp_LS_msgA_old = disp_LS_msgA;
    assign disp_LS_msgA = 0;
  end
  else
  begin
    deassign uut.mes_all_valid ;
    uut.mes_all_valid = mes_all_valid_old;
    deassign disp_LS_msgA;
    disp_LS_msgA = disp_LS_msgA_old;
    `ifdef SNPS_SUPPORT_UPF_SIM
    disp_LS_msgA = 1'b1;
     `endif
  end
end


wire ADRA_valid;
assign ADRA_valid =  (ADRA_buf <= 8'b11111111 )?1'b1:1'b0;
wire RSCLK_fiso_buf,RSCIN_fiso_buf,RSCEN_fiso_buf,RSCRST_fiso_buf;
reg RSCEN_fiso_pre;
assign RSCIN_fiso_buf  =  (RSCIN_buf && !FISO_buf);
assign RSCEN_fiso_buf  =  (RSCEN_buf && !FISO_buf);
assign RSCRST_fiso_buf =  (RSCRST_buf && !FISO_buf);
assign RSCLK_fiso_buf =  (RSCLK_buf && !FISO_buf);

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO_buf or negedge RSCLK_fiso_buf or RSCEN_fiso_buf)
begin : blk_rscenbuf_0
  if (FISO_buf == 1'b1)
    RSCEN_fiso_pre = 1'b0;
  else
  if ( RSCLK_fiso_buf == 1'b0)
    RSCEN_fiso_pre = RSCEN_fiso_buf;
end // end of always block blk_rscenbuf_0


real t0_pfirst, t1_pfirst, t2_pnow, t2_nnow, t3_me;
initial
begin
  t0_pfirst = 0.0;
  t1_pfirst = 0.0;
  t2_pnow = 0.0;
  t2_nnow = 0.0;
  t3_me = 0.0;
end

always @(posedge CLK_buf)
begin
  t0_pfirst = t1_pfirst;
  t1_pfirst = t2_pnow;
  t2_pnow = $realtime;
  if ((t1_pfirst < t3_me) && (t3_me < t2_pnow))
  begin   
    uut.diff_me_tch = 1'b1;
  end
  if ((t0_pfirst < t3_me) && (t3_me < t2_pnow))
  begin   
    uut.diff_me_tcc = 1'b1;
  end
    @(negedge CLK_buf)
    t2_nnow = $realtime;
    #0.001;
    uut.diff_me_tch = 1'b0;
    uut.diff_me_tcc = 1'b0;
end

always @(MEA_buf or MEB_buf)
begin
  t3_me = $realtime;
  if ((t2_pnow < t3_me) && (t2_nnow < t3_me))
  begin   
    uut.diff_me_tch = 1'b1;
  end
end
wire ADRB_valid;
assign ADRB_valid =  (ADRB_buf <= 8'b11111111 )?1'b1:1'b0;
// Setup/hold conditions for syncronous signals
reg  MEA_pre;
reg  [7 : 0] ADRA_pre;
reg  [143 : 0] DA_pre;
reg  MEB_pre;
reg  [7 : 0] ADRB_pre;
reg flag_ADRA_x;
reg  WEA_pre;

always @(MEA_buf or negedge CLK_buf) 
begin : blk_mebuf_0
  #0;
  if ( CLK_buf == 1'b0)
  begin
    MEA_pre = MEA_buf;
  end // if of CLK_buf = 0
end // end of always block blk_mebuf_0
always @(WEA_buf or negedge CLK_buf) 
begin : blk_webuf_0
  #0;
  if ( CLK_buf == 1'b0)
  begin
    WEA_pre = WEA_buf;
  end // if of CLK_buf = 0
end // end of always block blk_webuf_0


always @(ADRA_buf or negedge CLK_buf) 
begin : blk_addrbuf_0
  #0;
  if ( CLK_buf == 1'b0)
  begin
    ADRA_pre = ADRA_buf;
  end // if of CLK_buf = 0
  if ( (^ADRA_buf) === 1'bx)
  begin
    flag_ADRA_x = 1'b1;
  end 
  else
  begin
    flag_ADRA_x = 1'b0;
  end
end // end of always block blk_addrbuf_0

always @(DA_buf or negedge CLK_buf)
begin : blk_dibuf_0
  #0;
  if ( CLK_buf == 1'b0)
  begin
    DA_pre = DA_buf;
  end // if of CLK_buf = 0
end // end of always block blk_addrbuf_0

`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRA is : ENADRA
wire ENADRA;
assign ENADRA = ((MEA_pre !== 1'b0 && WEA_pre !== 1'b0  && (LS_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEA is : ENMEA
wire ENMEA;
assign ENMEA = ((WEA_pre !== 1'b0 && (ADRA_valid || flag_ADRA_x)) ?1'b1:1'b0);
// Setup/hold condition for Write Enable: WEA is : ENWEA
wire ENWEA;
assign ENWEA = (((ADRA_valid || flag_ADRA_x) && MEA_pre !== 1'b0  && (LS_buf === 1'b0) ) ?1'b1:1'b0);

// Setup/hold condition for Data In: DA is : ENDA
wire ENDA;
assign ENDA = (( ADRA_valid && MEA_pre !== 1'b0 && WEA_pre !== 1'b0  && (LS_buf === 1'b0) )?1'b1:1'b0) ;
// Setup/hold condition for test1 Vector: TEST1 is : ENTEST1
wire ENTEST1;
assign ENTEST1 = ((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid) || (MEB_pre !== 1'b0 && ADRB_valid))  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for testrwm Vector: TESTRWM is : ENTESTRWM
wire ENTESTRWM;
assign ENTESTRWM = ((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0 && ADRA_valid) || (MEB_pre !== 1'b0 && ADRB_valid))  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for test_rnm Vector: TEST_RNM is : ENTEST_RNM
wire ENTEST_RNM;
assign ENTEST_RNM = ((((MEA_pre !== 1'b0 && WEA_pre !== 1'b0) || (MEB_pre !== 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector: RM is : ENRM
wire ENRM;
assign ENRM = ((((ADRA_valid && WEA_pre !== 1'b0 && MEA_pre !== 1'b0) || (ADRB_valid && MEB_pre !== 1'b0)) && RME_buf === 1'b1  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for Read Margin Vector Enable: RME is : ENRME
wire ENRME;
assign ENRME = ((((ADRA_valid && WEA_pre !== 1'b0 && MEA_pre !== 1'b0) || (ADRB_valid && MEB_pre !== 1'b0))  && (LS_buf === 1'b0))?1'b1:1'b0);
// Setup/hold condition for BC1 Vector: BC1 is : ENBC1
wire ENBC1;
assign ENBC1 = ((LS_buf !== 1'b0)?1'b1:1'b0);
// Setup/hold condition for BC2 Vector: BC2 is : ENBC2
wire ENBC2;
assign ENBC2 = ((LS_buf !== 1'b0)?1'b1:1'b0);
wire ENCLK;
assign ENCLK = ((  TEST1_buf === 1'b0 )?1'b1:1'b0) ;
wire ENCLK_test1;
assign ENCLK_test1 = (( (TEST1_buf === 1'b1) )?1'b1:1'b0) ;
// Setup/hold condition for Power pin Vector: LS is : ENLS
wire ENLS;
assign ENLS = (((MEA_pre !== 1'b0 || MEB_pre !== 1'b0))?1'b1:1'b0);


wire ENCLK_rmezo,ENCLK_vdm,ENCLK_slw,ENCLK_def,ENCLK_fst,ENCLK_fster;

assign ENCLK_rmezo = (( RME_buf !== 1'b1)?1'b1:1'b0);
assign ENCLK_vdm = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b1) && (RM_buf[1] !== 1'b1) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_slw = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b0) && (RM_buf[1] !== 1'b1) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_def = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b1) && (RM_buf[1] !== 1'b0) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_fst = (( RME_buf === 1'b1  && ((RM_buf[0] !== 1'b0) && (RM_buf[1] !== 1'b0) && (RM_buf[2] !== 1'b1) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);
assign ENCLK_fster = (( RME_buf === 1'b1  && ((RM_buf[2] !== 1'b0) && (RM_buf[3] !== 1'b1)))?1'b1:1'b0);

wire ENRSCIN;
assign ENRSCIN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);

wire ENRSCEN;
assign ENRSCEN = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0)?1'b1:1'b0);

wire ENRSCRST;
assign ENRSCRST = ((FISO_buf === 1'b0)?1'b1:1'b0);

wire ENRSCLK;
assign ENRSCLK = ((RSCRST_buf === 1'b0 && FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);

wire ENRSCRSTRSCLKrec;
assign ENRSCRSTRSCLKrec = ((FISO_buf === 1'b0 && RSCEN_buf === 1'b1)?1'b1:1'b0);

wire ENRSCRSTCLKrec;
assign ENRSCRSTCLKrec = ((FISO_buf === 1'b0 && ((MEA_pre === 1'b1 && WEA_pre === 1'b1) || MEB_pre === 1'b1) )?1'b1:1'b0);

wire ENRSCENCLKrec;
assign ENRSCENCLKrec = ((FISO_buf === 1'b0 && ((MEA_pre === 1'b1  && WEA_pre === 1'b1) || MEB_pre === 1'b1) && RSCRST_buf === 1'b0)?1'b1:1'b0);

wire ENRSCLKCLKrec;
assign ENRSCLKCLKrec = ((FISO_buf === 1'b0 && RSCEN_buf === 1'b1 && ((MEA_pre === 1'b1  && WEA_pre === 1'b1) || MEB_pre === 1'b1) && RSCRST_buf === 1'b0)?1'b1:1'b0);

`endif // endif of VIRAGE_FAST_VERILOG

reg flag_ADRB_x;

always @(MEB_buf or negedge CLK_buf) 
begin : blk_mebuf_1
  #0;
  if ( CLK_buf == 1'b0)
  begin
    MEB_pre = MEB_buf;
  end // if of CLK_buf = 0
end // end of always block blk_mebuf_1

always @(ADRB_buf or negedge CLK_buf) 
begin : blk_addrbuf_1
  #0;
  if ( CLK_buf == 1'b0)
  begin
    ADRB_pre = ADRB_buf;
  end // if of CLK_buf = 0
  if ( (^ADRB_buf) === 1'bx)
  begin
    flag_ADRB_x = 1'b1;
  end 
  else
  begin
    flag_ADRB_x = 1'b0;
  end
end // end of always block blk_addrbuf_1


`ifdef VIRAGE_FAST_VERILOG
`else
// Setup/hold condition for Address: ADRB is : ENADRB
wire ENADRB;
assign ENADRB = ((MEB_pre !== 1'b0  && (LS_buf === 1'b0)) ?1'b1:1'b0);
 
// Setup/hold condition for Memory Enable: MEB is : ENMEB
wire ENMEB;
assign ENMEB = (((ADRB_valid || flag_ADRB_x)) ?1'b1:1'b0);

`endif // endif of VIRAGE_FAST_VERILOG

wire LS_old;

`ifdef VIRAGE_FAST_VERILOG
`else
specify
 
  specparam
    Tac = 0.086,
    Tcax = 0.077,
    Tdc = 0.014,
    Tcdx = 0.124,
    Twc = 0.071,
    Tcwx = 0.019,
    Tmc = 0.132,
    Tcmx = 0.050,
    Tcl = 0.087,
    Tcltest1 = 0.158,
    Tch = 0.057,
    Tchtest1 = 0.372,
    Tcc = 0.765,
    Tccvddmin = 0.960,
    Tccslow = 0.820,
    Tccdef = 0.765,
    Tccfast = 0.749,
    Tccfaster = 0.735,
    Trinc = 0.061,
    Tcrinx = 0.106,
    Trenc = 0.061,
    Tcrenx = 0.106,
    Trenclkrec = 3.823,
    Trrstrclkrec = 3.729,
    Trrstclkrec = 3.772,
    Trrst = 0.112,
    Trclkclkrec = 3.823,
    Trclkl = 0.361,
    Trclkh = 0.144,
    Trclkc = 0.505,
    Trmec = 0.187,
    Tcrmex = 0.044,
    Trmc = 0.187,
    Trm2c = -0.013,
    Trm3c = 0.263,
    Tcrmx = 0.044,
    Tcrm2x = 0.032,
    Tcrm3x = 0.750,
    Ttrnmc = 0.132,
    Tctrnmx = 0.750,
    Trlsc = 0.031,
    Tflsc = 0.136,
    Tlsx = 0.099,
    Tbc1c = 0.141,
    Tbc2c = 0.140,
    TT1C = 0.132,
    TCT1X = 0.715,
    Ttrwmc = 0.132,
    Tctrwmx = 0.665,
    Trclkrout = 0.141,
    Tcq = 0.307,
    Tcqx = 0.212,
    Tcqvddmin = 0.366,
    Tcqvddminx = 0.259,
    Tcqslow = 0.331,
    Tcqslowx = 0.230,
    Tcqdef = 0.307,
    Tcqdefx = 0.212,
    Tcqfast = 0.298,
    Tcqfastx = 0.168,
    Tcqfaster = 0.295,
    Tcqfasterx = 0.132,
    Tcqtest1x = 0.106,
    Tcqtest1 = 0.155;
     if ( !FISO & RSCEN )
       ( posedge RSCLK => (  RSCOUT  : 1'bx )) = (  Trclkrout, Trclkrout );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[143]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[142]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[141]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[140]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[139]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[138]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[137]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[136]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[135]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[134]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[133]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[132]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[131]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[130]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[129]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[128]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[127]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[126]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[125]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[124]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[123]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[122]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[121]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[120]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[119]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[118]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[117]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[116]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[115]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[114]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[113]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[112]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[111]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[110]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[109]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[108]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[107]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[106]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[105]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[104]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[103]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[102]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[101]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[100]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[99]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[98]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[97]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[96]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[95]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[94]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[93]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[92]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[91]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[90]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[89]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[88]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[87]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[86]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[85]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[84]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[83]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[82]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[81]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[80]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[79]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[78]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[77]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[76]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[75]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[74]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[73]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[72]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[71]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[70]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[69]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[68]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[67]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[66]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[65]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[64]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[63]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[62]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[61]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[60]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[59]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[58]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[57]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[56]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[55]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[54]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[53]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[52]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[51]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[50]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[49]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[48]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[47]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[46]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[45]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[44]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[43]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[42]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[41]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[40]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[39]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[38]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[37]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[36]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[35]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[34]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[33]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[32]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[31]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[30]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[29]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[28]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[27]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[26]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[25]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[24]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[23]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[22]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[21]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[20]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[19]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[18]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[17]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[16]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[15]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[14]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[13]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[12]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[11]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[10]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[9]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[8]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[7]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[6]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[5]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[4]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[3]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[2]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[1]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   !RME & !LS & !TEST1 )
       ( posedge CLK => (  QB[0]  : 1'bx )) = (  Tcq, Tcq, Tcqx, Tcq, Tcqx, Tcq );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[143]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[142]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[141]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[140]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[139]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[138]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[137]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[136]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[135]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[134]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[133]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[132]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[131]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[130]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[129]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[128]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[127]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[126]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[125]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[124]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[123]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[122]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[121]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[120]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[119]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[118]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[117]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[116]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[115]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[114]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[113]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[112]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[111]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[110]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[109]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[108]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[107]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[106]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[105]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[104]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[103]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[102]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[101]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[100]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[99]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[98]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[97]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[96]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[95]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[94]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[93]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[92]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[91]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[90]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[89]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[88]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[87]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[86]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[85]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[84]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[83]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[82]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[81]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[80]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[79]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[78]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[77]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[76]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[75]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[74]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[73]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[72]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[71]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[70]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[69]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[68]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[67]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[66]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[65]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[64]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[63]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[62]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[61]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[60]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[59]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[58]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[57]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[56]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[55]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[54]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[53]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[52]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[51]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[50]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[49]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[48]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[47]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[46]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[45]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[44]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[43]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[42]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[41]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[40]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[39]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[38]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[37]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[36]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[35]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[34]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[33]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[32]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[31]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[30]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[29]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[28]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[27]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[26]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[25]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[24]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[23]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[22]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[21]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[20]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[19]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[18]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[17]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[16]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[15]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[14]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[13]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[12]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[11]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[10]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[9]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[8]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[7]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[6]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[5]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[4]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[3]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[2]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[1]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & !RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[0]  : 1'bx )) = (  Tcqvddmin, Tcqvddmin, Tcqvddminx, Tcqvddmin, Tcqvddminx, Tcqvddmin );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[143]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[142]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[141]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[140]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[139]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[138]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[137]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[136]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[135]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[134]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[133]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[132]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[131]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[130]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[129]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[128]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[127]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[126]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[125]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[124]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[123]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[122]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[121]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[120]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[119]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[118]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[117]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[116]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[115]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[114]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[113]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[112]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[111]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[110]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[109]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[108]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[107]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[106]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[105]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[104]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[103]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[102]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[101]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[100]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[99]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[98]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[97]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[96]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[95]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[94]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[93]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[92]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[91]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[90]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[89]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[88]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[87]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[86]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[85]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[84]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[83]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[82]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[81]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[80]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[79]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[78]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[77]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[76]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[75]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[74]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[73]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[72]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[71]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[70]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[69]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[68]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[67]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[66]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[65]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[64]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[63]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[62]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[61]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[60]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[59]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[58]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[57]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[56]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[55]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[54]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[53]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[52]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[51]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[50]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[49]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[48]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[47]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[46]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[45]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[44]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[43]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[42]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[41]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[40]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[39]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[38]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[37]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[36]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[35]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[34]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[33]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[32]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[31]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[30]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[29]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[28]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[27]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[26]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[25]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[24]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[23]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[22]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[21]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[20]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[19]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[18]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[17]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[16]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[15]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[14]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[13]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[12]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[11]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[10]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[9]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[8]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[7]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[6]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[5]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[4]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[3]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[2]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[1]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & RM[0] & !RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[0]  : 1'bx )) = (  Tcqslow, Tcqslow, Tcqslowx, Tcqslow, Tcqslowx, Tcqslow );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[143]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[142]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[141]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[140]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[139]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[138]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[137]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[136]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[135]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[134]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[133]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[132]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[131]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[130]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[129]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[128]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[127]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[126]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[125]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[124]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[123]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[122]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[121]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[120]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[119]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[118]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[117]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[116]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[115]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[114]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[113]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[112]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[111]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[110]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[109]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[108]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[107]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[106]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[105]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[104]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[103]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[102]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[101]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[100]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[99]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[98]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[97]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[96]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[95]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[94]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[93]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[92]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[91]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[90]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[89]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[88]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[87]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[86]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[85]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[84]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[83]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[82]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[81]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[80]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[79]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[78]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[77]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[76]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[75]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[74]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[73]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[72]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[71]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[70]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[69]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[68]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[67]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[66]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[65]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[64]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[63]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[62]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[61]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[60]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[59]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[58]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[57]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[56]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[55]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[54]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[53]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[52]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[51]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[50]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[49]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[48]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[47]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[46]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[45]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[44]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[43]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[42]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[41]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[40]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[39]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[38]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[37]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[36]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[35]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[34]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[33]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[32]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[31]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[30]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[29]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[28]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[27]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[26]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[25]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[24]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[23]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[22]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[21]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[20]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[19]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[18]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[17]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[16]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[15]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[14]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[13]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[12]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[11]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[10]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[9]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[8]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[7]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[6]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[5]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[4]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[3]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[2]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[1]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & !RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[0]  : 1'bx )) = (  Tcqdef, Tcqdef, Tcqdefx, Tcqdef, Tcqdefx, Tcqdef );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[143]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[142]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[141]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[140]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[139]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[138]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[137]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[136]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[135]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[134]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[133]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[132]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[131]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[130]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[129]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[128]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[127]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[126]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[125]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[124]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[123]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[122]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[121]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[120]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[119]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[118]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[117]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[116]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[115]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[114]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[113]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[112]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[111]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[110]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[109]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[108]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[107]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[106]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[105]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[104]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[103]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[102]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[101]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[100]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[99]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[98]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[97]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[96]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[95]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[94]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[93]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[92]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[91]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[90]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[89]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[88]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[87]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[86]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[85]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[84]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[83]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[82]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[81]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[80]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[79]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[78]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[77]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[76]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[75]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[74]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[73]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[72]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[71]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[70]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[69]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[68]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[67]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[66]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[65]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[64]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[63]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[62]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[61]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[60]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[59]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[58]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[57]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[56]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[55]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[54]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[53]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[52]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[51]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[50]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[49]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[48]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[47]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[46]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[45]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[44]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[43]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[42]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[41]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[40]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[39]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[38]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[37]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[36]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[35]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[34]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[33]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[32]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[31]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[30]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[29]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[28]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[27]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[26]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[25]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[24]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[23]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[22]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[21]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[20]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[19]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[18]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[17]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[16]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[15]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[14]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[13]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[12]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[11]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[10]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[9]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[8]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[7]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[6]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[5]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[4]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[3]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[2]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[1]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[0] & RM[1] & !RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[0]  : 1'bx )) = (  Tcqfast, Tcqfast, Tcqfastx, Tcqfast, Tcqfastx, Tcqfast );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[143]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[142]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[141]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[140]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[139]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[138]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[137]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[136]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[135]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[134]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[133]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[132]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[131]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[130]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[129]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[128]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[127]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[126]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[125]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[124]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[123]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[122]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[121]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[120]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[119]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[118]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[117]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[116]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[115]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[114]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[113]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[112]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[111]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[110]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[109]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[108]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[107]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[106]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[105]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[104]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[103]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[102]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[101]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[100]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[99]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[98]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[97]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[96]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[95]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[94]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[93]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[92]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[91]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[90]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[89]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[88]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[87]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[86]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[85]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[84]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[83]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[82]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[81]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[80]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[79]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[78]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[77]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[76]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[75]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[74]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[73]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[72]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[71]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[70]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[69]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[68]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[67]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[66]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[65]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[64]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[63]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[62]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[61]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[60]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[59]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[58]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[57]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[56]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[55]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[54]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[53]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[52]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[51]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[50]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[49]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[48]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[47]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[46]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[45]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[44]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[43]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[42]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[41]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[40]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[39]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[38]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[37]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[36]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[35]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[34]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[33]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[32]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[31]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[30]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[29]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[28]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[27]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[26]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[25]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[24]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[23]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[22]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[21]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[20]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[19]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[18]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[17]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[16]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[15]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[14]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[13]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[12]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[11]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[10]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[9]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[8]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[7]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[6]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[5]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[4]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[3]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[2]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[1]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if (   RME & RM[2] & !RM[3] & !LS & !TEST1 )
       ( posedge CLK => (  QB[0]  : 1'bx )) = (  Tcqfaster, Tcqfaster, Tcqfasterx, Tcqfaster, Tcqfasterx, Tcqfaster );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[143]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[142]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[141]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[140]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[139]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[138]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[137]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[136]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[135]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[134]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[133]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[132]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[131]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[130]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[129]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[128]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[127]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[126]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[125]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[124]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[123]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[122]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[121]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[120]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[119]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[118]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[117]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[116]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[115]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[114]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[113]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[112]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[111]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[110]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[109]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[108]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[107]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[106]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[105]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[104]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[103]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[102]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[101]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[100]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[99]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[98]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[97]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[96]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[95]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[94]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[93]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[92]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[91]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[90]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[89]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[88]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[87]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[86]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[85]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[84]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[83]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[82]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[81]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[80]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[79]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[78]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[77]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[76]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[75]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[74]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[73]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[72]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[71]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[70]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[69]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[68]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[67]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[66]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[65]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[64]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[63]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[62]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[61]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[60]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[59]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[58]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[57]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[56]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[55]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[54]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[53]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[52]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[51]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[50]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[49]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[48]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[47]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[46]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[45]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[44]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[43]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[42]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[41]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[40]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[39]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[38]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[37]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[36]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[35]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[34]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[33]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[32]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[31]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[30]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[29]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[28]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[27]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[26]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[25]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[24]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[23]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[22]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[21]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[20]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[19]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[18]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[17]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[16]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[15]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[14]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[13]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[12]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[11]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[10]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[9]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[8]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[7]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[6]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[5]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[4]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[3]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[2]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[1]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( posedge CLK => (  QB[0]  : 1'bx )) = (  Tcqtest1x, Tcqtest1x );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[143]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[142]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[141]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[140]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[139]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[138]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[137]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[136]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[135]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[134]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[133]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[132]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[131]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[130]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[129]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[128]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[127]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[126]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[125]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[124]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[123]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[122]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[121]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[120]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[119]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[118]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[117]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[116]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[115]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[114]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[113]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[112]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[111]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[110]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[109]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[108]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[107]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[106]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[105]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[104]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[103]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[102]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[101]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[100]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[99]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[98]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[97]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[96]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[95]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[94]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[93]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[92]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[91]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[90]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[89]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[88]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[87]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[86]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[85]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[84]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[83]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[82]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[81]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[80]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[79]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[78]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[77]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[76]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[75]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[74]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[73]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[72]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[71]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[70]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[69]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[68]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[67]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[66]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[65]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[64]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[63]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[62]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[61]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[60]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[59]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[58]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[57]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[56]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[55]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[54]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[53]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[52]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[51]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[50]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[49]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[48]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[47]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[46]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[45]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[44]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[43]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[42]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[41]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[40]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[39]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[38]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[37]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[36]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[35]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[34]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[33]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[32]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[31]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[30]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[29]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[28]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[27]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[26]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[25]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[24]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[23]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[22]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[21]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[20]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[19]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[18]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[17]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[16]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[15]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[14]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[13]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[12]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[11]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[10]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[9]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[8]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[7]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[6]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[5]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[4]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[3]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[2]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[1]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );
     if ( !LS & TEST1 )
       ( negedge CLK => (  QB[0]  : 1'bx )) = (  Tcqtest1, Tcqtest1 );

// Timing Checks

  $width (negedge CLK &&& ENCLK, Tcl, 0, notif_clk);
  $width (negedge CLK &&& ENCLK_test1, Tcltest1, 0, notif_clk);
  $width (posedge CLK &&& ENCLK, Tch, 0, notif_clk);
  $width (posedge CLK &&& ENCLK_test1, Tchtest1, 0, notif_clk);
  $period (posedge CLK &&& ENCLK_rmezo, Tcc, notif_clkp);
  $period (negedge CLK &&& ENCLK_rmezo, Tcc, notif_clk);
  $period (posedge CLK &&& ENCLK_vdm, Tccvddmin, notif_clkp);
  $period (negedge CLK &&& ENCLK_vdm, Tccvddmin, notif_clk);
  $period (posedge CLK &&& ENCLK_slw, Tccslow, notif_clkp);
  $period (negedge CLK &&& ENCLK_slw, Tccslow, notif_clk);
  $period (posedge CLK &&& ENCLK_def, Tccdef, notif_clkp);
  $period (negedge CLK &&& ENCLK_def, Tccdef, notif_clk);
  $period (posedge CLK &&& ENCLK_fst, Tccfast, notif_clkp);
  $period (negedge CLK &&& ENCLK_fst, Tccfast, notif_clk);
  $period (posedge CLK &&& ENCLK_fster, Tccfaster, notif_clkp);
  $period (negedge CLK &&& ENCLK_fster, Tccfaster, notif_clk);
  $width (posedge RSCRST &&& ENRSCRST, Trrst, 0, notif_rscrst);
  $width (negedge RSCLK &&& ENRSCLK, Trclkl, 0, notif_rsclk);
  $width (posedge RSCLK &&& ENRSCLK, Trclkh, 0, notif_rsclk);
  $period (posedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $period (negedge RSCLK &&& ENRSCLK, Trclkc, notif_rsclk);
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[0] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[0], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[0] );
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[1] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[1], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[1] );
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[2] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[2], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[2] );
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[3] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[3], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[3] );
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[4] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[4], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[4] );
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[5] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[5], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[5] );
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[6] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[6], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[6] );
  $setuphold (posedge CLK  &&& ENADRA, posedge ADRA[7], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[7] );
  $setuphold (posedge CLK  &&& ENADRA, negedge ADRA[7], Tac, Tcax, notif_adra,,, delayed_CLK, delayed_ADRA[7] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLK, delayed_DA[0] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[0], Tdc, Tcdx, notif_da_0,,, delayed_CLK, delayed_DA[0] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLK, delayed_DA[1] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[1], Tdc, Tcdx, notif_da_1,,, delayed_CLK, delayed_DA[1] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLK, delayed_DA[2] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[2], Tdc, Tcdx, notif_da_2,,, delayed_CLK, delayed_DA[2] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLK, delayed_DA[3] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[3], Tdc, Tcdx, notif_da_3,,, delayed_CLK, delayed_DA[3] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLK, delayed_DA[4] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[4], Tdc, Tcdx, notif_da_4,,, delayed_CLK, delayed_DA[4] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLK, delayed_DA[5] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[5], Tdc, Tcdx, notif_da_5,,, delayed_CLK, delayed_DA[5] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLK, delayed_DA[6] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[6], Tdc, Tcdx, notif_da_6,,, delayed_CLK, delayed_DA[6] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLK, delayed_DA[7] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[7], Tdc, Tcdx, notif_da_7,,, delayed_CLK, delayed_DA[7] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLK, delayed_DA[8] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[8], Tdc, Tcdx, notif_da_8,,, delayed_CLK, delayed_DA[8] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLK, delayed_DA[9] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[9], Tdc, Tcdx, notif_da_9,,, delayed_CLK, delayed_DA[9] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLK, delayed_DA[10] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[10], Tdc, Tcdx, notif_da_10,,, delayed_CLK, delayed_DA[10] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLK, delayed_DA[11] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[11], Tdc, Tcdx, notif_da_11,,, delayed_CLK, delayed_DA[11] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLK, delayed_DA[12] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[12], Tdc, Tcdx, notif_da_12,,, delayed_CLK, delayed_DA[12] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLK, delayed_DA[13] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[13], Tdc, Tcdx, notif_da_13,,, delayed_CLK, delayed_DA[13] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLK, delayed_DA[14] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[14], Tdc, Tcdx, notif_da_14,,, delayed_CLK, delayed_DA[14] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLK, delayed_DA[15] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[15], Tdc, Tcdx, notif_da_15,,, delayed_CLK, delayed_DA[15] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLK, delayed_DA[16] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[16], Tdc, Tcdx, notif_da_16,,, delayed_CLK, delayed_DA[16] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLK, delayed_DA[17] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[17], Tdc, Tcdx, notif_da_17,,, delayed_CLK, delayed_DA[17] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLK, delayed_DA[18] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[18], Tdc, Tcdx, notif_da_18,,, delayed_CLK, delayed_DA[18] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLK, delayed_DA[19] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[19], Tdc, Tcdx, notif_da_19,,, delayed_CLK, delayed_DA[19] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLK, delayed_DA[20] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[20], Tdc, Tcdx, notif_da_20,,, delayed_CLK, delayed_DA[20] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLK, delayed_DA[21] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[21], Tdc, Tcdx, notif_da_21,,, delayed_CLK, delayed_DA[21] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLK, delayed_DA[22] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[22], Tdc, Tcdx, notif_da_22,,, delayed_CLK, delayed_DA[22] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLK, delayed_DA[23] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[23], Tdc, Tcdx, notif_da_23,,, delayed_CLK, delayed_DA[23] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLK, delayed_DA[24] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[24], Tdc, Tcdx, notif_da_24,,, delayed_CLK, delayed_DA[24] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLK, delayed_DA[25] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[25], Tdc, Tcdx, notif_da_25,,, delayed_CLK, delayed_DA[25] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLK, delayed_DA[26] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[26], Tdc, Tcdx, notif_da_26,,, delayed_CLK, delayed_DA[26] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLK, delayed_DA[27] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[27], Tdc, Tcdx, notif_da_27,,, delayed_CLK, delayed_DA[27] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLK, delayed_DA[28] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[28], Tdc, Tcdx, notif_da_28,,, delayed_CLK, delayed_DA[28] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLK, delayed_DA[29] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[29], Tdc, Tcdx, notif_da_29,,, delayed_CLK, delayed_DA[29] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLK, delayed_DA[30] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[30], Tdc, Tcdx, notif_da_30,,, delayed_CLK, delayed_DA[30] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLK, delayed_DA[31] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[31], Tdc, Tcdx, notif_da_31,,, delayed_CLK, delayed_DA[31] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLK, delayed_DA[32] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[32], Tdc, Tcdx, notif_da_32,,, delayed_CLK, delayed_DA[32] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLK, delayed_DA[33] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[33], Tdc, Tcdx, notif_da_33,,, delayed_CLK, delayed_DA[33] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLK, delayed_DA[34] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[34], Tdc, Tcdx, notif_da_34,,, delayed_CLK, delayed_DA[34] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLK, delayed_DA[35] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[35], Tdc, Tcdx, notif_da_35,,, delayed_CLK, delayed_DA[35] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLK, delayed_DA[36] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[36], Tdc, Tcdx, notif_da_36,,, delayed_CLK, delayed_DA[36] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLK, delayed_DA[37] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[37], Tdc, Tcdx, notif_da_37,,, delayed_CLK, delayed_DA[37] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLK, delayed_DA[38] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[38], Tdc, Tcdx, notif_da_38,,, delayed_CLK, delayed_DA[38] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLK, delayed_DA[39] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[39], Tdc, Tcdx, notif_da_39,,, delayed_CLK, delayed_DA[39] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLK, delayed_DA[40] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[40], Tdc, Tcdx, notif_da_40,,, delayed_CLK, delayed_DA[40] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLK, delayed_DA[41] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[41], Tdc, Tcdx, notif_da_41,,, delayed_CLK, delayed_DA[41] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLK, delayed_DA[42] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[42], Tdc, Tcdx, notif_da_42,,, delayed_CLK, delayed_DA[42] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLK, delayed_DA[43] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[43], Tdc, Tcdx, notif_da_43,,, delayed_CLK, delayed_DA[43] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLK, delayed_DA[44] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[44], Tdc, Tcdx, notif_da_44,,, delayed_CLK, delayed_DA[44] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLK, delayed_DA[45] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[45], Tdc, Tcdx, notif_da_45,,, delayed_CLK, delayed_DA[45] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLK, delayed_DA[46] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[46], Tdc, Tcdx, notif_da_46,,, delayed_CLK, delayed_DA[46] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLK, delayed_DA[47] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[47], Tdc, Tcdx, notif_da_47,,, delayed_CLK, delayed_DA[47] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLK, delayed_DA[48] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[48], Tdc, Tcdx, notif_da_48,,, delayed_CLK, delayed_DA[48] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLK, delayed_DA[49] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[49], Tdc, Tcdx, notif_da_49,,, delayed_CLK, delayed_DA[49] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLK, delayed_DA[50] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[50], Tdc, Tcdx, notif_da_50,,, delayed_CLK, delayed_DA[50] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLK, delayed_DA[51] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[51], Tdc, Tcdx, notif_da_51,,, delayed_CLK, delayed_DA[51] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLK, delayed_DA[52] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[52], Tdc, Tcdx, notif_da_52,,, delayed_CLK, delayed_DA[52] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLK, delayed_DA[53] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[53], Tdc, Tcdx, notif_da_53,,, delayed_CLK, delayed_DA[53] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLK, delayed_DA[54] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[54], Tdc, Tcdx, notif_da_54,,, delayed_CLK, delayed_DA[54] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLK, delayed_DA[55] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[55], Tdc, Tcdx, notif_da_55,,, delayed_CLK, delayed_DA[55] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLK, delayed_DA[56] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[56], Tdc, Tcdx, notif_da_56,,, delayed_CLK, delayed_DA[56] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLK, delayed_DA[57] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[57], Tdc, Tcdx, notif_da_57,,, delayed_CLK, delayed_DA[57] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLK, delayed_DA[58] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[58], Tdc, Tcdx, notif_da_58,,, delayed_CLK, delayed_DA[58] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLK, delayed_DA[59] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[59], Tdc, Tcdx, notif_da_59,,, delayed_CLK, delayed_DA[59] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLK, delayed_DA[60] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[60], Tdc, Tcdx, notif_da_60,,, delayed_CLK, delayed_DA[60] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLK, delayed_DA[61] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[61], Tdc, Tcdx, notif_da_61,,, delayed_CLK, delayed_DA[61] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLK, delayed_DA[62] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[62], Tdc, Tcdx, notif_da_62,,, delayed_CLK, delayed_DA[62] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLK, delayed_DA[63] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[63], Tdc, Tcdx, notif_da_63,,, delayed_CLK, delayed_DA[63] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLK, delayed_DA[64] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[64], Tdc, Tcdx, notif_da_64,,, delayed_CLK, delayed_DA[64] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLK, delayed_DA[65] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[65], Tdc, Tcdx, notif_da_65,,, delayed_CLK, delayed_DA[65] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLK, delayed_DA[66] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[66], Tdc, Tcdx, notif_da_66,,, delayed_CLK, delayed_DA[66] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLK, delayed_DA[67] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[67], Tdc, Tcdx, notif_da_67,,, delayed_CLK, delayed_DA[67] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLK, delayed_DA[68] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[68], Tdc, Tcdx, notif_da_68,,, delayed_CLK, delayed_DA[68] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLK, delayed_DA[69] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[69], Tdc, Tcdx, notif_da_69,,, delayed_CLK, delayed_DA[69] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLK, delayed_DA[70] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[70], Tdc, Tcdx, notif_da_70,,, delayed_CLK, delayed_DA[70] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLK, delayed_DA[71] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[71], Tdc, Tcdx, notif_da_71,,, delayed_CLK, delayed_DA[71] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLK, delayed_DA[72] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[72], Tdc, Tcdx, notif_da_72,,, delayed_CLK, delayed_DA[72] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLK, delayed_DA[73] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[73], Tdc, Tcdx, notif_da_73,,, delayed_CLK, delayed_DA[73] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLK, delayed_DA[74] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[74], Tdc, Tcdx, notif_da_74,,, delayed_CLK, delayed_DA[74] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLK, delayed_DA[75] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[75], Tdc, Tcdx, notif_da_75,,, delayed_CLK, delayed_DA[75] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLK, delayed_DA[76] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[76], Tdc, Tcdx, notif_da_76,,, delayed_CLK, delayed_DA[76] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLK, delayed_DA[77] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[77], Tdc, Tcdx, notif_da_77,,, delayed_CLK, delayed_DA[77] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLK, delayed_DA[78] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[78], Tdc, Tcdx, notif_da_78,,, delayed_CLK, delayed_DA[78] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLK, delayed_DA[79] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[79], Tdc, Tcdx, notif_da_79,,, delayed_CLK, delayed_DA[79] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_CLK, delayed_DA[80] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[80], Tdc, Tcdx, notif_da_80,,, delayed_CLK, delayed_DA[80] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_CLK, delayed_DA[81] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[81], Tdc, Tcdx, notif_da_81,,, delayed_CLK, delayed_DA[81] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_CLK, delayed_DA[82] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[82], Tdc, Tcdx, notif_da_82,,, delayed_CLK, delayed_DA[82] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_CLK, delayed_DA[83] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[83], Tdc, Tcdx, notif_da_83,,, delayed_CLK, delayed_DA[83] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_CLK, delayed_DA[84] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[84], Tdc, Tcdx, notif_da_84,,, delayed_CLK, delayed_DA[84] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_CLK, delayed_DA[85] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[85], Tdc, Tcdx, notif_da_85,,, delayed_CLK, delayed_DA[85] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_CLK, delayed_DA[86] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[86], Tdc, Tcdx, notif_da_86,,, delayed_CLK, delayed_DA[86] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_CLK, delayed_DA[87] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[87], Tdc, Tcdx, notif_da_87,,, delayed_CLK, delayed_DA[87] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_CLK, delayed_DA[88] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[88], Tdc, Tcdx, notif_da_88,,, delayed_CLK, delayed_DA[88] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_CLK, delayed_DA[89] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[89], Tdc, Tcdx, notif_da_89,,, delayed_CLK, delayed_DA[89] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_CLK, delayed_DA[90] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[90], Tdc, Tcdx, notif_da_90,,, delayed_CLK, delayed_DA[90] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_CLK, delayed_DA[91] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[91], Tdc, Tcdx, notif_da_91,,, delayed_CLK, delayed_DA[91] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_CLK, delayed_DA[92] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[92], Tdc, Tcdx, notif_da_92,,, delayed_CLK, delayed_DA[92] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_CLK, delayed_DA[93] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[93], Tdc, Tcdx, notif_da_93,,, delayed_CLK, delayed_DA[93] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_CLK, delayed_DA[94] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[94], Tdc, Tcdx, notif_da_94,,, delayed_CLK, delayed_DA[94] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_CLK, delayed_DA[95] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[95], Tdc, Tcdx, notif_da_95,,, delayed_CLK, delayed_DA[95] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_CLK, delayed_DA[96] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[96], Tdc, Tcdx, notif_da_96,,, delayed_CLK, delayed_DA[96] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_CLK, delayed_DA[97] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[97], Tdc, Tcdx, notif_da_97,,, delayed_CLK, delayed_DA[97] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_CLK, delayed_DA[98] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[98], Tdc, Tcdx, notif_da_98,,, delayed_CLK, delayed_DA[98] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_CLK, delayed_DA[99] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[99], Tdc, Tcdx, notif_da_99,,, delayed_CLK, delayed_DA[99] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_CLK, delayed_DA[100] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[100], Tdc, Tcdx, notif_da_100,,, delayed_CLK, delayed_DA[100] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_CLK, delayed_DA[101] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[101], Tdc, Tcdx, notif_da_101,,, delayed_CLK, delayed_DA[101] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_CLK, delayed_DA[102] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[102], Tdc, Tcdx, notif_da_102,,, delayed_CLK, delayed_DA[102] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_CLK, delayed_DA[103] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[103], Tdc, Tcdx, notif_da_103,,, delayed_CLK, delayed_DA[103] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_CLK, delayed_DA[104] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[104], Tdc, Tcdx, notif_da_104,,, delayed_CLK, delayed_DA[104] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_CLK, delayed_DA[105] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[105], Tdc, Tcdx, notif_da_105,,, delayed_CLK, delayed_DA[105] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_CLK, delayed_DA[106] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[106], Tdc, Tcdx, notif_da_106,,, delayed_CLK, delayed_DA[106] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_CLK, delayed_DA[107] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[107], Tdc, Tcdx, notif_da_107,,, delayed_CLK, delayed_DA[107] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_CLK, delayed_DA[108] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[108], Tdc, Tcdx, notif_da_108,,, delayed_CLK, delayed_DA[108] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_CLK, delayed_DA[109] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[109], Tdc, Tcdx, notif_da_109,,, delayed_CLK, delayed_DA[109] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_CLK, delayed_DA[110] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[110], Tdc, Tcdx, notif_da_110,,, delayed_CLK, delayed_DA[110] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_CLK, delayed_DA[111] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[111], Tdc, Tcdx, notif_da_111,,, delayed_CLK, delayed_DA[111] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_CLK, delayed_DA[112] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[112], Tdc, Tcdx, notif_da_112,,, delayed_CLK, delayed_DA[112] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_CLK, delayed_DA[113] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[113], Tdc, Tcdx, notif_da_113,,, delayed_CLK, delayed_DA[113] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_CLK, delayed_DA[114] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[114], Tdc, Tcdx, notif_da_114,,, delayed_CLK, delayed_DA[114] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_CLK, delayed_DA[115] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[115], Tdc, Tcdx, notif_da_115,,, delayed_CLK, delayed_DA[115] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_CLK, delayed_DA[116] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[116], Tdc, Tcdx, notif_da_116,,, delayed_CLK, delayed_DA[116] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_CLK, delayed_DA[117] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[117], Tdc, Tcdx, notif_da_117,,, delayed_CLK, delayed_DA[117] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_CLK, delayed_DA[118] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[118], Tdc, Tcdx, notif_da_118,,, delayed_CLK, delayed_DA[118] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_CLK, delayed_DA[119] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[119], Tdc, Tcdx, notif_da_119,,, delayed_CLK, delayed_DA[119] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_CLK, delayed_DA[120] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[120], Tdc, Tcdx, notif_da_120,,, delayed_CLK, delayed_DA[120] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_CLK, delayed_DA[121] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[121], Tdc, Tcdx, notif_da_121,,, delayed_CLK, delayed_DA[121] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_CLK, delayed_DA[122] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[122], Tdc, Tcdx, notif_da_122,,, delayed_CLK, delayed_DA[122] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_CLK, delayed_DA[123] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[123], Tdc, Tcdx, notif_da_123,,, delayed_CLK, delayed_DA[123] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_CLK, delayed_DA[124] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[124], Tdc, Tcdx, notif_da_124,,, delayed_CLK, delayed_DA[124] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_CLK, delayed_DA[125] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[125], Tdc, Tcdx, notif_da_125,,, delayed_CLK, delayed_DA[125] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_CLK, delayed_DA[126] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[126], Tdc, Tcdx, notif_da_126,,, delayed_CLK, delayed_DA[126] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_CLK, delayed_DA[127] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[127], Tdc, Tcdx, notif_da_127,,, delayed_CLK, delayed_DA[127] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_CLK, delayed_DA[128] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[128], Tdc, Tcdx, notif_da_128,,, delayed_CLK, delayed_DA[128] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_CLK, delayed_DA[129] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[129], Tdc, Tcdx, notif_da_129,,, delayed_CLK, delayed_DA[129] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_CLK, delayed_DA[130] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[130], Tdc, Tcdx, notif_da_130,,, delayed_CLK, delayed_DA[130] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_CLK, delayed_DA[131] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[131], Tdc, Tcdx, notif_da_131,,, delayed_CLK, delayed_DA[131] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_CLK, delayed_DA[132] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[132], Tdc, Tcdx, notif_da_132,,, delayed_CLK, delayed_DA[132] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_CLK, delayed_DA[133] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[133], Tdc, Tcdx, notif_da_133,,, delayed_CLK, delayed_DA[133] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_CLK, delayed_DA[134] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[134], Tdc, Tcdx, notif_da_134,,, delayed_CLK, delayed_DA[134] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_CLK, delayed_DA[135] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[135], Tdc, Tcdx, notif_da_135,,, delayed_CLK, delayed_DA[135] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_CLK, delayed_DA[136] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[136], Tdc, Tcdx, notif_da_136,,, delayed_CLK, delayed_DA[136] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_CLK, delayed_DA[137] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[137], Tdc, Tcdx, notif_da_137,,, delayed_CLK, delayed_DA[137] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_CLK, delayed_DA[138] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[138], Tdc, Tcdx, notif_da_138,,, delayed_CLK, delayed_DA[138] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_CLK, delayed_DA[139] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[139], Tdc, Tcdx, notif_da_139,,, delayed_CLK, delayed_DA[139] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_CLK, delayed_DA[140] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[140], Tdc, Tcdx, notif_da_140,,, delayed_CLK, delayed_DA[140] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_CLK, delayed_DA[141] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[141], Tdc, Tcdx, notif_da_141,,, delayed_CLK, delayed_DA[141] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_CLK, delayed_DA[142] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[142], Tdc, Tcdx, notif_da_142,,, delayed_CLK, delayed_DA[142] );
  $setuphold (posedge CLK  &&& ENDA, posedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_CLK, delayed_DA[143] );
  $setuphold (posedge CLK  &&& ENDA, negedge DA[143], Tdc, Tcdx, notif_da_143,,, delayed_CLK, delayed_DA[143] );
  $setuphold (posedge CLK  &&& ENWEA, posedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLK, delayed_WEA );
  $setuphold (posedge CLK  &&& ENWEA, negedge WEA,Twc, Tcwx, notif_wea,,, delayed_CLK, delayed_WEA );
  $setuphold (posedge CLK  &&& ENMEA, posedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLK, delayed_MEA );
  $setuphold (posedge CLK  &&& ENMEA, negedge MEA,Tmc, Tcmx, notif_mea,,, delayed_CLK, delayed_MEA );
  $setuphold (posedge RSCLK  &&& ENRSCIN, posedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCIN, negedge RSCIN,Trinc, Tcrinx, notif_rscin,,, delayed_RSCLK, delayed_RSCIN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, posedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK  &&& ENRSCEN, negedge RSCEN,Trenc, Tcrenx, notif_rscen,,, delayed_RSCLK, delayed_RSCEN );
  $setuphold (posedge RSCLK , posedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge RSCLK , negedge FISO,Trenc, Tcrenx, notif_fiso,,, delayed_RSCLK, delayed_FISO );
  $setuphold (posedge CLK  &&& ENRME, posedge RME,Trmec, Tcrmex, notif_rme,,, delayed_CLK, delayed_RME );
  $setuphold (posedge CLK  &&& ENRME, negedge RME,Trmec, Tcrmex, notif_rme,,, delayed_CLK, delayed_RME );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[0], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[0] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[0], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[0] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[1], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[1] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[1], Trmc, Tcrmx, notif_rm,,, delayed_CLK, delayed_RM[1] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[2], Trm2c, Tcrm2x, notif_rm,,, delayed_CLK, delayed_RM[2] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[2], Trm2c, Tcrm2x, notif_rm,,, delayed_CLK, delayed_RM[2] );
  $setuphold (posedge CLK  &&& ENRM, posedge RM[3], Trm3c, Tcrm3x, notif_rm,,, delayed_CLK, delayed_RM[3] );
  $setuphold (posedge CLK  &&& ENRM, negedge RM[3], Trm3c, Tcrm3x, notif_rm,,, delayed_CLK, delayed_RM[3] );
  $setuphold (posedge CLK  &&& ENTEST_RNM, posedge TEST_RNM,Ttrnmc, Tctrnmx, notif_test_rnm,,, delayed_CLK, delayed_TEST_RNM );
  $setuphold (posedge CLK  &&& ENTEST_RNM, negedge TEST_RNM,Ttrnmc, Tctrnmx, notif_test_rnm,,, delayed_CLK, delayed_TEST_RNM );
  $setuphold (posedge CLK  &&& ENLS, posedge LS,Trlsc, Tlsx, notif_ls,,, delayed_CLK, delayed_LS );
  $setuphold (posedge CLK  &&& ENLS, negedge LS,Tflsc, Tlsx, notif_ls,,, delayed_CLK, delayed_LS );
  $setuphold (posedge CLK  &&& ENBC1, posedge BC1,Tbc1c, 0, notif_bc1,,, delayed_CLK, delayed_BC1 );
  $setuphold (posedge CLK  &&& ENBC1, negedge BC1,Tbc1c, 0, notif_bc1,,, delayed_CLK, delayed_BC1 );
  $setuphold (posedge CLK  &&& ENBC2, posedge BC2,Tbc2c, 0, notif_bc2,,, delayed_CLK, delayed_BC2 );
  $setuphold (posedge CLK  &&& ENBC2, negedge BC2,Tbc2c, 0, notif_bc2,,, delayed_CLK, delayed_BC2 );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[0] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[0], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[0] );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[1] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[1], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[1] );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[2] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[2], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[2] );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[3] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[3], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[3] );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[4] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[4], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[4] );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[5] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[5], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[5] );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[6] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[6], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[6] );
  $setuphold (posedge CLK  &&& ENADRB, posedge ADRB[7], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[7] );
  $setuphold (posedge CLK  &&& ENADRB, negedge ADRB[7], Tac, Tcax, notif_adrb,,, delayed_CLK, delayed_ADRB[7] );
  $setuphold (posedge CLK  &&& ENMEB, posedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLK, delayed_MEB );
  $setuphold (posedge CLK  &&& ENMEB, negedge MEB,Tmc, Tcmx, notif_meb,,, delayed_CLK, delayed_MEB );
  $setuphold (posedge CLK  &&& ENTEST1, posedge TEST1,TT1C, 0, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (posedge CLK  &&& ENTEST1, negedge TEST1,TT1C, 0, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (negedge CLK  &&& ENTEST1, posedge TEST1,0, TCT1X, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (negedge CLK  &&& ENTEST1, negedge TEST1,0, TCT1X, notif_test1,,, delayed_CLK, delayed_TEST1 );
  $setuphold (posedge CLK  &&& ENTESTRWM, posedge TESTRWM,Ttrwmc, 0, notif_testrwm,,, delayed_CLK, delayed_TESTRWM );
  $setuphold (posedge CLK  &&& ENTESTRWM, negedge TESTRWM,Ttrwmc, 0, notif_testrwm,,, delayed_CLK, delayed_TESTRWM );
  $setuphold (negedge CLK  &&& ENTESTRWM, posedge TESTRWM,0, Tctrwmx, notif_testrwm,,, delayed_CLK, delayed_TESTRWM );
  $setuphold (negedge CLK  &&& ENTESTRWM, negedge TESTRWM,0, Tctrwmx, notif_testrwm,,, delayed_CLK, delayed_TESTRWM );
  $recrem ( negedge RSCEN,posedge CLK  &&& ENRSCENCLKrec, Trenclkrec, Trenclkrec, notif_rscen_CLK_rise_fall_rec,,, delayed_RSCEN, delayed_CLK);
  $recrem ( negedge RSCRST,posedge RSCLK  &&& ENRSCRSTRSCLKrec, Trrstrclkrec, Trrstrclkrec, notif_rscrst_RSCLK_rise_fall_rec,,, delayed_RSCRST, delayed_RSCLK);
  $recrem ( negedge RSCRST,posedge CLK  &&& ENRSCRSTCLKrec, Trrstclkrec, Trrstclkrec, notif_rscrst_CLK_rise_fall_rec,,, delayed_RSCRST, delayed_CLK);
  $recrem ( posedge RSCLK,posedge CLK  &&& ENRSCLKCLKrec, Trclkclkrec, Trclkclkrec, notif_rsclk_CLK_rise_rise_rec,,, delayed_RSCLK, delayed_CLK);

endspecify
`endif // endif of VIRAGE_FAST_VERILOG


wire test1_ls_pwr, mux_ls;

assign test1_ls_pwr = ((uut.TEST1latched === 1'b1 && uut.MEAlatched === 1'b1 && uut.WEAlatched === 1'b1) || (uut.MEBlatched === 1'b1)) && LS_buf;

assign mux_ls = (test1_ls_pwr === 1'b1) ? LS_old : ((test1_ls_pwr === 1'b0) ? LS_buf : 1'bX);


// Corrupt memory if BC1 or BC2 assert during Light Sleep Mode or Deep Sleep Mode
always @(BC1_buf or BC2_buf)
begin
  if (LS_buf !== 1'b0)
  begin
    uut.corrupt_all_loc(`True);
    if( (MES_CNTRL=="ON"|| MES_CNTRL=="WARN") && $realtime != 0 && uut.mes_all_valid)
    begin
      $display("\n%m<<VIRL_MEM_WARNING: Assertion on BC1/BC2 pin during Light Sleep Mode>>(time %0t)\n\n", $time);
    end
  end
  if (BC1_buf === 1'bX)
  begin
    uut.report_unknown("BC1");
    uut.corrupt_all_loc(`True);
  end
  if (BC2_buf === 1'bX)
  begin
    uut.report_unknown("BC2");
    uut.corrupt_all_loc(`True);
  end
end

wire mem_dis_active;

assign mem_dis_active = LS_buf;
always @(posedge mem_dis_active)
begin
  uut.flag_testrwm_active = 1'b0;
end



`ifdef VIRAGE_FAST_VERILOG
generic_behav_RF_2PUHD_256x144 #( PreloadFilename, MES_CNTRL, MemFault_Inj) uut (  .RSCOUT(RSCOUT_buf), .QB (QB_buf), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLK(CLK_mem), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .RME(RME_buf), .RM (RM_int), .TEST_RNM(TEST_RNM_buf), .LS(LS_old), .BC1(BC1_buf), .BC2(BC2_buf), .ADRB (ADRB_pre), .MEB(MEB_pre), .TEST1(TEST1_buf), .TESTRWM(TESTRWM_buf) );
`else
generic_behav_RF_2PUHD_256x144 #( PreloadFilename, MES_CNTRL, MemFault_Inj) uut (  .RSCOUT(RSCOUT_buf), .QB (QB_buf), .ADRA (ADRA_pre), .DA (DA_pre), .WEA(WEA_pre), .MEA(MEA_pre), .CLK(CLK_mem), .RSCIN(RSCIN_fiso_buf), .RSCEN(RSCEN_fiso_pre), .RSCRST(RSCRST_fiso_buf), .RSCLK(RSCLK_fiso_buf), .FISO(FISO_buf), .RME(RME_buf), .RM (RM_int), .TEST_RNM(TEST_RNM_buf), .LS(LS_old), .BC1(BC1_buf), .BC2(BC2_buf), .ADRB (ADRB_pre), .MEB(MEB_pre), .TEST1(TEST1_buf), .TESTRWM(TESTRWM_buf),.notif_adra(notif_adra), .notif_da(notif_da), .notif_wea(notif_wea), .notif_mea(notif_mea), .notif_clk(notif_clk), .notif_clkp(notif_clkp), .notif_rscin(notif_rscin), .notif_rscen(notif_rscen), .notif_rscen_CLK_rise_fall_rec(notif_rscen_CLK_rise_fall_rec), .notif_rscrst(notif_rscrst), .notif_rscrst_RSCLK_rise_fall_rec(notif_rscrst_RSCLK_rise_fall_rec), .notif_rscrst_CLK_rise_fall_rec(notif_rscrst_CLK_rise_fall_rec), .notif_rsclk(notif_rsclk), .notif_rsclk_CLK_rise_rise_rec(notif_rsclk_CLK_rise_rise_rec), .notif_fiso(notif_fiso), 
.notif_rme(notif_rme), .notif_rm(notif_rm), .notif_test_rnm(notif_test_rnm), .notif_ls(notif_ls), .notif_bc1(notif_bc1), .notif_bc2(notif_bc2), .notif_adrb(notif_adrb), .notif_meb(notif_meb), .notif_test1(notif_test1), .notif_testrwm(notif_testrwm) );
`endif // endif of VIRAGE_FAST_VERILOG


assign RM_int = ((RME_buf===1'b1)?RM_buf[2:0]:((RME_buf===1'b0)?3'b010:3'bx));

wire llsb;
assign llsb = (!(mux_ls) || RM_buf[3]);




always @(RM_buf[3])
begin
  if(RM_buf[3] === 1'bx )
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && uut.mes_all_valid)
    begin
      $display("<<VIRL_MEM_WARNING:RM[3] is unknown>> at time=%t; instance=%m (RF_2PUHD_256x144_core)",$realtime);
    end
  end
end
initial
begin
disp_LS_msgA = 1'b1;
end


// Display the warning when LS is 1.

always @ ( negedge LS_buf )
begin
  disp_LS_msgA = 1'b1;
  disp_LS_msgA_old = 1'b1;
end

always @ (posedge LS_buf or posedge CLK_buf)
begin : blk_ls_0
  if (LS_buf === 1'b1 && (MEA_pre !== 1'b0 || MEB_pre !== 1'b0))
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN") && disp_LS_msgA === 1'b1 )
    begin
      $display("<<VIRL_MEM_WARNING:  No Operation as Memory is in Light Sleep mode.>> time=%0t instance=%m", $time);
      disp_LS_msgA = 1'b0;
    end
  end // if LS = 1
end // end of always block blk_ls_0

assign LS_old = (CLK_buf === 1'b0) ? LS_buf : LS_old;
assign CLK_mem = CLK_buf;


`ifdef VIRAGE_FAST_VERILOG
`else
assign notif_da = {notif_da_143, notif_da_142, notif_da_141, notif_da_140, notif_da_139, notif_da_138, notif_da_137, notif_da_136, notif_da_135, notif_da_134, notif_da_133, notif_da_132, notif_da_131, notif_da_130, notif_da_129, notif_da_128, notif_da_127, notif_da_126, notif_da_125, notif_da_124, notif_da_123, notif_da_122, notif_da_121, notif_da_120, notif_da_119, notif_da_118, notif_da_117, notif_da_116, notif_da_115, notif_da_114, notif_da_113, notif_da_112, notif_da_111, notif_da_110, notif_da_109, notif_da_108, notif_da_107, notif_da_106, notif_da_105, notif_da_104, notif_da_103, notif_da_102, notif_da_101, notif_da_100, notif_da_99, notif_da_98, notif_da_97, notif_da_96, notif_da_95, notif_da_94, notif_da_93, notif_da_92, notif_da_91, notif_da_90, notif_da_89, notif_da_88, notif_da_87, notif_da_86, notif_da_85, notif_da_84, notif_da_83, notif_da_82, notif_da_81, notif_da_80, notif_da_79, notif_da_78, notif_da_77, notif_da_76, notif_da_75, notif_da_74, notif_da_73, notif_da_72, notif_da_71, notif_da_70, 
notif_da_69, notif_da_68, notif_da_67, notif_da_66, notif_da_65, notif_da_64, notif_da_63, notif_da_62, notif_da_61, notif_da_60, notif_da_59, notif_da_58, notif_da_57, notif_da_56, notif_da_55, notif_da_54, notif_da_53, notif_da_52, notif_da_51, notif_da_50, notif_da_49, notif_da_48, notif_da_47, notif_da_46, notif_da_45, notif_da_44, notif_da_43, notif_da_42, notif_da_41, notif_da_40, notif_da_39, notif_da_38, notif_da_37, notif_da_36, notif_da_35, notif_da_34, notif_da_33, notif_da_32, notif_da_31, notif_da_30, notif_da_29, notif_da_28, notif_da_27, notif_da_26, notif_da_25, notif_da_24, notif_da_23, notif_da_22, notif_da_21, notif_da_20, notif_da_19, notif_da_18, notif_da_17, notif_da_16, notif_da_15, notif_da_14, notif_da_13, notif_da_12, notif_da_11, notif_da_10, notif_da_9, notif_da_8, notif_da_7, notif_da_6, notif_da_5, notif_da_4, notif_da_3, notif_da_2, notif_da_1, notif_da_0};
`endif // endif of VIRAGE_FAST_VERILOG


always @(posedge CLK_buf)
begin
  if (LS_buf === 1'b1 && MEA_pre === 1'b1 && WEA_pre === 1'b1 && (TEST1_buf === 1'b1 || TESTRWM_buf === 1'b1))
  begin
    uut.corrupt_all_loc(`True);
  end
  if (LS_buf === 1'b1 && MEB_pre === 1'b1 && (TEST1_buf === 1'b1 || TESTRWM_buf === 1'b1))
  begin
    uut.flagb_read_ok = `False;
    -> uut.ev_read_out_b_port;
    uut.QB_local_tmp = 144'bX;
  end
end
always @ (TEST1_buf)
begin
 if ( $realtime != 0)
 begin
  #0.0;                // let flag set first at negedge
  if (CLK_buf === 1'b1 )
  begin
    uut.flag_testrwm_active = 1'b0;
    if (MEB_pre !== 1'b0)
    begin
      uut.QB_local_tmp = 144'bX;
    end
    #0;
    if (MEA_pre !== 1'b0 && WEA_pre !== 1'b0)
    begin
      uut.corrupt_all_loc(`True);
    end
  end
 end
end
always @ (TESTRWM_buf)
begin
 if ( $realtime != 0)
 begin
  #0.0;                // let flag set first at negedge
  if (CLK_buf === 1'b1 )
  begin
    uut.flag_testrwm_active = 1'b0;
    if (MEB_pre !== 1'b0)
    begin
      uut.QB_local_tmp = 144'bX;
    end
    #0;
    if (MEA_pre !== 1'b0 && WEA_pre !== 1'b0)
    begin
      uut.corrupt_all_loc(`True);
    end
  end
 end
end

endmodule
`endcelldefine 
`ifdef verifault 
`disable_portfaults 
`nosuppress_faults 
`endif 


`ifdef VIRAGE_FAST_VERILOG
module generic_behav_RF_2PUHD_256x144 (  RSCOUT, QB, ADRA, DA, WEA, MEA, CLK, RSCIN, RSCEN, RSCRST, RSCLK, FISO, RME, RM, TEST_RNM, LS, BC1, BC2, ADRB, MEB, TEST1, TESTRWM );
`else
module generic_behav_RF_2PUHD_256x144 (  RSCOUT, QB, ADRA, DA, WEA, MEA, CLK, RSCIN, RSCEN, RSCRST, RSCLK, FISO, RME, RM, TEST_RNM, LS, BC1, BC2, ADRB, MEB, TEST1, TESTRWM,notif_adra, notif_da, notif_wea, notif_mea, notif_clk, notif_clkp, notif_rscin, notif_rscen, notif_rscen_CLK_rise_fall_rec, notif_rscrst, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLK_rise_fall_rec, notif_rsclk, notif_rsclk_CLK_rise_rise_rec, notif_fiso, notif_rme, notif_rm, notif_test_rnm, notif_ls, notif_bc1, notif_bc2, notif_adrb, notif_meb, notif_test1, notif_testrwm );
`endif // endif of VIRAGE_FAST_VERILOG

parameter PreloadFilename = "init.file";
parameter MES_CNTRL = "ON";
parameter MemFault_Inj = 0;
parameter words = 256, bits = 144, addrbits = 8, O_delay=0.0, timingmode = 1, rmbits=3;

output RSCOUT;
output [bits-1:0] QB;
input [addrbits-1:0] ADRA;
input [bits-1:0] DA;
input WEA;
input MEA;
input CLK;
input RSCIN;
input RSCEN;
input RSCRST;
input RSCLK;
input FISO;
input RME;
input [rmbits-1:0] RM;
input TEST_RNM;
input LS;
input BC1;
input BC2;
input [addrbits-1:0] ADRB;
input MEB;
input TEST1;
input TESTRWM;

`ifdef VIRAGE_FAST_VERILOG
`else
input [143:0] notif_da;
input notif_adra, notif_wea, notif_mea, notif_clk, notif_clkp, notif_rscin, notif_rscen, notif_rscen_CLK_rise_fall_rec, notif_rscrst, notif_rscrst_RSCLK_rise_fall_rec, notif_rscrst_CLK_rise_fall_rec, notif_rsclk, notif_rsclk_CLK_rise_rise_rec, notif_fiso, notif_rme, notif_rm, notif_test_rnm, notif_ls, notif_bc1, notif_bc2, notif_adrb, notif_meb, notif_test1, notif_testrwm;

`endif // endif of VIRAGE_FAST_VERILOG

parameter DataX = { bits { 1'bx } };
parameter DataZ = { bits { 1'bz } };

reg RSCOUT;
wire RSCOUT_tmp;
reg  [bits-1:0]  QB;
reg [addrbits-1:0] ADRAlatched;

reg [addrbits-1:0] ADRA_old;

reg [bits-1:0] DAlatched;

reg [bits-1:0] DA_old;

reg WEAlatched;
reg WEA_old;
reg MEAlatched;
reg MEA_old;
reg RSCENlatched;
reg TEST_RNMlatched;
reg TEST_RNM_old;
reg [addrbits-1:0] ADRBlatched;

reg [addrbits-1:0] ADRB_old;

reg MEBlatched;
reg MEB_old;
reg TEST1latched;
reg TESTRWMlatched;
reg TEST1_old;
reg  TESTRWM_old;
reg disp_RSCLK_msg;
reg  left_col_out_range;
reg  right_col_out_range;
integer bit_cnt;
reg flaga_clear_scan_reg;
reg flaga_shift_ok;
reg RST_check ;
reg RST_tri ;
reg [17:0] scan_reg;
reg RSCOUT_local;
reg
  flaga_read_ok,
  flaga_we_ok,
  flaga_d_ok,
  flaga_rm_ok,
  flaga_adr_ok,
  flaga_range_ok;
reg     flaga_clk_valid;
reg     flaga_viol;
event   ev_read_out_b_port;
event   ev_RST_out_a_port;
real CLK_TIME;
reg  MEA_chk;
reg diff_me_tch, diff_me_tcc;
real CLKA_T;
reg
  flagb_read_ok,
  flagb_rm_ok,
  flagb_adr_ok,
  flagb_range_ok;
reg     flagb_clk_valid;
reg     flagb_viol;
reg  MEB_chk;
real CLKB_T;
wire   [143:0]  QB_temp;
reg    [143:0]  QB_local_tmp;
reg    [143:0]  memdata;
reg mes_all_valid;
integer i;
reg [295:0] mem_core_array [0:127];
reg [143:0] mem_core_array_read [0:255];
reg [295:0] mem_core_rowA;
reg [6:0] X_addressA;
reg [0:0] Y_addressA;
parameter MaxCol =296;
parameter MaxRow = 128 ;
integer tempcnt;
reg [MaxCol-1:0]mem_fault_array_XOR[0:MaxRow-1];
reg  [MaxCol-1:0] mem_fault_array_sa0 [0:MaxRow -1];
reg  [MaxCol-1:0] mem_fault_array_sa1 [0:MaxRow -1];
reg faultinj_en;
initial
begin : reinit_fault_blk
    faultinj_en = 1'b0;
`ifdef MEMFAULTINJ
    faultinj_en = 1'b1;
`else
    if (MemFault_Inj == 1)
      faultinj_en = 1'b1;
`endif
  for (tempcnt=0; tempcnt<MaxRow; tempcnt=tempcnt+1)
  begin
    if (faultinj_en == 1)
      mem_fault_array_XOR[tempcnt] = 0;
    else
    begin
      mem_fault_array_sa0[tempcnt]={MaxCol{1'b1}};
      mem_fault_array_sa1[tempcnt]=0;
    end
  end
  if (faultinj_en == 1)
  begin
       if ($test$plusargs("star_error_fail")) 
       begin
         mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4) | (1'b1 << 8);
       end // if of +star_error_fail is used
       else if ($test$plusargs("star_error_a")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 4) | (1'b1 << 152); 
       end // if of +star_error_a is used 
       else if ($test$plusargs("star_error_b")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 76) | (1'b1 << 224); 
       end // if of +star_error_b is used 
       else if ($test$plusargs("star_error_c")) 
       begin 
         mem_fault_array_XOR[0] = (1'b1 << 147) | (1'b1 << 295); 
       end // if of +star_error_c is used 

       else if ($test$plusargs("star_error")) 
       begin
         mem_fault_array_XOR[0] = (1'b1 << (MaxCol-1)) | (1'b1 << 4);
       end // if of +star_error is used
    end // endif of faultinj_en == 1
end // end of initial block
reg read_write_flag;
reg flag_read_before_crpt;
reg [295:0] mem_core_rowB;
reg [295:0] mem_core_row_tempB;
reg [295:0] mem_core_read_before_write;
reg [6:0] X_addressB;
reg [0:0] Y_addressB;
reg flag_testrwm_active;


// Checks whether address input is Valid; 1-bit return value
function is_adr_Valid;  
input [addrbits-1:0] addr_to_check;
reg     ret_value;
begin
  ret_value = `True;
  if ((^addr_to_check) === 1'bx)
  begin
    ret_value = `False;
  end // if addr_to_check is X
  is_adr_Valid = ret_value;
end
endfunction

// -------------------------------------------------------------------
// Common tasks
// -------------------------------------------------------------------

// Task to report unknown messages
task report_unknown;
input [8*8:1] signal;
begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid )
    begin
      $display("<<VIRL_MEM_ERR:%0s unknown>> at time=%t; instance=%m (RAMS1H)",signal,$realtime);
    end
end
endtask



// Calculate Column position
task get_column_position;
output [8:0] column_position;
input Y_adr;
input [7:0] bit_index;
reg [5:0] blk_right;
reg [5:0] blk_left;
begin
  if ( ^scan_reg === 1'bX )
  begin
    left_col_out_range = 1'bx;
    right_col_out_range = 1'bx;
    if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m<<VIRL_MEM_ERR: INVALID RECONFIG REGISTER COLUMN>>(time %0t)", $time);
    end
  end
  if ( bit_index > 71)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      if (scan_reg[10:9] === 2'b0)
      begin
        if ({scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 6'b100011 )
        begin
          if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
          begin
           $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
          end
          right_col_out_range = 1'b1;
        end // if of {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 6'b100011
        else
        begin
          blk_right = (((bit_index - 72)/2) + (Y_adr/2));
          if (blk_right <= {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]})
          begin
            column_position = (Y_adr + ((bit_index * 2) + 4));
          end // if of blk_right <= {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
          else
          begin
            column_position = (Y_adr + ((bit_index * 2) + 8));
            //$display("\n%m column_position=%b,Y_adr=%b,bit_index=%b,scan_reg=%b at %0t\n\n", column_position, Y_adr, bit_index, scan_reg, $time);
          end // else of if blk_right <= {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]}
        end // else of if {scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]} > 6'b100011
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR: INVALID ADDRESS IN RIGHT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        right_col_out_range = 1'b1;
      end // else of if unused scan register bits are zero
    end // if of Scan register enable bit is 1
    else
    begin
      column_position = (Y_adr + ((bit_index * 2) + 8));
    end // else of if Scan register enable bit is 1
  end // if of bit is on right side
  else
  begin
    if (scan_reg[8] === 1'b1)
    begin
      if (scan_reg[1:0] === 2'b0)
      begin
        if ({scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 6'b100011 )
        begin
          if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
          begin
           $display("\n%m<<VIRL_MEM_ERR:OUT OF RANGE BITS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
          end
          left_col_out_range = 1'b1;
        end // if of {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 6'b100011
        else
        begin
          blk_left = ((bit_index/2) + (Y_adr/2));
          if (blk_left > {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]})
          begin
            column_position = (Y_adr + ((bit_index * 2) + 4));
          end // if of blk_left > {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
          else
          begin
            column_position = (Y_adr + (bit_index * 2));
          end // else of if blk_left > {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]}
        end // else of if {scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]} > 6'b100011
      end // if of unused scan register bits are zero
      else
      begin
        if ((MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR:INVALID ADDRESS IN LEFT SIDE SCANCHAIN COLUMN>>", $realtime);
        end
        left_col_out_range = 1'b1;
      end // else of is unused scan register bits are zero
    end // if of Scan register enable bit is enabled
    else
    begin
      column_position = (Y_adr + ((bit_index * 2) + 4));
    end // else of if Scan register enable bit is enabled
  end // else of if bit is on right side
end
endtask

task write_mem_red ;
input [7 : 0] address;
input [143 : 0] data;
reg [6:0] X_adr;
reg Y_adr;
reg [8:0] col_address;
reg [295:0] memrow;
reg [295:0] tmp_memrow;
begin
  X_adr = address[7:1];
  Y_adr = address[0];
  if (address < 256)
  begin
    tmp_memrow = mem_core_array[X_adr];
    get_column_position (col_address, Y_adr, 0);
    get_column_position (col_address, Y_adr, 143);
    if (left_col_out_range !== 1'bx && right_col_out_range !== 1'bx)
    begin
//Left
      memrow[147:0] = tmp_memrow[147:0];
      if (!left_col_out_range)
      begin
        for (bit_cnt = 0; bit_cnt < 72; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = data[bit_cnt]; 
        end
      end
      else if (left_col_out_range)
      begin
        memrow[147:0] = {148{1'bx}};
      end
//Right
      memrow[295:148] = tmp_memrow[295:148];
      if (!right_col_out_range)
      begin
        for (bit_cnt = 72; bit_cnt < 144; bit_cnt = bit_cnt +1)
        begin
          get_column_position (col_address, Y_adr, bit_cnt);
          memrow[col_address] = data[bit_cnt]; 
        end
      end
      else if (right_col_out_range)
      begin
        memrow[295:148] = {148{1'bx}};
      end
    end
    else
    begin
      corrupt_all_loc(`True);
      memrow = 296'bX;
    end
    mem_core_array[X_adr] = memrow;
    corrupt_red(address);
  end // end of if address with in range
end
endtask

// Corrupt Redundant/Unused columns
task corrupt_red;
input [7 : 0] address;
reg[8:0] column_to_corrupt;
reg[295:0] memrow;
reg[7:0] bit_index;
reg [6:0] X_adr;
reg Y_adr;
reg [5:0] faulty_blk_right;
reg [5:0] faulty_blk_left;
integer j;
begin
  X_adr = address[7:1];
  Y_adr = address[0];
  memrow = mem_core_array[X_adr];
  faulty_blk_right =  ({scan_reg[11],scan_reg[12],scan_reg[13],scan_reg[14],scan_reg[15],scan_reg[16]});
  faulty_blk_left  =  ({scan_reg[2],scan_reg[3],scan_reg[4],scan_reg[5],scan_reg[6],scan_reg[7]});
  if (right_col_out_range === 1'b0)
  begin
    if ( scan_reg[17] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_right+38)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of scan_reg[17] = 1
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(37)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if scan_reg[17] = 1
  end
  else
  begin
    memrow[295:148] = {148{1'bx}};
  end
  if (left_col_out_range === 1'b0)
  begin
    if ( scan_reg[8] === 1'b1 )
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = ((4*(faulty_blk_left+1)) + j);
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // if of scan_reg[8] = 1
    else
    begin
      for ( j = 0; j < 4 ; j = j +1 )
      begin
        column_to_corrupt = j;
        memrow[column_to_corrupt] = 1'bx;
      end // end of for j loop
    end // else of if scan_reg[8] = 1
  end
  else
  begin
    memrow[147:0] = {148{1'bx}};
  end
  mem_core_array[X_adr] = memrow;
end
endtask


//Calculate Row Address
task get_X_Y_adr;
output [6:0] X_adr;
output Y_adr;
input [7:0] Adr;
begin
  X_adr = Adr[7:1];
  Y_adr = Adr[0];
end
endtask

task read_mem_red ;
output [143 : 0] memdata;
input [7 : 0] address;
reg [6:0] X_adr;
reg Y_adr;
reg [8:0] col_address;
reg [295:0] memrow;
begin
  X_adr = address[7:1];
  Y_adr = address[0];
   if (read_write_flag === 1'b1)
     if (faultinj_en == 1)
       memrow  = mem_core_row_tempB^mem_fault_array_XOR[X_adr];
     else
     begin
       memrow = mem_core_row_tempB & mem_fault_array_sa0[X_adr];
       memrow = memrow | mem_fault_array_sa1[X_adr];
     end
   else
     if (faultinj_en == 1)
       memrow = mem_core_array[X_adr]^mem_fault_array_XOR[X_adr];
     else
     begin
       memrow = mem_core_array[X_adr] & mem_fault_array_sa0[X_adr];
       memrow = memrow | mem_fault_array_sa1[X_adr];
     end
   get_column_position (col_address, Y_adr, 0);
   if ( left_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 0; bit_cnt < 72; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[71:0] = {72{1'bx}};
   end
   get_column_position (col_address, Y_adr, 72);
   if ( right_col_out_range == 1'b0 )
   begin
     for (bit_cnt = 72; bit_cnt < 144; bit_cnt = bit_cnt +1)
     begin
       get_column_position (col_address, Y_adr, bit_cnt);
       memdata[bit_cnt] = memrow[col_address];
     end
   end
   else
   begin
     memdata[143:72] = {72{1'bx}};
   end
end
endtask


// Corrupt Current Location
task corrupt_cur_loc;
input[7:0] Adr_to_corrupt;
integer cnt;
begin
  if (is_adr_Valid (Adr_to_corrupt))
  begin
      write_mem_red(Adr_to_corrupt,DataX);
  end // if of is_adr_Valid (Adr_to_corrupt)
  else
  begin
      corrupt_all_loc(`True);
  end // else of if is_adr_Valid (Adr_to_corrupt)
  flag_testrwm_active = 1'b0;
end
endtask

// Corrupt Entire memory; Do not corrupt entire memory if address is out of range
// during Write; For all other cases, if flag_range_ok is true, corrupt entire memory
task corrupt_all_loc;
input flag_range_ok;
integer row_index;
begin
  if( flag_range_ok == `True)
  begin
    for( row_index = 0; row_index < 128 ; row_index = row_index + 1)
    begin
      mem_core_array[row_index] = 296'bx;
    end // end of for row_index loop
    mem_core_row_tempB = 296'bx;
  end // if of flag_range_ok is true
  flag_testrwm_active = 1'b0;
end
endtask

// Load memory with Data from a file(PreloadFilename)
task load_mem;
reg[ 143:0] mem_array [0:255];
reg[ 143:0] mem_word;
reg[6:0] X_adr;
reg[0:0] Y_adr;
reg[295:0] mem_row;
integer adr_cnt;
integer start_adr_cnt;
integer num_adr_cnt;
integer i, status, status1;
reg [143:0] init_value;
begin
  if ($test$plusargs("init_mem_data"))
  begin
    status = $value$plusargs("init_mem_data=%d",init_value);
    if ($value$plusargs("init_mem_start_adr=%d",start_adr_cnt))
    begin
      num_adr_cnt = 1;
      if (init_value === 144'b1) begin
        init_value = {144{1'b1}};
      end
      status1 = $value$plusargs("num_of_locations=%d",num_adr_cnt);
      if (num_adr_cnt < 1) begin
        $display("<<VIRL_MEM_WARNING>> \"num_of_locations=%d\" is wrong, setting it to 1 instance=%m ",num_adr_cnt);
        num_adr_cnt = 1;
      end
      if ((start_adr_cnt + num_adr_cnt -1) > 255) begin
        $display("<<VIRL_MEM_WARNING>> \"init_mem_start_adr=%d + num_of_locations=%d\" exceed maximum address (NW-1)=255 instance=%m ",start_adr_cnt,num_adr_cnt);
      end
      if (^init_value === 1'bX)
      begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = adr_cnt;
        end
      end
      else begin
        for( adr_cnt = start_adr_cnt; adr_cnt < (start_adr_cnt + num_adr_cnt) ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = init_value;
        end
      end
    end
    else begin
      if (init_value === 144'b0 || init_value === 144'b1)
      begin
        for( adr_cnt = 0; adr_cnt < 256 ; adr_cnt = adr_cnt + 1)
        begin
          mem_array[adr_cnt] = {144{init_value[0]}};
        end
      end
      else
      begin
        if (^init_value !== 1'bX)
        begin
          for( adr_cnt = 0; adr_cnt < 256 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = init_value;
          end
        end
        else
        begin
          i = 0;
          for( adr_cnt = 0; adr_cnt < 256 ; adr_cnt = adr_cnt + 1)
          begin
            mem_array[adr_cnt] = i;
            i = i + 1;
            if (i > 144'b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111) i = 0;
          end
        end
      end
    end
  end
  else
  begin
    $readmemh(PreloadFilename, mem_array);
  end
  for( adr_cnt = 0; adr_cnt < 256 ; adr_cnt = adr_cnt + 1)
  begin
    mem_word = mem_array[adr_cnt];
    write_mem_red(adr_cnt,mem_word);
    if (!mes_all_valid )
    begin
      mes_all_valid = 1'b1;
    end // if of mes_all_valid is not true
  end // end of for adr_cnt loop
end
endtask

// Store the memory contents into array mem_core_array_read (NWxNB)
task store_mem;
reg[ 143:0] mem_word;
integer adr_cnt;
begin
  for( adr_cnt = 0; adr_cnt < 256 ; adr_cnt = adr_cnt + 1)
  begin
    read_mem_red(mem_word,adr_cnt);
    mem_core_array_read[adr_cnt] = mem_word;
  end // end of for adr_cnt loop
end
endtask




// Perform Sanity Check on Port A, Corrupt memory if required

task checkSanityOnAport;
 begin

  #0;                // let CLOCK and NOTIFIER stuff execute first
  case ( {flaga_adr_ok, flaga_we_ok, flaga_d_ok} ) // only 1 and 0
    3'b111   : ;                                                // everything ok!!!
    3'b101,
    3'b100   : corrupt_cur_loc(ADRAlatched);          // WE is unstable
    3'b110   : if (WEAlatched !== 1'b0)
                 corrupt_cur_loc(ADRAlatched);         // Data is unstable
    3'b000,
    3'b001   : corrupt_all_loc(`True);            // ADR and WE unstable
    3'b010,
    3'b011   :   corrupt_all_loc(flaga_range_ok);
  endcase
    flaga_adr_ok = `True;
    flaga_we_ok  = `True;
    flaga_d_ok  = `True;
 end
endtask // end of task checkSanityOnAport

// PORT A FUNCTIONALITY (Handle violation behavior)

reg INTERNAL_RESET; // For Internally resetting the memory(negedge of rscrst)

initial
begin : reinit_uut_blkA
  diff_me_tch = 1'b0;
  diff_me_tcc = 1'b0;
  left_col_out_range = 1'b0;
  right_col_out_range = 1'b0;
  flaga_adr_ok  = `True;
  flaga_range_ok = `True;
  flaga_we_ok   = `True;
  flaga_d_ok    = `True;
  flaga_read_ok = `True;
  flaga_rm_ok = `True;
  flaga_viol = `False;
  flaga_clk_valid = `True;
  flag_read_before_crpt = 1'b0;
  flaga_shift_ok = `True;
  flaga_clear_scan_reg = `False;
  `ifdef VIRAGE_IGNORE_RESET
    #1 INTERNAL_RESET = 1'b1;
  `endif // endif of VIRAGE_IGNORE_RESET
end // end of initial block

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_dont_reinit *)
`endif
initial
begin
  QB_local_tmp <= 144'bx;
  disp_RSCLK_msg = 1'b1;
  mes_all_valid = 1'b0;
  RST_tri = 1'b0;
  RST_check = 1'b0;
end

// PORT B FUNCTIONALITY (Handle violation behavior)


initial
begin : reinit_uut_blkB
  diff_me_tch = 1'b0;
  diff_me_tcc = 1'b0;
  flagb_adr_ok  = `True;
  flagb_range_ok = `True;
  flagb_read_ok = `True;
  flagb_rm_ok = `True;
  flagb_viol = `False;
  flagb_clk_valid = `True;
  flag_read_before_crpt = 1'b0;
end // end of initial block


// For Zerohold of ADRA pin
always @( negedge CLK or ADRA )
begin : blk_addrhold_0
  if ( CLK == 1'b0 )
  begin
    ADRA_old <= ADRA;
  end // if of CLK = 0
end // end of always block blk_addrhold_0
// For Zerohold of DA pin
always @( negedge CLK or DA )
begin : blk_dihold_0
  if ( CLK == 1'b0 )
  begin
    DA_old <= DA;
  end // if of CLK = 0
end // end of always block blk_dihold_0
// For Zerohold of WEA pin
always @( negedge CLK or WEA )
begin : blk_wehold_0
  if ( CLK == 1'b0 )
  begin
    WEA_old <= WEA;
  end // if of CLK = 0
end // end of always block blk_wehold_0
// For Zerohold of MEA pin
always @( negedge CLK or MEA or LS  )
begin : blk_mehold_0
  if ( CLK == 1'b0 )
  begin
    if (  (LS === 1'b1 && MEA !== 1'bx))
      MEA_old <= 1'b0;
    else
      MEA_old <= MEA;
  end // if of CLK = 0
end // end of always block blk_mehold_0
// For Zerohold of TEST_RNM pin
always @( negedge CLK or TEST_RNM )
begin : blk_test_rnmhold_0
  if ( CLK == 1'b0 )
  begin
    TEST_RNM_old <= TEST_RNM;
  end // if of CLK = 0
end // end of always block blk_test_rnmhold_0

// For Zerohold of ADRB pin
always @( negedge CLK or ADRB )
begin : blk_addrhold_1
  if ( CLK == 1'b0 )
  begin
    ADRB_old <= ADRB;
  end // if of CLK = 0
end // end of always block blk_addrhold_1
// For Zerohold of MEB pin
always @( negedge CLK or MEB or LS  )
begin : blk_mehold_1
  if ( CLK == 1'b0 )
  begin
    if (  (LS === 1'b1 && MEB !== 1'bx))
      MEB_old <= 1'b0;
    else
      MEB_old <= MEB;
  end // if of CLK = 0
end // end of always block blk_mehold_1
// For Zerohold of Test1 pin
always @( negedge CLK or TEST1 )
begin : blk_test1hold_1
  if ( CLK == 1'b0 )
  begin
    TEST1_old <= TEST1;
  end // if of CLK = 0
end // end of always block blk_test1hold_1

// For Zerohold of Testrwm pin
always @( negedge CLK or TESTRWM )
begin : blk_testrwmhold1
  if ( CLK == 1'b0 )
  begin
    TESTRWM_old <= TESTRWM;
  end // if of CLK = 0
end // end of always block blk_testrwmhol_1


`ifdef VIRAGE_FAST_VERILOG
`else
// PORT A WE violation
always @(notif_wea)           
begin : blk_notif_we_0
 if (RSCRST === 1'b0)
 begin
  MEA_chk = MEA_old;
  if (MEA_chk !== 1'b0)
  begin
    if ( WEA_old === 1'b0)
    begin
      flaga_viol = `True;
    end // if of WEA_old = 0
    flaga_we_ok = `False;
    checkSanityOnAport;
  end // if of MEA_chk != 0
 end
end // end of always block blk_notif_we_0

always @(notif_clk)            // PORT A CLK violation
begin
if (RSCRST === 1'b0 && (diff_me_tch === 1'b1 || MEA !== 1'b0 || MEB !== 1'b0))
begin
  flaga_clk_valid = `False;

    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flaga_adr_ok = `False;
    flaga_we_ok  = `False;
    checkSanityOnAport;
 end 
end

always @(notif_clkp)            // PORT A CLK violation
begin
if (RSCRST === 1'b0 && (diff_me_tcc === 1'b1 || MEA !== 1'b0 || MEB !== 1'b0))
begin
  flaga_clk_valid = `False;

    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flaga_adr_ok = `False;
    flaga_we_ok  = `False;
    checkSanityOnAport;
 end 
end

// PORT A ME violation
always @(notif_mea)           
begin : blk_notif_me_0
 if (RSCRST === 1'b0)
 begin
    if ( WEA === 1'b1 )
    begin
      flaga_adr_ok = `False;
      checkSanityOnAport;
    end
 end
end // end of always block blk_notif_me_0

// PORT A ADR violation
always @(notif_adra)     
begin : blk_notif_addr_0
 if (RSCRST === 1'b0)
 begin
  MEA_chk = MEA_old;
  if (MEA_chk !== 1'b0)
  begin
      flaga_adr_ok = `False;
      corrupt_all_loc(`True);
  end // if of MEA_chk != 0
 end // if RSCRST = 0 
end // end of always block blk_notif_addr_0

// PORT A D violation
genvar nk;
generate for (nk=0; nk<144; nk=nk+1)
begin : ENDA_blk

reg [143:0]  tmp_DA;

always @(notif_da[nk])
begin
 if (RSCRST === 1'b0)
 begin
  MEA_chk = MEA_old;
  if (MEA_chk !== 1'b0)
  begin
    read_write_flag = 1'b0;
    read_mem_red(memdata,ADRA_old);
    tmp_DA = memdata;
    tmp_DA[nk] = 1'bX;
    write_mem_red(ADRA_old,tmp_DA);
  end // if of MEA_chk != 0 
 end // if RSCRST = 0 
end // end of always block blk_notif_di_0
end
endgenerate


always @(notif_test1)               //PORT A TEST1 violation
begin
 if ((RSCRST === 1'b0) && !(MEA_old === 1'b1 && WEA_old === 1'b1 && MEB_old === 1'b1))
 begin
    if(MEB_old !== 1'b0)
    begin
      flagb_viol = `True;
      flagb_read_ok = `False;
      -> ev_read_out_b_port;
    end
    if(MEA_old !== 1'b0 && WEA_old !== 1'b0)
    begin
      flaga_d_ok  = `False;
      checkSanityOnAport;
    end
 end
end
always @(notif_testrwm)               //PORT A TESTRWM violation
begin
 if (RSCRST === 1'b0)
 begin
    if(MEB_old !== 1'b0)
    begin
      flagb_viol = `True;
      flagb_read_ok = `False;
      -> ev_read_out_b_port;
    end
    if(MEA_old !== 1'b0 && WEA_old !== 1'b0)
    begin
      flaga_d_ok  = `False;
      checkSanityOnAport;
    end
 end // if RSCRST = 0
end
always @(notif_test_rnm)               //PORT A TEST_RNM violation
begin
 if (RSCRST === 1'b0)
 begin
   corrupt_all_loc(`True);
   flaga_we_ok = `False;
   if(MEB_old !== 1'b0)
   begin
     flagb_viol = `True;
     flagb_read_ok = `False;
     -> ev_read_out_b_port;
   end
 end // if RSCRST = 0
end

always @(notif_ls)           
begin
  corrupt_all_loc(`True);
  flagb_read_ok = `False;
  -> ev_read_out_b_port;
end


//PORT A RM violation
always @(notif_rm)       
begin : blk_notif_rm_0
 if (RSCRST === 1'b0)
 begin
  MEA_chk = MEA_old;
  if (MEA_chk !== 1'b0)
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end // if of MEA_chk != 0
 end // if RSCRST = 0
end // end of always block blk_notif_rm_0

//PORT A RME violation
always @(notif_rme)  
begin : blk_notif_rmen_0
 if (RSCRST === 1'b0)
 begin
  MEA_chk = MEA_old;
  if (MEA_chk !== 1'b0)
  begin
    flaga_d_ok  = `False;
    checkSanityOnAport;
  end // if of MEA_chk != 0 
 end // if RSCRST = 0
end // end of always block blk_notif_rmen_0
always @(notif_bc1 or notif_bc2)
begin : blk_notif_bc1bc2_0
 if (RSCRST === 1'b0)
 begin
  flaga_we_ok  = `False;
  corrupt_all_loc(`True);
 end // if RSCRST = 0
end  // blk_notif_bc1bc2_0

`endif // endif of VIRAGE_FAST_VERILOG



`ifdef VIRAGE_FAST_VERILOG
`else
always @(notif_rscrst_CLK_rise_fall_rec)
begin : rscrst_CLK_rise_fall_rec
  if (MEB_old == 1'b1)
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end
  if (WEA_old == 1'b1 && MEA_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WEA_old = 1
end // end of always block rscrst_CLK_rec 

always @(notif_rsclk_CLK_rise_rise_rec)
begin : rsclk_CLK_rise_rise_rec
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
    flaga_adr_ok = `False;
    checkSanityOnAport;
end // end of always block rsclk_CLK_rise_fall_rec 

always @(notif_rscen_CLK_rise_fall_rec)
begin : rscen_CLK_rise_fall_rec
  if (MEB_old == 1'b1)
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end
  if (WEA_old == 1'b1 && MEA_old == 1'b1)
  begin
    flaga_adr_ok = `False;
    checkSanityOnAport;
  end // if of WEA_old = 1
end // end of always block rscen_CLK_rise_rise_rec 

always @(notif_rscrst_RSCLK_rise_fall_rec)
begin : rscrst_RSCLK_rise_fall_rec
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_rsclk_rise_fall_rec

always @(notif_rsclk or notif_rscen or notif_fiso)
begin : blk_notif_rsclk_0
  flaga_shift_ok = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rsclk_0

always @(notif_rscrst)
begin : blk_notif_rscrst_0
  flaga_clear_scan_reg = `False;
  scan_reg = 18'bx;
  RSCOUT_local = scan_reg[17];
end // end of always block blk_notif_rscrst_0

// RSCIN violation
always @(notif_rscin)
begin : blk_notif_rscin_0
  flaga_shift_ok = `False;
  scan_reg[0] = 1'bx;
end // end of always block blk_notif_rscen_0
`endif // endif of VIRAGE_FAST_VERILOG

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCEN)
begin : blk_rscen_0
  flaga_shift_ok = `True;
  disp_RSCLK_msg = 1'b1;
end // end of always block blk_rscen_0

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCRST or posedge INTERNAL_RESET)
begin : blk_posrscrst_0
  if ( RSCRST === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
   #0.0;
   `ifdef VIRAGE_IGNORE_RESET
   if (RSCRST === 1'b1 || INTERNAL_RESET === 1'b1)
   `else 
   if (RSCRST === 1'b1)
   `endif
   begin
    scan_reg = 18'b0;
    RSCOUT_local = scan_reg[17];
    flaga_clear_scan_reg = `True;
    RST_check = 1'b0;
     if (INTERNAL_RESET === 1'b1)
     begin
       #1 INTERNAL_RESET = 1'b0;
     end
   end
  end // else of if RSCRST = X
end // end of always block blk_posrscrst_0

// Functionality of RSCRST
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCRST or negedge INTERNAL_RESET)
begin : blk_negrscrst_0
  #0;
  if ( RSCRST === 1'bx)
  begin
    flaga_clear_scan_reg = `False;
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCRST");
  end // if of RSCRST = X
  else
  begin
    if ( RST_check == 1'b0 && $realtime != 0)
    begin
      RST_check = 1'b1;
      RST_tri = 1'b1;
      #0;
      if ( flaga_clear_scan_reg )
      begin:clear_scan_reg
        scan_reg = 18'b0 ;
        RSCOUT_local = scan_reg[17];
      end // if of flaga_clear_scan_reg is true
      `ifdef INITIALIZE_MEM
      // to read initialization files, add to verilog model `define INITIALIZE_MEM
      // or use command line option +define+INITIALIZE_MEM
        load_mem;        // Read initial data for memory if any preload file exists.
      `endif
    end // if of RST_check = 0 and $realtime != 0
    flaga_clear_scan_reg = `False;
  end // else of if RSCRST = X
end // end of always block blk_negrscrst_0

// reset for next cycle
always @(negedge CLK)
begin : blk_intnegclock_0
  if (flaga_clk_valid)
  begin
    #0.001;
    flaga_adr_ok  = `True;
    read_write_flag = 1'b0;
    flagb_adr_ok  = `True;
    flaga_we_ok   = `True;
    flaga_d_ok    = `True;
    flaga_viol    = `False;
    flagb_viol    = `False;
  end // if of flaga_clk_valid is true
  if ( CLK !== 1'bx )
  begin
    #0.001;
    flaga_range_ok  = `True;
    left_col_out_range = 1'b0;
    right_col_out_range = 1'b0;
    flagb_read_ok = `True;
    flagb_rm_ok = `True;
    flaga_clk_valid = `True;
    flag_read_before_crpt = 1'b0;
    if (LS === 1'b1 )
      TEST1latched = 1'b0;
  end // if of CLK != X
  else
  begin
    if (MEA !== 1'b0 || MEB !== 1'b0)
    begin
      flaga_clk_valid = `False;
      QB_local_tmp = 144'bx;
      corrupt_all_loc(`True);
      report_unknown("CLK");
    end
  end // else of if CLK != X
end // end of always block blk_intnegclock_0

// PORT A FUNCTIONALITY 

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(FISO)
begin : blk_fiso_0
  if (FISO === 1'bx)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("FISO");
  end // else if of FISO = X 
end

`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(negedge RSCLK)
begin : blk_negtestrsclock_0
  if (RSCLK !== 1'bx)
  begin
    flaga_shift_ok = `True;
  end
  else
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
end

integer j;
`ifdef SNPS_SUPPORT_UPF_SIM
(* vcs_always_on *)
`endif
always @(posedge RSCLK)
begin : blk_postestrsclock_0
  RSCENlatched = RSCEN;
  #0;
  if (RSCLK === 1'bx && RSCENlatched)
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    report_unknown("RSCLK");
  end // else if of RSCLK = X 
  if ( RSCENlatched === 1'b1 && RSCRST === 1'b0)
  begin:do_shift
    #0;
    if ( RSCLK !== 1'bx )
    begin
      if ( flaga_shift_ok )
      begin
        scan_reg = scan_reg << 1;
        RSCOUT_local = scan_reg[17];
        scan_reg[0] = RSCIN;
        flaga_shift_ok = `False;
        if ( RSCIN === 1'bx )
        begin
          report_unknown("RSCIN");
        end // if of RSCIN = X
      end // if of flaga_shift_ok is true
    end // if RSCLK != X
  end // if of RSCEN = 1 and RSCRST = 0 
  else if ( RSCEN === 1'bx || RSCRST === 1'bx )
  begin
    scan_reg = 18'bx;
    RSCOUT_local = scan_reg[17];
    if ( RSCEN === 1'bx )
    begin
      report_unknown("RSCEN");
    end // if of RSCEN = X
  end // else if of RSCEN = X or RSCRST = X
end


always @(posedge CLK)
begin : blk_intposclock_0
 `ifdef VIRAGE_FAST_VERILOG
   if((MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid && RSCEN === 1'b1 && RSCRST === 1'b0 && disp_RSCLK_msg)
   begin
     $display("\n%m<<VIRL_MEM_WARNING:For proper memory write/read operation ensure RSCLK is not running>>at time=%t\n",$realtime);
     disp_RSCLK_msg = 1'b0;
   end
 `endif // endif of VIRAGE_FAST_VERILOG
  CLKA_T = $realtime;
  MEAlatched = MEA_old;
  WEAlatched = WEA_old;
  TEST1latched = TEST1_old;
  TESTRWMlatched = TESTRWM_old;
  ADRAlatched = ADRA_old;
  DAlatched = DA_old;
  ADRBlatched = ADRB_old;
  MEBlatched = MEB_old;
  TEST_RNMlatched = TEST_RNM_old;
  if (TEST_RNMlatched === 1'b1)
  begin
    MEAlatched = 1'b0; // Prevent write and read opeation if TEST_RNM is active
    MEBlatched = 1'b0;
  end
  if (TEST1 === 1'b1 && MEAlatched === 1'b1 && WEAlatched === 1'b1 && MEBlatched === 1'b1)
  begin
// In TEST1 mode if both port active then disable the function internally
    MEAlatched = 1'b0;
    MEBlatched = 1'b0;
  end
  if ((LS === 1'bX) && ((MEAlatched !== 1'b0 && WEAlatched !== 1'b0) || (MEBlatched !== 1'b0)))
  begin
    report_unknown("LS");
    corrupt_all_loc(`True);
    QB_local_tmp = 144'bx;
  end
  else
  begin
  if (^ADRBlatched === 1'bX && MEBlatched !== 1'b0)
  begin
    report_unknown("ADRB");
    flagb_read_ok = `False;
    `ifdef virage_ignore_read_addx
    `else
       flagb_adr_ok = `False;
       corrupt_all_loc(`True);
    `endif
  end
  else if((ADRBlatched > 255) && (MEBlatched != 1'b0))
  begin
    if(( MES_CNTRL=="ON" || MES_CNTRL=="WARN") && $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING:address is out of range>>at time=%t \n RANGE:0 to 255\n",$realtime);
    end
    flagb_range_ok = `False;
    flagb_read_ok = `False;
  end
  if (^ADRAlatched === 1'bX && MEAlatched !== 1'b0)
  begin
    report_unknown("ADRA");
    if ((WEAlatched === 1'b1))
    begin
      if (read_write_flag === 1'b0)
      begin
        read_write_flag = 1'b1;
        get_X_Y_adr(X_addressB, Y_addressB, ADRBlatched);
        mem_core_read_before_write = mem_core_array[X_addressB];
      end
      flaga_adr_ok = `False;
      flag_read_before_crpt = 1'b1;
      corrupt_all_loc(`True);
    end
  end // if ADRAlatched unknown and MEAlatched != 0
  else if((ADRAlatched > 8'b11111111) && (MEAlatched === 1'b1) && (WEAlatched === 1'b1))
  begin
    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
    begin
      $display("\n%m <<VIRL_MEM_WARNING:address is out of range>>at time=%t \n RANGE:0 to 255\n",$realtime);
    end
    flaga_range_ok = `False;
  end // if of ADRAlatched out of range with MEAlatched = 1
  else if (TEST_RNMlatched === 1'bx && ((WEAlatched != 1'b0 && MEAlatched != 1'b0) | (MEBlatched != 1'b0)))
  begin
    report_unknown("TEST_RNM");
    corrupt_all_loc(`True);
    flaga_we_ok = `False;
    if (MEBlatched != 1'b0)
      flagb_read_ok = `False;
  end // if TEST_RNMlatched = X
  if (!flaga_clk_valid)
  begin
    QB_local_tmp = 144'bx;
  end // if of flaga_clk_valid is NOT true
    if (CLK === 1'bx)
    begin
      #0.001;
      if (diff_me_tch === 1'b1 || MEA !== 1'b0 ||  MEB !== 1'b0)
      begin
        QB_local_tmp = 144'bx;
        corrupt_all_loc(flaga_range_ok);
        report_unknown("CLK");
      end
    end // if of CLK = X
  else if ((BC1 === 1'bX || BC2 === 1'bX) && WEAlatched !== 1'b0) 
  begin
    WEAlatched = 1'b0;
  end
  else if (RSCRST === 1'b1)
  begin
    if (MEBlatched === 1'b1 )
    begin
      QB_local_tmp = 144'bx;
    end // if of MEAlatched = 1 and read
    if (MEAlatched === 1'b1 && ((WEAlatched === 1'b1)))
    begin
      corrupt_all_loc(flaga_range_ok);
    end // if of MEAlatched = 1 and write
  end
  else
  begin
      -> ev_RST_out_a_port;
   end // else of if CLK = X
  end // else of if power pin unknown 
end // end of always block blk_intposclock_0

// Handle Read/Write
always @(ev_RST_out_a_port)
begin : blk_readwrite_0
  flag_testrwm_active = 1'b0;
  if ( RST_tri === 1'b0 )
  begin
    QB_local_tmp = 144'bx;
  end // if RST_tri = 0
  else 
  begin
    if ( MEAlatched === 1'bx )
    begin
      report_unknown("MEA");
      if (WEAlatched !== 1'b0)
      begin
        if (read_write_flag === 1'b0)
        begin
          read_write_flag = 1'b1;
          get_X_Y_adr(X_addressB, Y_addressB, ADRBlatched);
          mem_core_read_before_write = mem_core_array[X_addressB];
        end
        flag_read_before_crpt = 1'b1;
        flaga_we_ok = `False;
        corrupt_all_loc(flaga_range_ok);
      end
    end // if of MEAlatched = X
    if (MEAlatched !== 1'b0 && !flaga_viol)
    begin
      if (WEAlatched === 1'bx)
      begin
        flaga_we_ok = `False;
        report_unknown("WEA");
      end // if of WEAlatched = X
          if (TESTRWMlatched === 1'bx)
          begin
            report_unknown("TESTRWM");
            if ( WEAlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRAlatched);
            end // if of WEAlatched = 1
          end // if of TESTRWMlatched = 1
          else
          begin
          if (TEST1latched === 1'bx)
          begin
            report_unknown("TEST1");
            if ( WEAlatched == 1'b1 )
            begin
              corrupt_cur_loc(ADRAlatched);                             
            end // if of WEAlatched = 1
          end // if TEST1latched = X
          else if ((TEST1latched === 1'b1) && (TESTRWMlatched === 1'b1))
          begin
            corrupt_all_loc(`True);
            if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR") && $realtime != 0 && mes_all_valid)
            begin
              $display("\n%m<<VIRL_MEM_ERR: TESTRWM & TEST1 both are active>>at time=%t\n",$realtime);
            end
          end
          else
          begin
                if (^RM === 1'bx)
                begin
                  if (RME !== 1'bx)
                    report_unknown("RM");
                  else
                    report_unknown("RME");
                  if ( WEAlatched == 1'b1 )
                  begin
                    corrupt_cur_loc(ADRAlatched);
                  end // if of WEAlatched = 1
                end // if of RM = X
                else
                begin
                  if (MEAlatched !== 1'b1)
                  begin
                    flaga_we_ok = `False;       // don't know if cycle is On or Off
                  end // if of MEAlatched != 1 

                  if((ADRAlatched > 8'b11111111) && (MEAlatched != 1'b0))
                  begin
                    if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
                    begin
                      $display("\n%m<<VIRL_MEM_WARNING:address is out of range>> at time= %t\n RANGE:0 to 255\n",$realtime);
                    end
                    flaga_range_ok = `False;
                  end // if of ADRAlatched out of range with MEAlatched = 1
                  if (flaga_adr_ok && flaga_d_ok && (WEAlatched !== 1'b0) && (MEAlatched !== 1'b0))
                  begin
                    if ( MEBlatched === 1'b1 && (ADRAlatched === ADRBlatched) )
                    begin
                      if (read_write_flag === 1'b0)
                      begin
                        read_write_flag = 1'b1;
                        get_X_Y_adr(X_addressB, Y_addressB, ADRBlatched);
                        mem_core_row_tempB = mem_core_array[X_addressB];
                        mem_core_read_before_write = mem_core_row_tempB;
                      end
                    end
                  end
                  if ( MEAlatched === 1'bx )
                  begin
                    report_unknown("MEA");
                    if (WEAlatched == 1'b1)
                    begin
                      corrupt_all_loc(flaga_range_ok);
                    end
                  end // if of MEAlatched = X
                  else
                  begin
                    if (RSCRST !== 1'b1)
                    begin
                      if (flaga_range_ok && flaga_we_ok && flaga_adr_ok && flaga_d_ok && (WEAlatched == 1'b1))
                      begin
                        if ((TEST1latched === 1'b1 && MEBlatched === 1'b0) || TEST1latched === 1'b0)
                        begin
                          if (TESTRWMlatched === 1'b1 && TEST1latched === 1'b0)
                            flag_testrwm_active = 1'b1;
                          else
                          begin
                            
                            write_mem_red(ADRAlatched,DAlatched);
                          end
                        end
                          if ( ^DAlatched === 1'bx && WEAlatched !== 1'b0 )
                          begin
                            report_unknown("DA");
                          end // if of DAlatched = X
                          if (!mes_all_valid)
                          begin
                            mes_all_valid = 1'b1;
                          end // if of mes_all_valid = 0
                      end // if of write
                      else
                      begin
                        checkSanityOnAport;
                      end // else of if write
                    end // if RSCRST
                  if (TEST1latched === 1'b1)
                  begin
                    if ((MEBlatched === 1'b1) && (MES_CNTRL=="ON" && $realtime != 0 && mes_all_valid))
                    begin
                      if( (MES_CNTRL=="ON" || MES_CNTRL=="WARN")&& $realtime != 0 && mes_all_valid)
                        begin
                        $display("\n%m<<VIRL_MEM_WARNING: TEST1 Mode & Memory Enable active from both ports, no operation>> at time = %t\n",$realtime);
                        end
                    end
                  end // if of TEST1latched = 1
                  end // else of if MEAlatched = X
                end // else of if RM = X
          end // else of if TEST1latched = X
        end // else of if TESTRWMlatched = x
    end // if of MEAlatched != 0 & flaga_viol = 0
   if ( MEBlatched === 1'bx )
   begin
     report_unknown("MEB");
     QB_local_tmp = 144'bx;
     flagb_read_ok = `False;
     `ifdef virage_ignore_read_addx
     `else
       corrupt_all_loc(flaga_range_ok);
     `endif
     -> ev_read_out_b_port;
   end
   else if (MEBlatched === 1'b1)
   begin
     if (flag_read_before_crpt === 1'b1)
     begin
       mem_core_row_tempB = mem_core_read_before_write;
     end
     if (TEST1latched === 1'b1)
     begin
       if (TESTRWMlatched === 1'b1)
       begin
         flagb_read_ok = `False;
         -> ev_read_out_b_port;
         corrupt_all_loc(`True);
        if( (MES_CNTRL=="ON" || MES_CNTRL=="ERR")&& $realtime != 0 && mes_all_valid)
        begin
          $display("\n%m<<VIRL_MEM_ERR: TESTRWM & TEST1 both are active>>at time = %t\n", $realtime);
        end
       end
       else
       begin
        if (MEAlatched === 1'b0 || WEAlatched === 1'b0)
        begin
         flagb_read_ok = `False;
         -> ev_read_out_b_port;
         @(negedge CLK)
         -> ev_read_out_b_port;
        end
       end
     end
     else if (TEST1latched === 1'bx)
     begin
       report_unknown("TEST1");
       QB_local_tmp = 144'bx;
       flagb_read_ok = `False;
     end
     else if (TEST_RNMlatched === 1'bx)
     begin
       report_unknown("TEST_RNM");
       QB_local_tmp = 144'bx;
       flagb_read_ok = `False;
     end // if TEST_RNMlatched = X
     else
     begin
       if (TESTRWMlatched === 1'bx)
       begin
         report_unknown("TESTRWM");
         QB_local_tmp = 144'bx;
         flagb_read_ok = `False;
       end // if TESTRWMlatched = X
       else
       begin
       if (^RM === 1'bx)
       begin
         if (RME !== 1'bx)
           report_unknown("RM");
         else
           report_unknown("RME");
         QB_local_tmp = 144'bx;
         flagb_read_ok = `False;
       end
       -> ev_read_out_b_port;
     end //else if of if TESTRWMlatched 1'bx 
    end // else if of if TEST1latched 1'b1
   end
  end   // end of else of RST_tri != 0
   if (flag_testrwm_active === 1'b1)
   begin
    @(negedge CLK);
    #0.001;
     if (flag_testrwm_active === 1'b1) begin
         write_mem_red(ADRAlatched,DAlatched);
     end // re-check if testrwm still active for write at negedge
   end
end // end of always block blk_readwrite_0


always @ (LS)
begin
  if (TESTRWM === 1'b1)
  begin
    flaga_adr_ok  = `False;
    flaga_we_ok  = `False;
    checkSanityOnAport;
  end
end
always @ (TEST_RNM)
begin : blk_test_rnm_0
  if (CLK === 1'b1 && TEST1latched === 1'b1 && $realtime != 0  && (LS === 1'b0))
  begin
    if (MEB_old !== 1'b0)
    begin
      flagb_viol = `True;
      QB_local_tmp = 144'bx;
      flagb_read_ok = `False;
      -> ev_read_out_b_port;
    end
    #0;
    if (MEA_old !== 1'b0 && WEA_old !== 1'b0)
    begin
      flaga_d_ok = `False;
      checkSanityOnAport;
    end
  end
end // end of always block blk_test_rnm_0

`ifdef VIRAGE_FAST_VERILOG
`else

// PORT B ME violation
always @(notif_meb)           
begin : blk_notif_me_1
 if (RSCRST === 1'b0)
 begin
    flagb_viol = `True;
    flagb_read_ok = `False;                           
    -> ev_read_out_b_port;
    flaga_adr_ok = `False;
    checkSanityOnAport;
 end
end // end of always block blk_notif_me_1

// PORT B ADR violation
always @(notif_adrb)     
begin : blk_notif_addr_1
 if (RSCRST === 1'b0)
 begin
  MEB_chk = MEB_old;
  if (MEB_chk !== 1'b0)
  begin
      flagb_viol = `True;
      flagb_read_ok = `False;                         
      -> ev_read_out_b_port;
      flaga_adr_ok = `False;
      corrupt_all_loc(`True);
  end // if of MEB_chk != 0
 end // if RSCRST = 0 
end // end of always block blk_notif_addr_1




//PORT B RM violation
always @(notif_rm)       
begin : blk_notif_rm_1
 if (RSCRST === 1'b0)
 begin
  MEB_chk = MEB_old;
  if (MEB_chk !== 1'b0)
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end // if of MEB_chk != 0
 end // if RSCRST = 0
end // end of always block blk_notif_rm_1

//PORT B RME violation
always @(notif_rme)  
begin : blk_notif_rmen_1
 if (RSCRST === 1'b0)
 begin
  MEB_chk = MEB_old;
  if (MEB_chk !== 1'b0)
  begin
    flagb_viol = `True;
    flagb_read_ok = `False;
    -> ev_read_out_b_port;
  end // if of MEB_chk != 0 
 end // if RSCRST = 0
end // end of always block blk_notif_rmen_1
`endif // endif of VIRAGE_FAST_VERILOG




// PORT B READ-OUT

always @(ev_read_out_b_port)
begin : blk_readout_1
  #0;                // let CLOCK and NOTIFIER module execute first
  if (^RM === 1'bx)
   flagb_rm_ok = `False;
  if (flagb_adr_ok && flagb_read_ok && flagb_rm_ok && MEBlatched === 1'b1)
  begin : OUTPUT_b
      `ifdef VIRAGE_FAST_VERILOG
      `else
      QB_local_tmp = 144'bx;
      `endif // endif of VIRAGE_FAST_VERILOG
      if (ADRBlatched <= 255)
      begin
        if (flagb_viol)
        begin
          QB_local_tmp = 144'bx;
        end // if of flagb_viol = 1
        else
        begin
          if (RSCRST !== 1'b1)
          begin
           
            read_mem_red(memdata,ADRBlatched);
            QB_local_tmp = memdata;
          end // if RSCRST
        end // else of if flagb_viol = 1
      end // if of ADRBlatched <= 255
  end // if of WEAlatched = 0
  else
  begin
      QB_local_tmp = 144'bx;
      flagb_read_ok = `True;
  end //else of if flagb_adr_ok & flagb_read_ok
  flagb_rm_ok = `True;
end // end of always block blk_readout_1


assign QB_temp = QB_local_tmp;

// Final Output Update 
always @( QB_temp )
begin : blk_output_1
  if ( RST_check == 1'b1 )
  begin
   `ifdef VIRAGE_FAST_VERILOG
     #(O_delay) QB <= DataX;
     #0;
     #(O_delay) QB <= QB_temp;
   `else
     QB <= 144'bx;
     #0.001;
     QB <= QB_temp;
   `endif // endif of VIRAGE_FAST_VERILOG
  end
  else
    QB <= 144'bx;
end // end of always block blk_output_1

assign RSCOUT_tmp = RSCOUT_local;

always @ ( RSCOUT_tmp )
begin
  RSCOUT <= RSCOUT_tmp;
end


endmodule
